/*
 * To build, set up your Release configuration like this:
 *
 * [Runtime Library]
 * Multi-threaded (/MT)
 *
 * Visit https://frida.re to learn more about Frida.
 */
//#include "./frida/frida_main.h"
#include <nlohmann/json.hpp>
#include <iostream>
#include <regex>

#include "spdlog/spdlog.h"
#include "spdlog/sinks/stdout_color_sinks.h"
#include "spdlog/fmt/bin_to_hex.h"

#include <winsock2.h>
#include <ws2tcpip.h>
#include <iphlpapi.h>
#include <array>
#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "iphlpapi.lib")

#include <iomanip>
#include <chrono>
#include <future>
#include <thread>
#include <codecvt>

#include "../common/ProtobufHelper.h"

#include "gtest/gtest.h"

using json = nlohmann::json;
using namespace std::string_view_literals;
using namespace nlohmann::literals;
using namespace std;


#pragma comment(lib, "ws2_32.lib")
#pragma comment(lib, "iphlpapi.lib")

using namespace std::chrono;



TEST(PROTOBUF_TEST, Trivial) {

    ProtobufHelper helper;
    uint8_t pb_data[]={0xf0,0x0d,0x00,0x00,0x10,0x08,0x00,0x00,0x04,0x34,0x00,0x00,0x00,0x5f,0x00,0x00,0x00,0x08,0x00,0x00,0x00,0x07,0x00,0x00,0x00,0x00,0x14,0x3b,0x39,0x67,0x08,0x00,0x81,0x00,0x00,0x00,0x05,0x73,0x6f,0x73,0x6f,0x0a,0x00,0x41,0x4b,0x73,0xbd,0x72,0x09,0x00,0x90,0x00,0x00,0x07,0x69,0x50,0x68,0x6f,0x6e,0x65,0x0b,0x00,0x51,0x00,0x46,0xa9,0x3e,0x0c,0x09,0x00,0xf0,0x06,0x00,0x00,0x13,0xe5,0xa4,0xaa,0xe9,0x98,0xb3,0xe7,0x85,0xa7,0xe5,0xb8,0xb8,0xe5,0x8d,0x87,0xe8,0xb5,0xb7,0x17,0x00,0x51,0x00,0x12,0x18,0x54,0x03,0x09,0x00,0x62,0x00,0x00,0x0d,0x62,0x69,0x75,0x03,0x00,0x30,0xef,0xbd,0x9e,0x11,0x00,0x40,0x00,0x18,0xfa,0x63,0x7c,0x00,0x00,0x02,0x00,0xf0,0x02,0x11,0xe6,0x95,0xb0,0xe6,0x8d,0xae,0xe9,0x87,0x87,0xe9,0x9b,0x86,0x74,0x65,0x73,0x74,0x15,0x00,0x51,0x00,0x28,0xb4,0xff,0x9c,0x09,0x00,0xf0,0x06,0x00,0x00,0x13,0x2f,0x2f,0x2f,0xe6,0x97,0xa0,0xe6,0x83,0x85,0xe6,0x97,0xa0,0xe4,0xb9,0x89,0x40,0x40,0x40,0x17,0x00,0x51,0x00,0x6a,0xd1,0xd3,0xf4,0x09,0x00,0xb0,0x00,0x00,0x04,0xe5,0x93,0x8e,0x00,0x00,0x00,0x00,0x00,0x74,0x73,0x66,0x34,0x67,0x06};
    JSON json;
    helper.parse_pb(pb_data,sizeof(pb_data),json);

    std::cout<<json.dump()<<std::endl;
}


int main(){
    SetConsoleOutputCP(65001);
    std::vector<std::string> data;
    auto data_ptr = std::make_unique<std::vector<std::string>>(data);


    data_ptr->push_back("111");
    data_ptr->push_back("222");



}





