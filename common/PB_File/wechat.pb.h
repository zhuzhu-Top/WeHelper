// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wechat.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4023000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4023000 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_wechat_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_wechat_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_wechat_2eproto;
namespace wechat_proto {
class BaseRequest;
struct BaseRequestDefaultTypeInternal;
extern BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
class BaseResponse;
struct BaseResponseDefaultTypeInternal;
extern BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
class CDNClientConfig;
struct CDNClientConfigDefaultTypeInternal;
extern CDNClientConfigDefaultTypeInternal _CDNClientConfig_default_instance_;
class CDNDnsInfo;
struct CDNDnsInfoDefaultTypeInternal;
extern CDNDnsInfoDefaultTypeInternal _CDNDnsInfo_default_instance_;
class CDNDnsPortInfo;
struct CDNDnsPortInfoDefaultTypeInternal;
extern CDNDnsPortInfoDefaultTypeInternal _CDNDnsPortInfo_default_instance_;
class CmdItem;
struct CmdItemDefaultTypeInternal;
extern CmdItemDefaultTypeInternal _CmdItem_default_instance_;
class CmdList;
struct CmdListDefaultTypeInternal;
extern CmdListDefaultTypeInternal _CmdList_default_instance_;
class DATA;
struct DATADefaultTypeInternal;
extern DATADefaultTypeInternal _DATA_default_instance_;
class GetCDNDnsRequest;
struct GetCDNDnsRequestDefaultTypeInternal;
extern GetCDNDnsRequestDefaultTypeInternal _GetCDNDnsRequest_default_instance_;
class GetCDNDnsResponse;
struct GetCDNDnsResponseDefaultTypeInternal;
extern GetCDNDnsResponseDefaultTypeInternal _GetCDNDnsResponse_default_instance_;
class NewSyncResponse;
struct NewSyncResponseDefaultTypeInternal;
extern NewSyncResponseDefaultTypeInternal _NewSyncResponse_default_instance_;
class NewSyncResponseMSGItem;
struct NewSyncResponseMSGItemDefaultTypeInternal;
extern NewSyncResponseMSGItemDefaultTypeInternal _NewSyncResponseMSGItem_default_instance_;
class SKBuiltinString;
struct SKBuiltinStringDefaultTypeInternal;
extern SKBuiltinStringDefaultTypeInternal _SKBuiltinString_default_instance_;
class SKBuiltinString_;
struct SKBuiltinString_DefaultTypeInternal;
extern SKBuiltinString_DefaultTypeInternal _SKBuiltinString__default_instance_;
}  // namespace wechat_proto
namespace google {
namespace protobuf {
template <>
::wechat_proto::BaseRequest* Arena::CreateMaybeMessage<::wechat_proto::BaseRequest>(Arena*);
template <>
::wechat_proto::BaseResponse* Arena::CreateMaybeMessage<::wechat_proto::BaseResponse>(Arena*);
template <>
::wechat_proto::CDNClientConfig* Arena::CreateMaybeMessage<::wechat_proto::CDNClientConfig>(Arena*);
template <>
::wechat_proto::CDNDnsInfo* Arena::CreateMaybeMessage<::wechat_proto::CDNDnsInfo>(Arena*);
template <>
::wechat_proto::CDNDnsPortInfo* Arena::CreateMaybeMessage<::wechat_proto::CDNDnsPortInfo>(Arena*);
template <>
::wechat_proto::CmdItem* Arena::CreateMaybeMessage<::wechat_proto::CmdItem>(Arena*);
template <>
::wechat_proto::CmdList* Arena::CreateMaybeMessage<::wechat_proto::CmdList>(Arena*);
template <>
::wechat_proto::DATA* Arena::CreateMaybeMessage<::wechat_proto::DATA>(Arena*);
template <>
::wechat_proto::GetCDNDnsRequest* Arena::CreateMaybeMessage<::wechat_proto::GetCDNDnsRequest>(Arena*);
template <>
::wechat_proto::GetCDNDnsResponse* Arena::CreateMaybeMessage<::wechat_proto::GetCDNDnsResponse>(Arena*);
template <>
::wechat_proto::NewSyncResponse* Arena::CreateMaybeMessage<::wechat_proto::NewSyncResponse>(Arena*);
template <>
::wechat_proto::NewSyncResponseMSGItem* Arena::CreateMaybeMessage<::wechat_proto::NewSyncResponseMSGItem>(Arena*);
template <>
::wechat_proto::SKBuiltinString* Arena::CreateMaybeMessage<::wechat_proto::SKBuiltinString>(Arena*);
template <>
::wechat_proto::SKBuiltinString_* Arena::CreateMaybeMessage<::wechat_proto::SKBuiltinString_>(Arena*);
}  // namespace protobuf
}  // namespace google

namespace wechat_proto {

// ===================================================================


// -------------------------------------------------------------------

class SKBuiltinString final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.SKBuiltinString) */ {
 public:
  inline SKBuiltinString() : SKBuiltinString(nullptr) {}
  ~SKBuiltinString() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SKBuiltinString(::google::protobuf::internal::ConstantInitialized);

  SKBuiltinString(const SKBuiltinString& from);
  SKBuiltinString(SKBuiltinString&& from) noexcept
    : SKBuiltinString() {
    *this = ::std::move(from);
  }

  inline SKBuiltinString& operator=(const SKBuiltinString& from) {
    CopyFrom(from);
    return *this;
  }
  inline SKBuiltinString& operator=(SKBuiltinString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SKBuiltinString& default_instance() {
    return *internal_default_instance();
  }
  static inline const SKBuiltinString* internal_default_instance() {
    return reinterpret_cast<const SKBuiltinString*>(
               &_SKBuiltinString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SKBuiltinString& a, SKBuiltinString& b) {
    a.Swap(&b);
  }
  inline void Swap(SKBuiltinString* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SKBuiltinString* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SKBuiltinString* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SKBuiltinString>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SKBuiltinString& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SKBuiltinString& from) {
    SKBuiltinString::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKBuiltinString* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.SKBuiltinString";
  }
  protected:
  explicit SKBuiltinString(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFieldNumber = 1,
  };
  // optional string str = 1;
  bool has_str() const;
  void clear_str() ;
  const std::string& str() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_str(Arg_&& arg, Args_... args);
  std::string* mutable_str();
  PROTOBUF_NODISCARD std::string* release_str();
  void set_allocated_str(std::string* ptr);

  private:
  const std::string& _internal_str() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str(
      const std::string& value);
  std::string* _internal_mutable_str();

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.SKBuiltinString)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<0, 1, 0, 40, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr str_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class SKBuiltinString_ final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.SKBuiltinString_) */ {
 public:
  inline SKBuiltinString_() : SKBuiltinString_(nullptr) {}
  ~SKBuiltinString_() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR SKBuiltinString_(::google::protobuf::internal::ConstantInitialized);

  SKBuiltinString_(const SKBuiltinString_& from);
  SKBuiltinString_(SKBuiltinString_&& from) noexcept
    : SKBuiltinString_() {
    *this = ::std::move(from);
  }

  inline SKBuiltinString_& operator=(const SKBuiltinString_& from) {
    CopyFrom(from);
    return *this;
  }
  inline SKBuiltinString_& operator=(SKBuiltinString_&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SKBuiltinString_& default_instance() {
    return *internal_default_instance();
  }
  static inline const SKBuiltinString_* internal_default_instance() {
    return reinterpret_cast<const SKBuiltinString_*>(
               &_SKBuiltinString__default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SKBuiltinString_& a, SKBuiltinString_& b) {
    a.Swap(&b);
  }
  inline void Swap(SKBuiltinString_* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SKBuiltinString_* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SKBuiltinString_* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SKBuiltinString_>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SKBuiltinString_& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const SKBuiltinString_& from) {
    SKBuiltinString_::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SKBuiltinString_* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.SKBuiltinString_";
  }
  protected:
  explicit SKBuiltinString_(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBufferFieldNumber = 2,
    kLenFieldNumber = 1,
  };
  // optional bytes buffer = 2;
  bool has_buffer() const;
  void clear_buffer() ;
  const std::string& buffer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_buffer(Arg_&& arg, Args_... args);
  std::string* mutable_buffer();
  PROTOBUF_NODISCARD std::string* release_buffer();
  void set_allocated_buffer(std::string* ptr);

  private:
  const std::string& _internal_buffer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buffer(
      const std::string& value);
  std::string* _internal_mutable_buffer();

  public:
  // optional uint32 len = 1;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.SKBuiltinString_)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr buffer_;
    ::uint32_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class BaseRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.BaseRequest) */ {
 public:
  inline BaseRequest() : BaseRequest(nullptr) {}
  ~BaseRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BaseRequest(::google::protobuf::internal::ConstantInitialized);

  BaseRequest(const BaseRequest& from);
  BaseRequest(BaseRequest&& from) noexcept
    : BaseRequest() {
    *this = ::std::move(from);
  }

  inline BaseRequest& operator=(const BaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseRequest& operator=(BaseRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseRequest* internal_default_instance() {
    return reinterpret_cast<const BaseRequest*>(
               &_BaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BaseRequest& a, BaseRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BaseRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BaseRequest& from) {
    BaseRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.BaseRequest";
  }
  protected:
  explicit BaseRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionKeyFieldNumber = 1,
    kDeviceIdFieldNumber = 3,
    kOsTypeFieldNumber = 5,
    kUinFieldNumber = 2,
    kClientVersionFieldNumber = 4,
    kSceneFieldNumber = 6,
  };
  // optional bytes session_key = 1;
  bool has_session_key() const;
  void clear_session_key() ;
  const std::string& session_key() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_session_key(Arg_&& arg, Args_... args);
  std::string* mutable_session_key();
  PROTOBUF_NODISCARD std::string* release_session_key();
  void set_allocated_session_key(std::string* ptr);

  private:
  const std::string& _internal_session_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_session_key(
      const std::string& value);
  std::string* _internal_mutable_session_key();

  public:
  // optional bytes device_id = 3;
  bool has_device_id() const;
  void clear_device_id() ;
  const std::string& device_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_device_id(Arg_&& arg, Args_... args);
  std::string* mutable_device_id();
  PROTOBUF_NODISCARD std::string* release_device_id();
  void set_allocated_device_id(std::string* ptr);

  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(
      const std::string& value);
  std::string* _internal_mutable_device_id();

  public:
  // optional string os_type = 5;
  bool has_os_type() const;
  void clear_os_type() ;
  const std::string& os_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_os_type(Arg_&& arg, Args_... args);
  std::string* mutable_os_type();
  PROTOBUF_NODISCARD std::string* release_os_type();
  void set_allocated_os_type(std::string* ptr);

  private:
  const std::string& _internal_os_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_os_type(
      const std::string& value);
  std::string* _internal_mutable_os_type();

  public:
  // optional uint32 uin = 2;
  bool has_uin() const;
  void clear_uin() ;
  ::uint32_t uin() const;
  void set_uin(::uint32_t value);

  private:
  ::uint32_t _internal_uin() const;
  void _internal_set_uin(::uint32_t value);

  public:
  // optional uint32 client_version = 4;
  bool has_client_version() const;
  void clear_client_version() ;
  ::uint32_t client_version() const;
  void set_client_version(::uint32_t value);

  private:
  ::uint32_t _internal_client_version() const;
  void _internal_set_client_version(::uint32_t value);

  public:
  // optional uint32 scene = 6;
  bool has_scene() const;
  void clear_scene() ;
  ::uint32_t scene() const;
  void set_scene(::uint32_t value);

  private:
  ::uint32_t _internal_scene() const;
  void _internal_set_scene(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.BaseRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 40, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr session_key_;
    ::google::protobuf::internal::ArenaStringPtr device_id_;
    ::google::protobuf::internal::ArenaStringPtr os_type_;
    ::uint32_t uin_;
    ::uint32_t client_version_;
    ::uint32_t scene_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class GetCDNDnsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.GetCDNDnsRequest) */ {
 public:
  inline GetCDNDnsRequest() : GetCDNDnsRequest(nullptr) {}
  ~GetCDNDnsRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCDNDnsRequest(::google::protobuf::internal::ConstantInitialized);

  GetCDNDnsRequest(const GetCDNDnsRequest& from);
  GetCDNDnsRequest(GetCDNDnsRequest&& from) noexcept
    : GetCDNDnsRequest() {
    *this = ::std::move(from);
  }

  inline GetCDNDnsRequest& operator=(const GetCDNDnsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCDNDnsRequest& operator=(GetCDNDnsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCDNDnsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCDNDnsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCDNDnsRequest*>(
               &_GetCDNDnsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetCDNDnsRequest& a, GetCDNDnsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCDNDnsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCDNDnsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCDNDnsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCDNDnsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetCDNDnsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetCDNDnsRequest& from) {
    GetCDNDnsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCDNDnsRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.GetCDNDnsRequest";
  }
  protected:
  explicit GetCDNDnsRequest(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kClientIpFieldNumber = 2,
    kBaseRequestFieldNumber = 1,
    kSceneFieldNumber = 3,
  };
  // optional string clientIp = 2;
  bool has_clientip() const;
  void clear_clientip() ;
  const std::string& clientip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_clientip(Arg_&& arg, Args_... args);
  std::string* mutable_clientip();
  PROTOBUF_NODISCARD std::string* release_clientip();
  void set_allocated_clientip(std::string* ptr);

  private:
  const std::string& _internal_clientip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_clientip(
      const std::string& value);
  std::string* _internal_mutable_clientip();

  public:
  // optional .wechat_proto.BaseRequest baseRequest = 1;
  bool has_baserequest() const;
  void clear_baserequest() ;
  const ::wechat_proto::BaseRequest& baserequest() const;
  PROTOBUF_NODISCARD ::wechat_proto::BaseRequest* release_baserequest();
  ::wechat_proto::BaseRequest* mutable_baserequest();
  void set_allocated_baserequest(::wechat_proto::BaseRequest* value);
  void unsafe_arena_set_allocated_baserequest(::wechat_proto::BaseRequest* value);
  ::wechat_proto::BaseRequest* unsafe_arena_release_baserequest();

  private:
  const ::wechat_proto::BaseRequest& _internal_baserequest() const;
  ::wechat_proto::BaseRequest* _internal_mutable_baserequest();

  public:
  // optional uint32 scene = 3;
  bool has_scene() const;
  void clear_scene() ;
  ::uint32_t scene() const;
  void set_scene(::uint32_t value);

  private:
  ::uint32_t _internal_scene() const;
  void _internal_set_scene(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.GetCDNDnsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<2, 3, 1, 46, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr clientip_;
    ::wechat_proto::BaseRequest* baserequest_;
    ::uint32_t scene_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class BaseResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.BaseResponse) */ {
 public:
  inline BaseResponse() : BaseResponse(nullptr) {}
  ~BaseResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR BaseResponse(::google::protobuf::internal::ConstantInitialized);

  BaseResponse(const BaseResponse& from);
  BaseResponse(BaseResponse&& from) noexcept
    : BaseResponse() {
    *this = ::std::move(from);
  }

  inline BaseResponse& operator=(const BaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseResponse& operator=(BaseResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BaseResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BaseResponse* internal_default_instance() {
    return reinterpret_cast<const BaseResponse*>(
               &_BaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BaseResponse& a, BaseResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BaseResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BaseResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const BaseResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const BaseResponse& from) {
    BaseResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.BaseResponse";
  }
  protected:
  explicit BaseResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMsgFieldNumber = 2,
    kRetFieldNumber = 1,
  };
  // optional .wechat_proto.SKBuiltinString errMsg = 2;
  bool has_errmsg() const;
  void clear_errmsg() ;
  const ::wechat_proto::SKBuiltinString& errmsg() const;
  PROTOBUF_NODISCARD ::wechat_proto::SKBuiltinString* release_errmsg();
  ::wechat_proto::SKBuiltinString* mutable_errmsg();
  void set_allocated_errmsg(::wechat_proto::SKBuiltinString* value);
  void unsafe_arena_set_allocated_errmsg(::wechat_proto::SKBuiltinString* value);
  ::wechat_proto::SKBuiltinString* unsafe_arena_release_errmsg();

  private:
  const ::wechat_proto::SKBuiltinString& _internal_errmsg() const;
  ::wechat_proto::SKBuiltinString* _internal_mutable_errmsg();

  public:
  // optional int32 ret = 1;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.BaseResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::wechat_proto::SKBuiltinString* errmsg_;
    ::int32_t ret_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class GetCDNDnsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.GetCDNDnsResponse) */ {
 public:
  inline GetCDNDnsResponse() : GetCDNDnsResponse(nullptr) {}
  ~GetCDNDnsResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR GetCDNDnsResponse(::google::protobuf::internal::ConstantInitialized);

  GetCDNDnsResponse(const GetCDNDnsResponse& from);
  GetCDNDnsResponse(GetCDNDnsResponse&& from) noexcept
    : GetCDNDnsResponse() {
    *this = ::std::move(from);
  }

  inline GetCDNDnsResponse& operator=(const GetCDNDnsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCDNDnsResponse& operator=(GetCDNDnsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCDNDnsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCDNDnsResponse* internal_default_instance() {
    return reinterpret_cast<const GetCDNDnsResponse*>(
               &_GetCDNDnsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetCDNDnsResponse& a, GetCDNDnsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCDNDnsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCDNDnsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCDNDnsResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCDNDnsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetCDNDnsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const GetCDNDnsResponse& from) {
    GetCDNDnsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCDNDnsResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.GetCDNDnsResponse";
  }
  protected:
  explicit GetCDNDnsResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseResponseFieldNumber = 1,
    kDnsInfoFieldNumber = 2,
    kSnsDnsInfoFieldNumber = 3,
    kAppDnsInfoFieldNumber = 4,
    kCdndnsRuleBufFieldNumber = 5,
    kFakeCdndnsRuleBufFieldNumber = 6,
    kFakeDnsInfoFieldNumber = 7,
    kDefaultConfigFieldNumber = 9,
    kDisasterConfigFieldNumber = 10,
    kGetCdnDnsIntervalMsFieldNumber = 8,
    kNextIpv6FieldNumber = 11,
  };
  // optional .wechat_proto.BaseResponse baseResponse = 1;
  bool has_baseresponse() const;
  void clear_baseresponse() ;
  const ::wechat_proto::BaseResponse& baseresponse() const;
  PROTOBUF_NODISCARD ::wechat_proto::BaseResponse* release_baseresponse();
  ::wechat_proto::BaseResponse* mutable_baseresponse();
  void set_allocated_baseresponse(::wechat_proto::BaseResponse* value);
  void unsafe_arena_set_allocated_baseresponse(::wechat_proto::BaseResponse* value);
  ::wechat_proto::BaseResponse* unsafe_arena_release_baseresponse();

  private:
  const ::wechat_proto::BaseResponse& _internal_baseresponse() const;
  ::wechat_proto::BaseResponse* _internal_mutable_baseresponse();

  public:
  // optional .wechat_proto.CDNDnsInfo dnsInfo = 2;
  bool has_dnsinfo() const;
  void clear_dnsinfo() ;
  const ::wechat_proto::CDNDnsInfo& dnsinfo() const;
  PROTOBUF_NODISCARD ::wechat_proto::CDNDnsInfo* release_dnsinfo();
  ::wechat_proto::CDNDnsInfo* mutable_dnsinfo();
  void set_allocated_dnsinfo(::wechat_proto::CDNDnsInfo* value);
  void unsafe_arena_set_allocated_dnsinfo(::wechat_proto::CDNDnsInfo* value);
  ::wechat_proto::CDNDnsInfo* unsafe_arena_release_dnsinfo();

  private:
  const ::wechat_proto::CDNDnsInfo& _internal_dnsinfo() const;
  ::wechat_proto::CDNDnsInfo* _internal_mutable_dnsinfo();

  public:
  // optional .wechat_proto.CDNDnsInfo snsDnsInfo = 3;
  bool has_snsdnsinfo() const;
  void clear_snsdnsinfo() ;
  const ::wechat_proto::CDNDnsInfo& snsdnsinfo() const;
  PROTOBUF_NODISCARD ::wechat_proto::CDNDnsInfo* release_snsdnsinfo();
  ::wechat_proto::CDNDnsInfo* mutable_snsdnsinfo();
  void set_allocated_snsdnsinfo(::wechat_proto::CDNDnsInfo* value);
  void unsafe_arena_set_allocated_snsdnsinfo(::wechat_proto::CDNDnsInfo* value);
  ::wechat_proto::CDNDnsInfo* unsafe_arena_release_snsdnsinfo();

  private:
  const ::wechat_proto::CDNDnsInfo& _internal_snsdnsinfo() const;
  ::wechat_proto::CDNDnsInfo* _internal_mutable_snsdnsinfo();

  public:
  // optional .wechat_proto.CDNDnsInfo appDnsInfo = 4;
  bool has_appdnsinfo() const;
  void clear_appdnsinfo() ;
  const ::wechat_proto::CDNDnsInfo& appdnsinfo() const;
  PROTOBUF_NODISCARD ::wechat_proto::CDNDnsInfo* release_appdnsinfo();
  ::wechat_proto::CDNDnsInfo* mutable_appdnsinfo();
  void set_allocated_appdnsinfo(::wechat_proto::CDNDnsInfo* value);
  void unsafe_arena_set_allocated_appdnsinfo(::wechat_proto::CDNDnsInfo* value);
  ::wechat_proto::CDNDnsInfo* unsafe_arena_release_appdnsinfo();

  private:
  const ::wechat_proto::CDNDnsInfo& _internal_appdnsinfo() const;
  ::wechat_proto::CDNDnsInfo* _internal_mutable_appdnsinfo();

  public:
  // optional .wechat_proto.SKBuiltinString_ cdndnsRuleBuf = 5;
  bool has_cdndnsrulebuf() const;
  void clear_cdndnsrulebuf() ;
  const ::wechat_proto::SKBuiltinString_& cdndnsrulebuf() const;
  PROTOBUF_NODISCARD ::wechat_proto::SKBuiltinString_* release_cdndnsrulebuf();
  ::wechat_proto::SKBuiltinString_* mutable_cdndnsrulebuf();
  void set_allocated_cdndnsrulebuf(::wechat_proto::SKBuiltinString_* value);
  void unsafe_arena_set_allocated_cdndnsrulebuf(::wechat_proto::SKBuiltinString_* value);
  ::wechat_proto::SKBuiltinString_* unsafe_arena_release_cdndnsrulebuf();

  private:
  const ::wechat_proto::SKBuiltinString_& _internal_cdndnsrulebuf() const;
  ::wechat_proto::SKBuiltinString_* _internal_mutable_cdndnsrulebuf();

  public:
  // optional .wechat_proto.SKBuiltinString_ fakeCdndnsRuleBuf = 6;
  bool has_fakecdndnsrulebuf() const;
  void clear_fakecdndnsrulebuf() ;
  const ::wechat_proto::SKBuiltinString_& fakecdndnsrulebuf() const;
  PROTOBUF_NODISCARD ::wechat_proto::SKBuiltinString_* release_fakecdndnsrulebuf();
  ::wechat_proto::SKBuiltinString_* mutable_fakecdndnsrulebuf();
  void set_allocated_fakecdndnsrulebuf(::wechat_proto::SKBuiltinString_* value);
  void unsafe_arena_set_allocated_fakecdndnsrulebuf(::wechat_proto::SKBuiltinString_* value);
  ::wechat_proto::SKBuiltinString_* unsafe_arena_release_fakecdndnsrulebuf();

  private:
  const ::wechat_proto::SKBuiltinString_& _internal_fakecdndnsrulebuf() const;
  ::wechat_proto::SKBuiltinString_* _internal_mutable_fakecdndnsrulebuf();

  public:
  // optional .wechat_proto.CDNDnsInfo fakeDnsInfo = 7;
  bool has_fakednsinfo() const;
  void clear_fakednsinfo() ;
  const ::wechat_proto::CDNDnsInfo& fakednsinfo() const;
  PROTOBUF_NODISCARD ::wechat_proto::CDNDnsInfo* release_fakednsinfo();
  ::wechat_proto::CDNDnsInfo* mutable_fakednsinfo();
  void set_allocated_fakednsinfo(::wechat_proto::CDNDnsInfo* value);
  void unsafe_arena_set_allocated_fakednsinfo(::wechat_proto::CDNDnsInfo* value);
  ::wechat_proto::CDNDnsInfo* unsafe_arena_release_fakednsinfo();

  private:
  const ::wechat_proto::CDNDnsInfo& _internal_fakednsinfo() const;
  ::wechat_proto::CDNDnsInfo* _internal_mutable_fakednsinfo();

  public:
  // optional .wechat_proto.CDNClientConfig defaultConfig = 9;
  bool has_defaultconfig() const;
  void clear_defaultconfig() ;
  const ::wechat_proto::CDNClientConfig& defaultconfig() const;
  PROTOBUF_NODISCARD ::wechat_proto::CDNClientConfig* release_defaultconfig();
  ::wechat_proto::CDNClientConfig* mutable_defaultconfig();
  void set_allocated_defaultconfig(::wechat_proto::CDNClientConfig* value);
  void unsafe_arena_set_allocated_defaultconfig(::wechat_proto::CDNClientConfig* value);
  ::wechat_proto::CDNClientConfig* unsafe_arena_release_defaultconfig();

  private:
  const ::wechat_proto::CDNClientConfig& _internal_defaultconfig() const;
  ::wechat_proto::CDNClientConfig* _internal_mutable_defaultconfig();

  public:
  // optional .wechat_proto.CDNClientConfig disasterConfig = 10;
  bool has_disasterconfig() const;
  void clear_disasterconfig() ;
  const ::wechat_proto::CDNClientConfig& disasterconfig() const;
  PROTOBUF_NODISCARD ::wechat_proto::CDNClientConfig* release_disasterconfig();
  ::wechat_proto::CDNClientConfig* mutable_disasterconfig();
  void set_allocated_disasterconfig(::wechat_proto::CDNClientConfig* value);
  void unsafe_arena_set_allocated_disasterconfig(::wechat_proto::CDNClientConfig* value);
  ::wechat_proto::CDNClientConfig* unsafe_arena_release_disasterconfig();

  private:
  const ::wechat_proto::CDNClientConfig& _internal_disasterconfig() const;
  ::wechat_proto::CDNClientConfig* _internal_mutable_disasterconfig();

  public:
  // optional int32 getCdnDnsIntervalMs = 8;
  bool has_getcdndnsintervalms() const;
  void clear_getcdndnsintervalms() ;
  ::int32_t getcdndnsintervalms() const;
  void set_getcdndnsintervalms(::int32_t value);

  private:
  ::int32_t _internal_getcdndnsintervalms() const;
  void _internal_set_getcdndnsintervalms(::int32_t value);

  public:
  // optional int32 nextIpv6 = 11;
  bool has_nextipv6() const;
  void clear_nextipv6() ;
  ::int32_t nextipv6() const;
  void set_nextipv6(::int32_t value);

  private:
  ::int32_t _internal_nextipv6() const;
  void _internal_set_nextipv6(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.GetCDNDnsResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<4, 11, 9, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::wechat_proto::BaseResponse* baseresponse_;
    ::wechat_proto::CDNDnsInfo* dnsinfo_;
    ::wechat_proto::CDNDnsInfo* snsdnsinfo_;
    ::wechat_proto::CDNDnsInfo* appdnsinfo_;
    ::wechat_proto::SKBuiltinString_* cdndnsrulebuf_;
    ::wechat_proto::SKBuiltinString_* fakecdndnsrulebuf_;
    ::wechat_proto::CDNDnsInfo* fakednsinfo_;
    ::wechat_proto::CDNClientConfig* defaultconfig_;
    ::wechat_proto::CDNClientConfig* disasterconfig_;
    ::int32_t getcdndnsintervalms_;
    ::int32_t nextipv6_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class CDNDnsInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.CDNDnsInfo) */ {
 public:
  inline CDNDnsInfo() : CDNDnsInfo(nullptr) {}
  ~CDNDnsInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CDNDnsInfo(::google::protobuf::internal::ConstantInitialized);

  CDNDnsInfo(const CDNDnsInfo& from);
  CDNDnsInfo(CDNDnsInfo&& from) noexcept
    : CDNDnsInfo() {
    *this = ::std::move(from);
  }

  inline CDNDnsInfo& operator=(const CDNDnsInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDNDnsInfo& operator=(CDNDnsInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDNDnsInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDNDnsInfo* internal_default_instance() {
    return reinterpret_cast<const CDNDnsInfo*>(
               &_CDNDnsInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CDNDnsInfo& a, CDNDnsInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CDNDnsInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDNDnsInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDNDnsInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDNDnsInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CDNDnsInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CDNDnsInfo& from) {
    CDNDnsInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDNDnsInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.CDNDnsInfo";
  }
  protected:
  explicit CDNDnsInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrontIplistFieldNumber = 6,
    kZoneIplistFieldNumber = 11,
    kFrontIpportListFieldNumber = 12,
    kZoneIpportListFieldNumber = 13,
    kZoneDomainFieldNumber = 7,
    kAuthKeyFieldNumber = 8,
    kNewAuthKeyFieldNumber = 17,
    kVerFieldNumber = 1,
    kUinFieldNumber = 2,
    kExpireTimeFieldNumber = 3,
    kFrontIdFieldNumber = 4,
    kFrontIpcountFieldNumber = 5,
    kZoneIdFieldNumber = 9,
    kZoneIpcountFieldNumber = 10,
    kFrontIpportCountFieldNumber = 14,
    kZoneIpportCountFieldNumber = 15,
    kFakeUinFieldNumber = 16,
  };
  // repeated .wechat_proto.SKBuiltinString frontIplist = 6;
  int frontiplist_size() const;
  private:
  int _internal_frontiplist_size() const;

  public:
  void clear_frontiplist() ;
  ::wechat_proto::SKBuiltinString* mutable_frontiplist(int index);
  ::google::protobuf::RepeatedPtrField< ::wechat_proto::SKBuiltinString >*
      mutable_frontiplist();
  private:
  const ::google::protobuf::RepeatedPtrField<::wechat_proto::SKBuiltinString>& _internal_frontiplist() const;
  ::google::protobuf::RepeatedPtrField<::wechat_proto::SKBuiltinString>* _internal_mutable_frontiplist();
  public:
  const ::wechat_proto::SKBuiltinString& frontiplist(int index) const;
  ::wechat_proto::SKBuiltinString* add_frontiplist();
  const ::google::protobuf::RepeatedPtrField< ::wechat_proto::SKBuiltinString >&
      frontiplist() const;
  // repeated .wechat_proto.SKBuiltinString zoneIplist = 11;
  int zoneiplist_size() const;
  private:
  int _internal_zoneiplist_size() const;

  public:
  void clear_zoneiplist() ;
  ::wechat_proto::SKBuiltinString* mutable_zoneiplist(int index);
  ::google::protobuf::RepeatedPtrField< ::wechat_proto::SKBuiltinString >*
      mutable_zoneiplist();
  private:
  const ::google::protobuf::RepeatedPtrField<::wechat_proto::SKBuiltinString>& _internal_zoneiplist() const;
  ::google::protobuf::RepeatedPtrField<::wechat_proto::SKBuiltinString>* _internal_mutable_zoneiplist();
  public:
  const ::wechat_proto::SKBuiltinString& zoneiplist(int index) const;
  ::wechat_proto::SKBuiltinString* add_zoneiplist();
  const ::google::protobuf::RepeatedPtrField< ::wechat_proto::SKBuiltinString >&
      zoneiplist() const;
  // repeated .wechat_proto.CDNDnsPortInfo frontIpportList = 12;
  int frontipportlist_size() const;
  private:
  int _internal_frontipportlist_size() const;

  public:
  void clear_frontipportlist() ;
  ::wechat_proto::CDNDnsPortInfo* mutable_frontipportlist(int index);
  ::google::protobuf::RepeatedPtrField< ::wechat_proto::CDNDnsPortInfo >*
      mutable_frontipportlist();
  private:
  const ::google::protobuf::RepeatedPtrField<::wechat_proto::CDNDnsPortInfo>& _internal_frontipportlist() const;
  ::google::protobuf::RepeatedPtrField<::wechat_proto::CDNDnsPortInfo>* _internal_mutable_frontipportlist();
  public:
  const ::wechat_proto::CDNDnsPortInfo& frontipportlist(int index) const;
  ::wechat_proto::CDNDnsPortInfo* add_frontipportlist();
  const ::google::protobuf::RepeatedPtrField< ::wechat_proto::CDNDnsPortInfo >&
      frontipportlist() const;
  // repeated .wechat_proto.CDNDnsPortInfo zoneIpportList = 13;
  int zoneipportlist_size() const;
  private:
  int _internal_zoneipportlist_size() const;

  public:
  void clear_zoneipportlist() ;
  ::wechat_proto::CDNDnsPortInfo* mutable_zoneipportlist(int index);
  ::google::protobuf::RepeatedPtrField< ::wechat_proto::CDNDnsPortInfo >*
      mutable_zoneipportlist();
  private:
  const ::google::protobuf::RepeatedPtrField<::wechat_proto::CDNDnsPortInfo>& _internal_zoneipportlist() const;
  ::google::protobuf::RepeatedPtrField<::wechat_proto::CDNDnsPortInfo>* _internal_mutable_zoneipportlist();
  public:
  const ::wechat_proto::CDNDnsPortInfo& zoneipportlist(int index) const;
  ::wechat_proto::CDNDnsPortInfo* add_zoneipportlist();
  const ::google::protobuf::RepeatedPtrField< ::wechat_proto::CDNDnsPortInfo >&
      zoneipportlist() const;
  // optional string zoneDomain = 7;
  bool has_zonedomain() const;
  void clear_zonedomain() ;
  const std::string& zonedomain() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zonedomain(Arg_&& arg, Args_... args);
  std::string* mutable_zonedomain();
  PROTOBUF_NODISCARD std::string* release_zonedomain();
  void set_allocated_zonedomain(std::string* ptr);

  private:
  const std::string& _internal_zonedomain() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zonedomain(
      const std::string& value);
  std::string* _internal_mutable_zonedomain();

  public:
  // optional .wechat_proto.SKBuiltinString_ authKey = 8;
  bool has_authkey() const;
  void clear_authkey() ;
  const ::wechat_proto::SKBuiltinString_& authkey() const;
  PROTOBUF_NODISCARD ::wechat_proto::SKBuiltinString_* release_authkey();
  ::wechat_proto::SKBuiltinString_* mutable_authkey();
  void set_allocated_authkey(::wechat_proto::SKBuiltinString_* value);
  void unsafe_arena_set_allocated_authkey(::wechat_proto::SKBuiltinString_* value);
  ::wechat_proto::SKBuiltinString_* unsafe_arena_release_authkey();

  private:
  const ::wechat_proto::SKBuiltinString_& _internal_authkey() const;
  ::wechat_proto::SKBuiltinString_* _internal_mutable_authkey();

  public:
  // optional .wechat_proto.SKBuiltinString_ newAuthKey = 17;
  bool has_newauthkey() const;
  void clear_newauthkey() ;
  const ::wechat_proto::SKBuiltinString_& newauthkey() const;
  PROTOBUF_NODISCARD ::wechat_proto::SKBuiltinString_* release_newauthkey();
  ::wechat_proto::SKBuiltinString_* mutable_newauthkey();
  void set_allocated_newauthkey(::wechat_proto::SKBuiltinString_* value);
  void unsafe_arena_set_allocated_newauthkey(::wechat_proto::SKBuiltinString_* value);
  ::wechat_proto::SKBuiltinString_* unsafe_arena_release_newauthkey();

  private:
  const ::wechat_proto::SKBuiltinString_& _internal_newauthkey() const;
  ::wechat_proto::SKBuiltinString_* _internal_mutable_newauthkey();

  public:
  // optional uint32 ver = 1;
  bool has_ver() const;
  void clear_ver() ;
  ::uint32_t ver() const;
  void set_ver(::uint32_t value);

  private:
  ::uint32_t _internal_ver() const;
  void _internal_set_ver(::uint32_t value);

  public:
  // optional uint32 uin = 2;
  bool has_uin() const;
  void clear_uin() ;
  ::uint32_t uin() const;
  void set_uin(::uint32_t value);

  private:
  ::uint32_t _internal_uin() const;
  void _internal_set_uin(::uint32_t value);

  public:
  // optional uint32 expireTime = 3;
  bool has_expiretime() const;
  void clear_expiretime() ;
  ::uint32_t expiretime() const;
  void set_expiretime(::uint32_t value);

  private:
  ::uint32_t _internal_expiretime() const;
  void _internal_set_expiretime(::uint32_t value);

  public:
  // optional int32 frontId = 4;
  bool has_frontid() const;
  void clear_frontid() ;
  ::int32_t frontid() const;
  void set_frontid(::int32_t value);

  private:
  ::int32_t _internal_frontid() const;
  void _internal_set_frontid(::int32_t value);

  public:
  // optional int32 frontIpcount = 5;
  bool has_frontipcount() const;
  void clear_frontipcount() ;
  ::int32_t frontipcount() const;
  void set_frontipcount(::int32_t value);

  private:
  ::int32_t _internal_frontipcount() const;
  void _internal_set_frontipcount(::int32_t value);

  public:
  // optional int32 zoneId = 9;
  bool has_zoneid() const;
  void clear_zoneid() ;
  ::int32_t zoneid() const;
  void set_zoneid(::int32_t value);

  private:
  ::int32_t _internal_zoneid() const;
  void _internal_set_zoneid(::int32_t value);

  public:
  // optional int32 zoneIpcount = 10;
  bool has_zoneipcount() const;
  void clear_zoneipcount() ;
  ::int32_t zoneipcount() const;
  void set_zoneipcount(::int32_t value);

  private:
  ::int32_t _internal_zoneipcount() const;
  void _internal_set_zoneipcount(::int32_t value);

  public:
  // optional int32 frontIpportCount = 14;
  bool has_frontipportcount() const;
  void clear_frontipportcount() ;
  ::int32_t frontipportcount() const;
  void set_frontipportcount(::int32_t value);

  private:
  ::int32_t _internal_frontipportcount() const;
  void _internal_set_frontipportcount(::int32_t value);

  public:
  // optional int32 zoneIpportCount = 15;
  bool has_zoneipportcount() const;
  void clear_zoneipportcount() ;
  ::int32_t zoneipportcount() const;
  void set_zoneipportcount(::int32_t value);

  private:
  ::int32_t _internal_zoneipportcount() const;
  void _internal_set_zoneipportcount(::int32_t value);

  public:
  // optional uint32 fakeUin = 16;
  bool has_fakeuin() const;
  void clear_fakeuin() ;
  ::uint32_t fakeuin() const;
  void set_fakeuin(::uint32_t value);

  private:
  ::uint32_t _internal_fakeuin() const;
  void _internal_set_fakeuin(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.CDNDnsInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<5, 17, 6, 58, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::wechat_proto::SKBuiltinString > frontiplist_;
    ::google::protobuf::RepeatedPtrField< ::wechat_proto::SKBuiltinString > zoneiplist_;
    ::google::protobuf::RepeatedPtrField< ::wechat_proto::CDNDnsPortInfo > frontipportlist_;
    ::google::protobuf::RepeatedPtrField< ::wechat_proto::CDNDnsPortInfo > zoneipportlist_;
    ::google::protobuf::internal::ArenaStringPtr zonedomain_;
    ::wechat_proto::SKBuiltinString_* authkey_;
    ::wechat_proto::SKBuiltinString_* newauthkey_;
    ::uint32_t ver_;
    ::uint32_t uin_;
    ::uint32_t expiretime_;
    ::int32_t frontid_;
    ::int32_t frontipcount_;
    ::int32_t zoneid_;
    ::int32_t zoneipcount_;
    ::int32_t frontipportcount_;
    ::int32_t zoneipportcount_;
    ::uint32_t fakeuin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class CDNClientConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.CDNClientConfig) */ {
 public:
  inline CDNClientConfig() : CDNClientConfig(nullptr) {}
  ~CDNClientConfig() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CDNClientConfig(::google::protobuf::internal::ConstantInitialized);

  CDNClientConfig(const CDNClientConfig& from);
  CDNClientConfig(CDNClientConfig&& from) noexcept
    : CDNClientConfig() {
    *this = ::std::move(from);
  }

  inline CDNClientConfig& operator=(const CDNClientConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDNClientConfig& operator=(CDNClientConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDNClientConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDNClientConfig* internal_default_instance() {
    return reinterpret_cast<const CDNClientConfig*>(
               &_CDNClientConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CDNClientConfig& a, CDNClientConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(CDNClientConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDNClientConfig* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDNClientConfig* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDNClientConfig>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CDNClientConfig& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CDNClientConfig& from) {
    CDNClientConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDNClientConfig* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.CDNClientConfig";
  }
  protected:
  explicit CDNClientConfig(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kC2CshowErrorDelayMsFieldNumber = 1,
    kSnsshowErrorDelayMsFieldNumber = 2,
    kC2CretryIntervalFieldNumber = 3,
    kSnsretryIntervalFieldNumber = 4,
    kC2CrwtimeoutFieldNumber = 5,
    kSnsrwtimeoutFieldNumber = 6,
  };
  // optional int32 c2CshowErrorDelayMs = 1;
  bool has_c2cshowerrordelayms() const;
  void clear_c2cshowerrordelayms() ;
  ::int32_t c2cshowerrordelayms() const;
  void set_c2cshowerrordelayms(::int32_t value);

  private:
  ::int32_t _internal_c2cshowerrordelayms() const;
  void _internal_set_c2cshowerrordelayms(::int32_t value);

  public:
  // optional int32 snsshowErrorDelayMs = 2;
  bool has_snsshowerrordelayms() const;
  void clear_snsshowerrordelayms() ;
  ::int32_t snsshowerrordelayms() const;
  void set_snsshowerrordelayms(::int32_t value);

  private:
  ::int32_t _internal_snsshowerrordelayms() const;
  void _internal_set_snsshowerrordelayms(::int32_t value);

  public:
  // optional int32 c2CretryInterval = 3;
  bool has_c2cretryinterval() const;
  void clear_c2cretryinterval() ;
  ::int32_t c2cretryinterval() const;
  void set_c2cretryinterval(::int32_t value);

  private:
  ::int32_t _internal_c2cretryinterval() const;
  void _internal_set_c2cretryinterval(::int32_t value);

  public:
  // optional int32 snsretryInterval = 4;
  bool has_snsretryinterval() const;
  void clear_snsretryinterval() ;
  ::int32_t snsretryinterval() const;
  void set_snsretryinterval(::int32_t value);

  private:
  ::int32_t _internal_snsretryinterval() const;
  void _internal_set_snsretryinterval(::int32_t value);

  public:
  // optional int32 c2Crwtimeout = 5;
  bool has_c2crwtimeout() const;
  void clear_c2crwtimeout() ;
  ::int32_t c2crwtimeout() const;
  void set_c2crwtimeout(::int32_t value);

  private:
  ::int32_t _internal_c2crwtimeout() const;
  void _internal_set_c2crwtimeout(::int32_t value);

  public:
  // optional int32 snsrwtimeout = 6;
  bool has_snsrwtimeout() const;
  void clear_snsrwtimeout() ;
  ::int32_t snsrwtimeout() const;
  void set_snsrwtimeout(::int32_t value);

  private:
  ::int32_t _internal_snsrwtimeout() const;
  void _internal_set_snsrwtimeout(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.CDNClientConfig)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 6, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::int32_t c2cshowerrordelayms_;
    ::int32_t snsshowerrordelayms_;
    ::int32_t c2cretryinterval_;
    ::int32_t snsretryinterval_;
    ::int32_t c2crwtimeout_;
    ::int32_t snsrwtimeout_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class CDNDnsPortInfo final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.CDNDnsPortInfo) */ {
 public:
  inline CDNDnsPortInfo() : CDNDnsPortInfo(nullptr) {}
  ~CDNDnsPortInfo() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CDNDnsPortInfo(::google::protobuf::internal::ConstantInitialized);

  CDNDnsPortInfo(const CDNDnsPortInfo& from);
  CDNDnsPortInfo(CDNDnsPortInfo&& from) noexcept
    : CDNDnsPortInfo() {
    *this = ::std::move(from);
  }

  inline CDNDnsPortInfo& operator=(const CDNDnsPortInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CDNDnsPortInfo& operator=(CDNDnsPortInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CDNDnsPortInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CDNDnsPortInfo* internal_default_instance() {
    return reinterpret_cast<const CDNDnsPortInfo*>(
               &_CDNDnsPortInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CDNDnsPortInfo& a, CDNDnsPortInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CDNDnsPortInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CDNDnsPortInfo* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CDNDnsPortInfo* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CDNDnsPortInfo>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CDNDnsPortInfo& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CDNDnsPortInfo& from) {
    CDNDnsPortInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CDNDnsPortInfo* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.CDNDnsPortInfo";
  }
  protected:
  explicit CDNDnsPortInfo(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPortListFieldNumber = 2,
    kPortCountFieldNumber = 1,
  };
  // repeated uint32 portList = 2;
  int portlist_size() const;
  private:
  int _internal_portlist_size() const;

  public:
  void clear_portlist() ;
  ::uint32_t portlist(int index) const;
  void set_portlist(int index, ::uint32_t value);
  void add_portlist(::uint32_t value);
  const ::google::protobuf::RepeatedField<::uint32_t>& portlist() const;
  ::google::protobuf::RepeatedField<::uint32_t>* mutable_portlist();

  private:
  const ::google::protobuf::RepeatedField<::uint32_t>& _internal_portlist() const;
  ::google::protobuf::RepeatedField<::uint32_t>* _internal_mutable_portlist();

  public:
  // optional uint32 portCount = 1;
  bool has_portcount() const;
  void clear_portcount() ;
  ::uint32_t portcount() const;
  void set_portcount(::uint32_t value);

  private:
  ::uint32_t _internal_portcount() const;
  void _internal_set_portcount(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.CDNDnsPortInfo)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedField<::uint32_t> portlist_;
    ::uint32_t portcount_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class DATA final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.DATA) */ {
 public:
  inline DATA() : DATA(nullptr) {}
  ~DATA() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR DATA(::google::protobuf::internal::ConstantInitialized);

  DATA(const DATA& from);
  DATA(DATA&& from) noexcept
    : DATA() {
    *this = ::std::move(from);
  }

  inline DATA& operator=(const DATA& from) {
    CopyFrom(from);
    return *this;
  }
  inline DATA& operator=(DATA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DATA& default_instance() {
    return *internal_default_instance();
  }
  static inline const DATA* internal_default_instance() {
    return reinterpret_cast<const DATA*>(
               &_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DATA& a, DATA& b) {
    a.Swap(&b);
  }
  inline void Swap(DATA* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DATA* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DATA* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DATA>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const DATA& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const DATA& from) {
    DATA::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DATA* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.DATA";
  }
  protected:
  explicit DATA(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kLenFieldNumber = 1,
  };
  // optional bytes data = 2;
  bool has_data() const;
  void clear_data() ;
  const std::string& data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_data(Arg_&& arg, Args_... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* ptr);

  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(
      const std::string& value);
  std::string* _internal_mutable_data();

  public:
  // optional uint32 len = 1;
  bool has_len() const;
  void clear_len() ;
  ::uint32_t len() const;
  void set_len(::uint32_t value);

  private:
  ::uint32_t _internal_len() const;
  void _internal_set_len(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.DATA)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 0, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr data_;
    ::uint32_t len_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class CmdItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.CmdItem) */ {
 public:
  inline CmdItem() : CmdItem(nullptr) {}
  ~CmdItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CmdItem(::google::protobuf::internal::ConstantInitialized);

  CmdItem(const CmdItem& from);
  CmdItem(CmdItem&& from) noexcept
    : CmdItem() {
    *this = ::std::move(from);
  }

  inline CmdItem& operator=(const CmdItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdItem& operator=(CmdItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CmdItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const CmdItem* internal_default_instance() {
    return reinterpret_cast<const CmdItem*>(
               &_CmdItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(CmdItem& a, CmdItem& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CmdItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CmdItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CmdItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CmdItem& from) {
    CmdItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.CmdItem";
  }
  protected:
  explicit CmdItem(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdBufFieldNumber = 2,
    kCmdIdFieldNumber = 1,
  };
  // optional .wechat_proto.DATA cmd_buf = 2;
  bool has_cmd_buf() const;
  void clear_cmd_buf() ;
  const ::wechat_proto::DATA& cmd_buf() const;
  PROTOBUF_NODISCARD ::wechat_proto::DATA* release_cmd_buf();
  ::wechat_proto::DATA* mutable_cmd_buf();
  void set_allocated_cmd_buf(::wechat_proto::DATA* value);
  void unsafe_arena_set_allocated_cmd_buf(::wechat_proto::DATA* value);
  ::wechat_proto::DATA* unsafe_arena_release_cmd_buf();

  private:
  const ::wechat_proto::DATA& _internal_cmd_buf() const;
  ::wechat_proto::DATA* _internal_mutable_cmd_buf();

  public:
  // optional uint32 cmd_id = 1;
  bool has_cmd_id() const;
  void clear_cmd_id() ;
  ::uint32_t cmd_id() const;
  void set_cmd_id(::uint32_t value);

  private:
  ::uint32_t _internal_cmd_id() const;
  void _internal_set_cmd_id(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.CmdItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::wechat_proto::DATA* cmd_buf_;
    ::uint32_t cmd_id_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class CmdList final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.CmdList) */ {
 public:
  inline CmdList() : CmdList(nullptr) {}
  ~CmdList() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR CmdList(::google::protobuf::internal::ConstantInitialized);

  CmdList(const CmdList& from);
  CmdList(CmdList&& from) noexcept
    : CmdList() {
    *this = ::std::move(from);
  }

  inline CmdList& operator=(const CmdList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CmdList& operator=(CmdList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CmdList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CmdList* internal_default_instance() {
    return reinterpret_cast<const CmdList*>(
               &_CmdList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(CmdList& a, CmdList& b) {
    a.Swap(&b);
  }
  inline void Swap(CmdList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CmdList* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CmdList* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CmdList>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CmdList& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const CmdList& from) {
    CmdList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CmdList* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.CmdList";
  }
  protected:
  explicit CmdList(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemListFieldNumber = 2,
    kCountFieldNumber = 1,
  };
  // repeated .wechat_proto.CmdItem item_list = 2;
  int item_list_size() const;
  private:
  int _internal_item_list_size() const;

  public:
  void clear_item_list() ;
  ::wechat_proto::CmdItem* mutable_item_list(int index);
  ::google::protobuf::RepeatedPtrField< ::wechat_proto::CmdItem >*
      mutable_item_list();
  private:
  const ::google::protobuf::RepeatedPtrField<::wechat_proto::CmdItem>& _internal_item_list() const;
  ::google::protobuf::RepeatedPtrField<::wechat_proto::CmdItem>* _internal_mutable_item_list();
  public:
  const ::wechat_proto::CmdItem& item_list(int index) const;
  ::wechat_proto::CmdItem* add_item_list();
  const ::google::protobuf::RepeatedPtrField< ::wechat_proto::CmdItem >&
      item_list() const;
  // optional uint32 count = 1;
  bool has_count() const;
  void clear_count() ;
  ::uint32_t count() const;
  void set_count(::uint32_t value);

  private:
  ::uint32_t _internal_count() const;
  void _internal_set_count(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.CmdList)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<1, 2, 1, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::wechat_proto::CmdItem > item_list_;
    ::uint32_t count_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class NewSyncResponseMSGItem final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.NewSyncResponseMSGItem) */ {
 public:
  inline NewSyncResponseMSGItem() : NewSyncResponseMSGItem(nullptr) {}
  ~NewSyncResponseMSGItem() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NewSyncResponseMSGItem(::google::protobuf::internal::ConstantInitialized);

  NewSyncResponseMSGItem(const NewSyncResponseMSGItem& from);
  NewSyncResponseMSGItem(NewSyncResponseMSGItem&& from) noexcept
    : NewSyncResponseMSGItem() {
    *this = ::std::move(from);
  }

  inline NewSyncResponseMSGItem& operator=(const NewSyncResponseMSGItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewSyncResponseMSGItem& operator=(NewSyncResponseMSGItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewSyncResponseMSGItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewSyncResponseMSGItem* internal_default_instance() {
    return reinterpret_cast<const NewSyncResponseMSGItem*>(
               &_NewSyncResponseMSGItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(NewSyncResponseMSGItem& a, NewSyncResponseMSGItem& b) {
    a.Swap(&b);
  }
  inline void Swap(NewSyncResponseMSGItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewSyncResponseMSGItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewSyncResponseMSGItem* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewSyncResponseMSGItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewSyncResponseMSGItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NewSyncResponseMSGItem& from) {
    NewSyncResponseMSGItem::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewSyncResponseMSGItem* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.NewSyncResponseMSGItem";
  }
  protected:
  explicit NewSyncResponseMSGItem(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFromWxidFieldNumber = 2,
    kToWxidFieldNumber = 3,
    kMsgContentFieldNumber = 5,
    kMgsIdFieldNumber = 1,
    kUnkonwFieldNumber = 4,
  };
  // optional .wechat_proto.SKBuiltinString from_wxid = 2;
  bool has_from_wxid() const;
  void clear_from_wxid() ;
  const ::wechat_proto::SKBuiltinString& from_wxid() const;
  PROTOBUF_NODISCARD ::wechat_proto::SKBuiltinString* release_from_wxid();
  ::wechat_proto::SKBuiltinString* mutable_from_wxid();
  void set_allocated_from_wxid(::wechat_proto::SKBuiltinString* value);
  void unsafe_arena_set_allocated_from_wxid(::wechat_proto::SKBuiltinString* value);
  ::wechat_proto::SKBuiltinString* unsafe_arena_release_from_wxid();

  private:
  const ::wechat_proto::SKBuiltinString& _internal_from_wxid() const;
  ::wechat_proto::SKBuiltinString* _internal_mutable_from_wxid();

  public:
  // optional .wechat_proto.SKBuiltinString to_wxid = 3;
  bool has_to_wxid() const;
  void clear_to_wxid() ;
  const ::wechat_proto::SKBuiltinString& to_wxid() const;
  PROTOBUF_NODISCARD ::wechat_proto::SKBuiltinString* release_to_wxid();
  ::wechat_proto::SKBuiltinString* mutable_to_wxid();
  void set_allocated_to_wxid(::wechat_proto::SKBuiltinString* value);
  void unsafe_arena_set_allocated_to_wxid(::wechat_proto::SKBuiltinString* value);
  ::wechat_proto::SKBuiltinString* unsafe_arena_release_to_wxid();

  private:
  const ::wechat_proto::SKBuiltinString& _internal_to_wxid() const;
  ::wechat_proto::SKBuiltinString* _internal_mutable_to_wxid();

  public:
  // optional .wechat_proto.SKBuiltinString msg_content = 5;
  bool has_msg_content() const;
  void clear_msg_content() ;
  const ::wechat_proto::SKBuiltinString& msg_content() const;
  PROTOBUF_NODISCARD ::wechat_proto::SKBuiltinString* release_msg_content();
  ::wechat_proto::SKBuiltinString* mutable_msg_content();
  void set_allocated_msg_content(::wechat_proto::SKBuiltinString* value);
  void unsafe_arena_set_allocated_msg_content(::wechat_proto::SKBuiltinString* value);
  ::wechat_proto::SKBuiltinString* unsafe_arena_release_msg_content();

  private:
  const ::wechat_proto::SKBuiltinString& _internal_msg_content() const;
  ::wechat_proto::SKBuiltinString* _internal_mutable_msg_content();

  public:
  // optional uint32 mgs_id = 1;
  bool has_mgs_id() const;
  void clear_mgs_id() ;
  ::uint32_t mgs_id() const;
  void set_mgs_id(::uint32_t value);

  private:
  ::uint32_t _internal_mgs_id() const;
  void _internal_set_mgs_id(::uint32_t value);

  public:
  // optional uint32 unkonw = 4;
  bool has_unkonw() const;
  void clear_unkonw() ;
  ::uint32_t unkonw() const;
  void set_unkonw(::uint32_t value);

  private:
  ::uint32_t _internal_unkonw() const;
  void _internal_set_unkonw(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.NewSyncResponseMSGItem)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 5, 3, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::wechat_proto::SKBuiltinString* from_wxid_;
    ::wechat_proto::SKBuiltinString* to_wxid_;
    ::wechat_proto::SKBuiltinString* msg_content_;
    ::uint32_t mgs_id_;
    ::uint32_t unkonw_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};// -------------------------------------------------------------------

class NewSyncResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:wechat_proto.NewSyncResponse) */ {
 public:
  inline NewSyncResponse() : NewSyncResponse(nullptr) {}
  ~NewSyncResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR NewSyncResponse(::google::protobuf::internal::ConstantInitialized);

  NewSyncResponse(const NewSyncResponse& from);
  NewSyncResponse(NewSyncResponse&& from) noexcept
    : NewSyncResponse() {
    *this = ::std::move(from);
  }

  inline NewSyncResponse& operator=(const NewSyncResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline NewSyncResponse& operator=(NewSyncResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NewSyncResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const NewSyncResponse* internal_default_instance() {
    return reinterpret_cast<const NewSyncResponse*>(
               &_NewSyncResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(NewSyncResponse& a, NewSyncResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(NewSyncResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NewSyncResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NewSyncResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NewSyncResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const NewSyncResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const NewSyncResponse& from) {
    NewSyncResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NewSyncResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "wechat_proto.NewSyncResponse";
  }
  protected:
  explicit NewSyncResponse(::google::protobuf::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdListFieldNumber = 2,
    kKeyBufFieldNumber = 4,
    kRetFieldNumber = 1,
    kContinueFlagFieldNumber = 3,
    kStatusFieldNumber = 5,
    kOnlineVersionFieldNumber = 6,
    kSvrTimeFieldNumber = 7,
  };
  // optional .wechat_proto.CmdList cmdList = 2;
  bool has_cmdlist() const;
  void clear_cmdlist() ;
  const ::wechat_proto::CmdList& cmdlist() const;
  PROTOBUF_NODISCARD ::wechat_proto::CmdList* release_cmdlist();
  ::wechat_proto::CmdList* mutable_cmdlist();
  void set_allocated_cmdlist(::wechat_proto::CmdList* value);
  void unsafe_arena_set_allocated_cmdlist(::wechat_proto::CmdList* value);
  ::wechat_proto::CmdList* unsafe_arena_release_cmdlist();

  private:
  const ::wechat_proto::CmdList& _internal_cmdlist() const;
  ::wechat_proto::CmdList* _internal_mutable_cmdlist();

  public:
  // optional .wechat_proto.SKBuiltinString_ keyBuf = 4;
  bool has_keybuf() const;
  void clear_keybuf() ;
  const ::wechat_proto::SKBuiltinString_& keybuf() const;
  PROTOBUF_NODISCARD ::wechat_proto::SKBuiltinString_* release_keybuf();
  ::wechat_proto::SKBuiltinString_* mutable_keybuf();
  void set_allocated_keybuf(::wechat_proto::SKBuiltinString_* value);
  void unsafe_arena_set_allocated_keybuf(::wechat_proto::SKBuiltinString_* value);
  ::wechat_proto::SKBuiltinString_* unsafe_arena_release_keybuf();

  private:
  const ::wechat_proto::SKBuiltinString_& _internal_keybuf() const;
  ::wechat_proto::SKBuiltinString_* _internal_mutable_keybuf();

  public:
  // optional int32 ret = 1;
  bool has_ret() const;
  void clear_ret() ;
  ::int32_t ret() const;
  void set_ret(::int32_t value);

  private:
  ::int32_t _internal_ret() const;
  void _internal_set_ret(::int32_t value);

  public:
  // optional uint32 continueFlag = 3;
  bool has_continueflag() const;
  void clear_continueflag() ;
  ::uint32_t continueflag() const;
  void set_continueflag(::uint32_t value);

  private:
  ::uint32_t _internal_continueflag() const;
  void _internal_set_continueflag(::uint32_t value);

  public:
  // optional uint32 status = 5;
  bool has_status() const;
  void clear_status() ;
  ::uint32_t status() const;
  void set_status(::uint32_t value);

  private:
  ::uint32_t _internal_status() const;
  void _internal_set_status(::uint32_t value);

  public:
  // optional uint32 onlineVersion = 6;
  bool has_onlineversion() const;
  void clear_onlineversion() ;
  ::uint32_t onlineversion() const;
  void set_onlineversion(::uint32_t value);

  private:
  ::uint32_t _internal_onlineversion() const;
  void _internal_set_onlineversion(::uint32_t value);

  public:
  // optional uint32 svrTime = 7;
  bool has_svrtime() const;
  void clear_svrtime() ;
  ::uint32_t svrtime() const;
  void set_svrtime(::uint32_t value);

  private:
  ::uint32_t _internal_svrtime() const;
  void _internal_set_svrtime(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:wechat_proto.NewSyncResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<3, 7, 2, 0, 2> _table_;
  template <typename T> friend class ::google::protobuf::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::wechat_proto::CmdList* cmdlist_;
    ::wechat_proto::SKBuiltinString_* keybuf_;
    ::int32_t ret_;
    ::uint32_t continueflag_;
    ::uint32_t status_;
    ::uint32_t onlineversion_;
    ::uint32_t svrtime_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_wechat_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// SKBuiltinString

// optional string str = 1;
inline bool SKBuiltinString::has_str() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SKBuiltinString::clear_str() {
  _impl_.str_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SKBuiltinString::str() const {
  // @@protoc_insertion_point(field_get:wechat_proto.SKBuiltinString.str)
  return _internal_str();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SKBuiltinString::set_str(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.str_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wechat_proto.SKBuiltinString.str)
}
inline std::string* SKBuiltinString::mutable_str() {
  std::string* _s = _internal_mutable_str();
  // @@protoc_insertion_point(field_mutable:wechat_proto.SKBuiltinString.str)
  return _s;
}
inline const std::string& SKBuiltinString::_internal_str() const {
  return _impl_.str_.Get();
}
inline void SKBuiltinString::_internal_set_str(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.str_.Set(value, GetArenaForAllocation());
}
inline std::string* SKBuiltinString::_internal_mutable_str() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.str_.Mutable( GetArenaForAllocation());
}
inline std::string* SKBuiltinString::release_str() {
  // @@protoc_insertion_point(field_release:wechat_proto.SKBuiltinString.str)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.str_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SKBuiltinString::set_allocated_str(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.str_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.str_.IsDefault()) {
          _impl_.str_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.SKBuiltinString.str)
}

// -------------------------------------------------------------------

// SKBuiltinString_

// optional uint32 len = 1;
inline bool SKBuiltinString_::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void SKBuiltinString_::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t SKBuiltinString_::len() const {
  // @@protoc_insertion_point(field_get:wechat_proto.SKBuiltinString_.len)
  return _internal_len();
}
inline void SKBuiltinString_::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:wechat_proto.SKBuiltinString_.len)
}
inline ::uint32_t SKBuiltinString_::_internal_len() const {
  return _impl_.len_;
}
inline void SKBuiltinString_::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.len_ = value;
}

// optional bytes buffer = 2;
inline bool SKBuiltinString_::has_buffer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SKBuiltinString_::clear_buffer() {
  _impl_.buffer_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& SKBuiltinString_::buffer() const {
  // @@protoc_insertion_point(field_get:wechat_proto.SKBuiltinString_.buffer)
  return _internal_buffer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SKBuiltinString_::set_buffer(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.buffer_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wechat_proto.SKBuiltinString_.buffer)
}
inline std::string* SKBuiltinString_::mutable_buffer() {
  std::string* _s = _internal_mutable_buffer();
  // @@protoc_insertion_point(field_mutable:wechat_proto.SKBuiltinString_.buffer)
  return _s;
}
inline const std::string& SKBuiltinString_::_internal_buffer() const {
  return _impl_.buffer_.Get();
}
inline void SKBuiltinString_::_internal_set_buffer(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.buffer_.Set(value, GetArenaForAllocation());
}
inline std::string* SKBuiltinString_::_internal_mutable_buffer() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.buffer_.Mutable( GetArenaForAllocation());
}
inline std::string* SKBuiltinString_::release_buffer() {
  // @@protoc_insertion_point(field_release:wechat_proto.SKBuiltinString_.buffer)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.buffer_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.buffer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void SKBuiltinString_::set_allocated_buffer(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.buffer_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.buffer_.IsDefault()) {
          _impl_.buffer_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.SKBuiltinString_.buffer)
}

// -------------------------------------------------------------------

// BaseRequest

// optional bytes session_key = 1;
inline bool BaseRequest::has_session_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void BaseRequest::clear_session_key() {
  _impl_.session_key_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BaseRequest::session_key() const {
  // @@protoc_insertion_point(field_get:wechat_proto.BaseRequest.session_key)
  return _internal_session_key();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BaseRequest::set_session_key(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_key_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wechat_proto.BaseRequest.session_key)
}
inline std::string* BaseRequest::mutable_session_key() {
  std::string* _s = _internal_mutable_session_key();
  // @@protoc_insertion_point(field_mutable:wechat_proto.BaseRequest.session_key)
  return _s;
}
inline const std::string& BaseRequest::_internal_session_key() const {
  return _impl_.session_key_.Get();
}
inline void BaseRequest::_internal_set_session_key(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.session_key_.Set(value, GetArenaForAllocation());
}
inline std::string* BaseRequest::_internal_mutable_session_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.session_key_.Mutable( GetArenaForAllocation());
}
inline std::string* BaseRequest::release_session_key() {
  // @@protoc_insertion_point(field_release:wechat_proto.BaseRequest.session_key)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.session_key_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BaseRequest::set_allocated_session_key(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.session_key_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.session_key_.IsDefault()) {
          _impl_.session_key_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.BaseRequest.session_key)
}

// optional uint32 uin = 2;
inline bool BaseRequest::has_uin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void BaseRequest::clear_uin() {
  _impl_.uin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t BaseRequest::uin() const {
  // @@protoc_insertion_point(field_get:wechat_proto.BaseRequest.uin)
  return _internal_uin();
}
inline void BaseRequest::set_uin(::uint32_t value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:wechat_proto.BaseRequest.uin)
}
inline ::uint32_t BaseRequest::_internal_uin() const {
  return _impl_.uin_;
}
inline void BaseRequest::_internal_set_uin(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.uin_ = value;
}

// optional bytes device_id = 3;
inline bool BaseRequest::has_device_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BaseRequest::clear_device_id() {
  _impl_.device_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BaseRequest::device_id() const {
  // @@protoc_insertion_point(field_get:wechat_proto.BaseRequest.device_id)
  return _internal_device_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BaseRequest::set_device_id(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.device_id_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wechat_proto.BaseRequest.device_id)
}
inline std::string* BaseRequest::mutable_device_id() {
  std::string* _s = _internal_mutable_device_id();
  // @@protoc_insertion_point(field_mutable:wechat_proto.BaseRequest.device_id)
  return _s;
}
inline const std::string& BaseRequest::_internal_device_id() const {
  return _impl_.device_id_.Get();
}
inline void BaseRequest::_internal_set_device_id(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.device_id_.Set(value, GetArenaForAllocation());
}
inline std::string* BaseRequest::_internal_mutable_device_id() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.device_id_.Mutable( GetArenaForAllocation());
}
inline std::string* BaseRequest::release_device_id() {
  // @@protoc_insertion_point(field_release:wechat_proto.BaseRequest.device_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.device_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BaseRequest::set_allocated_device_id(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.device_id_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.device_id_.IsDefault()) {
          _impl_.device_id_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.BaseRequest.device_id)
}

// optional uint32 client_version = 4;
inline bool BaseRequest::has_client_version() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void BaseRequest::clear_client_version() {
  _impl_.client_version_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t BaseRequest::client_version() const {
  // @@protoc_insertion_point(field_get:wechat_proto.BaseRequest.client_version)
  return _internal_client_version();
}
inline void BaseRequest::set_client_version(::uint32_t value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:wechat_proto.BaseRequest.client_version)
}
inline ::uint32_t BaseRequest::_internal_client_version() const {
  return _impl_.client_version_;
}
inline void BaseRequest::_internal_set_client_version(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.client_version_ = value;
}

// optional string os_type = 5;
inline bool BaseRequest::has_os_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void BaseRequest::clear_os_type() {
  _impl_.os_type_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BaseRequest::os_type() const {
  // @@protoc_insertion_point(field_get:wechat_proto.BaseRequest.os_type)
  return _internal_os_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void BaseRequest::set_os_type(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.os_type_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wechat_proto.BaseRequest.os_type)
}
inline std::string* BaseRequest::mutable_os_type() {
  std::string* _s = _internal_mutable_os_type();
  // @@protoc_insertion_point(field_mutable:wechat_proto.BaseRequest.os_type)
  return _s;
}
inline const std::string& BaseRequest::_internal_os_type() const {
  return _impl_.os_type_.Get();
}
inline void BaseRequest::_internal_set_os_type(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.os_type_.Set(value, GetArenaForAllocation());
}
inline std::string* BaseRequest::_internal_mutable_os_type() {
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.os_type_.Mutable( GetArenaForAllocation());
}
inline std::string* BaseRequest::release_os_type() {
  // @@protoc_insertion_point(field_release:wechat_proto.BaseRequest.os_type)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.os_type_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.os_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void BaseRequest::set_allocated_os_type(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.os_type_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.os_type_.IsDefault()) {
          _impl_.os_type_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.BaseRequest.os_type)
}

// optional uint32 scene = 6;
inline bool BaseRequest::has_scene() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void BaseRequest::clear_scene() {
  _impl_.scene_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t BaseRequest::scene() const {
  // @@protoc_insertion_point(field_get:wechat_proto.BaseRequest.scene)
  return _internal_scene();
}
inline void BaseRequest::set_scene(::uint32_t value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:wechat_proto.BaseRequest.scene)
}
inline ::uint32_t BaseRequest::_internal_scene() const {
  return _impl_.scene_;
}
inline void BaseRequest::_internal_set_scene(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.scene_ = value;
}

// -------------------------------------------------------------------

// GetCDNDnsRequest

// optional .wechat_proto.BaseRequest baseRequest = 1;
inline bool GetCDNDnsRequest::has_baserequest() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.baserequest_ != nullptr);
  return value;
}
inline void GetCDNDnsRequest::clear_baserequest() {
  if (_impl_.baserequest_ != nullptr) _impl_.baserequest_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::wechat_proto::BaseRequest& GetCDNDnsRequest::_internal_baserequest() const {
  const ::wechat_proto::BaseRequest* p = _impl_.baserequest_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::BaseRequest&>(::wechat_proto::_BaseRequest_default_instance_);
}
inline const ::wechat_proto::BaseRequest& GetCDNDnsRequest::baserequest() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsRequest.baseRequest)
  return _internal_baserequest();
}
inline void GetCDNDnsRequest::unsafe_arena_set_allocated_baserequest(::wechat_proto::BaseRequest* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.baserequest_);
  }
  _impl_.baserequest_ = reinterpret_cast<::wechat_proto::BaseRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.GetCDNDnsRequest.baseRequest)
}
inline ::wechat_proto::BaseRequest* GetCDNDnsRequest::release_baserequest() {

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::wechat_proto::BaseRequest* released = _impl_.baserequest_;
  _impl_.baserequest_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::BaseRequest* GetCDNDnsRequest::unsafe_arena_release_baserequest() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsRequest.baseRequest)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::wechat_proto::BaseRequest* temp = _impl_.baserequest_;
  _impl_.baserequest_ = nullptr;
  return temp;
}
inline ::wechat_proto::BaseRequest* GetCDNDnsRequest::_internal_mutable_baserequest() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.baserequest_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::BaseRequest>(GetArenaForAllocation());
    _impl_.baserequest_ = reinterpret_cast<::wechat_proto::BaseRequest*>(p);
  }
  return _impl_.baserequest_;
}
inline ::wechat_proto::BaseRequest* GetCDNDnsRequest::mutable_baserequest() {
  ::wechat_proto::BaseRequest* _msg = _internal_mutable_baserequest();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsRequest.baseRequest)
  return _msg;
}
inline void GetCDNDnsRequest::set_allocated_baserequest(::wechat_proto::BaseRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::BaseRequest*>(_impl_.baserequest_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::BaseRequest*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.baserequest_ = reinterpret_cast<::wechat_proto::BaseRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsRequest.baseRequest)
}

// optional string clientIp = 2;
inline bool GetCDNDnsRequest::has_clientip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetCDNDnsRequest::clear_clientip() {
  _impl_.clientip_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetCDNDnsRequest::clientip() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsRequest.clientIp)
  return _internal_clientip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCDNDnsRequest::set_clientip(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.clientip_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wechat_proto.GetCDNDnsRequest.clientIp)
}
inline std::string* GetCDNDnsRequest::mutable_clientip() {
  std::string* _s = _internal_mutable_clientip();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsRequest.clientIp)
  return _s;
}
inline const std::string& GetCDNDnsRequest::_internal_clientip() const {
  return _impl_.clientip_.Get();
}
inline void GetCDNDnsRequest::_internal_set_clientip(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.clientip_.Set(value, GetArenaForAllocation());
}
inline std::string* GetCDNDnsRequest::_internal_mutable_clientip() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.clientip_.Mutable( GetArenaForAllocation());
}
inline std::string* GetCDNDnsRequest::release_clientip() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsRequest.clientIp)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.clientip_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void GetCDNDnsRequest::set_allocated_clientip(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.clientip_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.clientip_.IsDefault()) {
          _impl_.clientip_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsRequest.clientIp)
}

// optional uint32 scene = 3;
inline bool GetCDNDnsRequest::has_scene() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GetCDNDnsRequest::clear_scene() {
  _impl_.scene_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t GetCDNDnsRequest::scene() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsRequest.scene)
  return _internal_scene();
}
inline void GetCDNDnsRequest::set_scene(::uint32_t value) {
  _internal_set_scene(value);
  // @@protoc_insertion_point(field_set:wechat_proto.GetCDNDnsRequest.scene)
}
inline ::uint32_t GetCDNDnsRequest::_internal_scene() const {
  return _impl_.scene_;
}
inline void GetCDNDnsRequest::_internal_set_scene(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.scene_ = value;
}

// -------------------------------------------------------------------

// BaseResponse

// optional int32 ret = 1;
inline bool BaseResponse::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void BaseResponse::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t BaseResponse::ret() const {
  // @@protoc_insertion_point(field_get:wechat_proto.BaseResponse.ret)
  return _internal_ret();
}
inline void BaseResponse::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:wechat_proto.BaseResponse.ret)
}
inline ::int32_t BaseResponse::_internal_ret() const {
  return _impl_.ret_;
}
inline void BaseResponse::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.ret_ = value;
}

// optional .wechat_proto.SKBuiltinString errMsg = 2;
inline bool BaseResponse::has_errmsg() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.errmsg_ != nullptr);
  return value;
}
inline void BaseResponse::clear_errmsg() {
  if (_impl_.errmsg_ != nullptr) _impl_.errmsg_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::wechat_proto::SKBuiltinString& BaseResponse::_internal_errmsg() const {
  const ::wechat_proto::SKBuiltinString* p = _impl_.errmsg_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::SKBuiltinString&>(::wechat_proto::_SKBuiltinString_default_instance_);
}
inline const ::wechat_proto::SKBuiltinString& BaseResponse::errmsg() const {
  // @@protoc_insertion_point(field_get:wechat_proto.BaseResponse.errMsg)
  return _internal_errmsg();
}
inline void BaseResponse::unsafe_arena_set_allocated_errmsg(::wechat_proto::SKBuiltinString* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.errmsg_);
  }
  _impl_.errmsg_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.BaseResponse.errMsg)
}
inline ::wechat_proto::SKBuiltinString* BaseResponse::release_errmsg() {

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wechat_proto::SKBuiltinString* released = _impl_.errmsg_;
  _impl_.errmsg_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::SKBuiltinString* BaseResponse::unsafe_arena_release_errmsg() {
  // @@protoc_insertion_point(field_release:wechat_proto.BaseResponse.errMsg)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wechat_proto::SKBuiltinString* temp = _impl_.errmsg_;
  _impl_.errmsg_ = nullptr;
  return temp;
}
inline ::wechat_proto::SKBuiltinString* BaseResponse::_internal_mutable_errmsg() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.errmsg_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::SKBuiltinString>(GetArenaForAllocation());
    _impl_.errmsg_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(p);
  }
  return _impl_.errmsg_;
}
inline ::wechat_proto::SKBuiltinString* BaseResponse::mutable_errmsg() {
  ::wechat_proto::SKBuiltinString* _msg = _internal_mutable_errmsg();
  // @@protoc_insertion_point(field_mutable:wechat_proto.BaseResponse.errMsg)
  return _msg;
}
inline void BaseResponse::set_allocated_errmsg(::wechat_proto::SKBuiltinString* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::SKBuiltinString*>(_impl_.errmsg_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::SKBuiltinString*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.errmsg_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.BaseResponse.errMsg)
}

// -------------------------------------------------------------------

// GetCDNDnsResponse

// optional .wechat_proto.BaseResponse baseResponse = 1;
inline bool GetCDNDnsResponse::has_baseresponse() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.baseresponse_ != nullptr);
  return value;
}
inline void GetCDNDnsResponse::clear_baseresponse() {
  if (_impl_.baseresponse_ != nullptr) _impl_.baseresponse_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::wechat_proto::BaseResponse& GetCDNDnsResponse::_internal_baseresponse() const {
  const ::wechat_proto::BaseResponse* p = _impl_.baseresponse_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::BaseResponse&>(::wechat_proto::_BaseResponse_default_instance_);
}
inline const ::wechat_proto::BaseResponse& GetCDNDnsResponse::baseresponse() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.baseResponse)
  return _internal_baseresponse();
}
inline void GetCDNDnsResponse::unsafe_arena_set_allocated_baseresponse(::wechat_proto::BaseResponse* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.baseresponse_);
  }
  _impl_.baseresponse_ = reinterpret_cast<::wechat_proto::BaseResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.GetCDNDnsResponse.baseResponse)
}
inline ::wechat_proto::BaseResponse* GetCDNDnsResponse::release_baseresponse() {

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wechat_proto::BaseResponse* released = _impl_.baseresponse_;
  _impl_.baseresponse_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::BaseResponse* GetCDNDnsResponse::unsafe_arena_release_baseresponse() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsResponse.baseResponse)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wechat_proto::BaseResponse* temp = _impl_.baseresponse_;
  _impl_.baseresponse_ = nullptr;
  return temp;
}
inline ::wechat_proto::BaseResponse* GetCDNDnsResponse::_internal_mutable_baseresponse() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.baseresponse_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::BaseResponse>(GetArenaForAllocation());
    _impl_.baseresponse_ = reinterpret_cast<::wechat_proto::BaseResponse*>(p);
  }
  return _impl_.baseresponse_;
}
inline ::wechat_proto::BaseResponse* GetCDNDnsResponse::mutable_baseresponse() {
  ::wechat_proto::BaseResponse* _msg = _internal_mutable_baseresponse();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsResponse.baseResponse)
  return _msg;
}
inline void GetCDNDnsResponse::set_allocated_baseresponse(::wechat_proto::BaseResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::BaseResponse*>(_impl_.baseresponse_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::BaseResponse*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.baseresponse_ = reinterpret_cast<::wechat_proto::BaseResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsResponse.baseResponse)
}

// optional .wechat_proto.CDNDnsInfo dnsInfo = 2;
inline bool GetCDNDnsResponse::has_dnsinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dnsinfo_ != nullptr);
  return value;
}
inline void GetCDNDnsResponse::clear_dnsinfo() {
  if (_impl_.dnsinfo_ != nullptr) _impl_.dnsinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::_internal_dnsinfo() const {
  const ::wechat_proto::CDNDnsInfo* p = _impl_.dnsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::CDNDnsInfo&>(::wechat_proto::_CDNDnsInfo_default_instance_);
}
inline const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::dnsinfo() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.dnsInfo)
  return _internal_dnsinfo();
}
inline void GetCDNDnsResponse::unsafe_arena_set_allocated_dnsinfo(::wechat_proto::CDNDnsInfo* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.dnsinfo_);
  }
  _impl_.dnsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.GetCDNDnsResponse.dnsInfo)
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::release_dnsinfo() {

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::wechat_proto::CDNDnsInfo* released = _impl_.dnsinfo_;
  _impl_.dnsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::unsafe_arena_release_dnsinfo() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsResponse.dnsInfo)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::wechat_proto::CDNDnsInfo* temp = _impl_.dnsinfo_;
  _impl_.dnsinfo_ = nullptr;
  return temp;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::_internal_mutable_dnsinfo() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.dnsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::CDNDnsInfo>(GetArenaForAllocation());
    _impl_.dnsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(p);
  }
  return _impl_.dnsinfo_;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::mutable_dnsinfo() {
  ::wechat_proto::CDNDnsInfo* _msg = _internal_mutable_dnsinfo();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsResponse.dnsInfo)
  return _msg;
}
inline void GetCDNDnsResponse::set_allocated_dnsinfo(::wechat_proto::CDNDnsInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::CDNDnsInfo*>(_impl_.dnsinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.dnsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsResponse.dnsInfo)
}

// optional .wechat_proto.CDNDnsInfo snsDnsInfo = 3;
inline bool GetCDNDnsResponse::has_snsdnsinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.snsdnsinfo_ != nullptr);
  return value;
}
inline void GetCDNDnsResponse::clear_snsdnsinfo() {
  if (_impl_.snsdnsinfo_ != nullptr) _impl_.snsdnsinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::_internal_snsdnsinfo() const {
  const ::wechat_proto::CDNDnsInfo* p = _impl_.snsdnsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::CDNDnsInfo&>(::wechat_proto::_CDNDnsInfo_default_instance_);
}
inline const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::snsdnsinfo() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.snsDnsInfo)
  return _internal_snsdnsinfo();
}
inline void GetCDNDnsResponse::unsafe_arena_set_allocated_snsdnsinfo(::wechat_proto::CDNDnsInfo* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.snsdnsinfo_);
  }
  _impl_.snsdnsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.GetCDNDnsResponse.snsDnsInfo)
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::release_snsdnsinfo() {

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::wechat_proto::CDNDnsInfo* released = _impl_.snsdnsinfo_;
  _impl_.snsdnsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::unsafe_arena_release_snsdnsinfo() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsResponse.snsDnsInfo)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::wechat_proto::CDNDnsInfo* temp = _impl_.snsdnsinfo_;
  _impl_.snsdnsinfo_ = nullptr;
  return temp;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::_internal_mutable_snsdnsinfo() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.snsdnsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::CDNDnsInfo>(GetArenaForAllocation());
    _impl_.snsdnsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(p);
  }
  return _impl_.snsdnsinfo_;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::mutable_snsdnsinfo() {
  ::wechat_proto::CDNDnsInfo* _msg = _internal_mutable_snsdnsinfo();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsResponse.snsDnsInfo)
  return _msg;
}
inline void GetCDNDnsResponse::set_allocated_snsdnsinfo(::wechat_proto::CDNDnsInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::CDNDnsInfo*>(_impl_.snsdnsinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.snsdnsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsResponse.snsDnsInfo)
}

// optional .wechat_proto.CDNDnsInfo appDnsInfo = 4;
inline bool GetCDNDnsResponse::has_appdnsinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.appdnsinfo_ != nullptr);
  return value;
}
inline void GetCDNDnsResponse::clear_appdnsinfo() {
  if (_impl_.appdnsinfo_ != nullptr) _impl_.appdnsinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::_internal_appdnsinfo() const {
  const ::wechat_proto::CDNDnsInfo* p = _impl_.appdnsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::CDNDnsInfo&>(::wechat_proto::_CDNDnsInfo_default_instance_);
}
inline const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::appdnsinfo() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.appDnsInfo)
  return _internal_appdnsinfo();
}
inline void GetCDNDnsResponse::unsafe_arena_set_allocated_appdnsinfo(::wechat_proto::CDNDnsInfo* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.appdnsinfo_);
  }
  _impl_.appdnsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.GetCDNDnsResponse.appDnsInfo)
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::release_appdnsinfo() {

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::wechat_proto::CDNDnsInfo* released = _impl_.appdnsinfo_;
  _impl_.appdnsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::unsafe_arena_release_appdnsinfo() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsResponse.appDnsInfo)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::wechat_proto::CDNDnsInfo* temp = _impl_.appdnsinfo_;
  _impl_.appdnsinfo_ = nullptr;
  return temp;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::_internal_mutable_appdnsinfo() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.appdnsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::CDNDnsInfo>(GetArenaForAllocation());
    _impl_.appdnsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(p);
  }
  return _impl_.appdnsinfo_;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::mutable_appdnsinfo() {
  ::wechat_proto::CDNDnsInfo* _msg = _internal_mutable_appdnsinfo();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsResponse.appDnsInfo)
  return _msg;
}
inline void GetCDNDnsResponse::set_allocated_appdnsinfo(::wechat_proto::CDNDnsInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::CDNDnsInfo*>(_impl_.appdnsinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.appdnsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsResponse.appDnsInfo)
}

// optional .wechat_proto.SKBuiltinString_ cdndnsRuleBuf = 5;
inline bool GetCDNDnsResponse::has_cdndnsrulebuf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cdndnsrulebuf_ != nullptr);
  return value;
}
inline void GetCDNDnsResponse::clear_cdndnsrulebuf() {
  if (_impl_.cdndnsrulebuf_ != nullptr) _impl_.cdndnsrulebuf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::wechat_proto::SKBuiltinString_& GetCDNDnsResponse::_internal_cdndnsrulebuf() const {
  const ::wechat_proto::SKBuiltinString_* p = _impl_.cdndnsrulebuf_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::SKBuiltinString_&>(::wechat_proto::_SKBuiltinString__default_instance_);
}
inline const ::wechat_proto::SKBuiltinString_& GetCDNDnsResponse::cdndnsrulebuf() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.cdndnsRuleBuf)
  return _internal_cdndnsrulebuf();
}
inline void GetCDNDnsResponse::unsafe_arena_set_allocated_cdndnsrulebuf(::wechat_proto::SKBuiltinString_* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cdndnsrulebuf_);
  }
  _impl_.cdndnsrulebuf_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.GetCDNDnsResponse.cdndnsRuleBuf)
}
inline ::wechat_proto::SKBuiltinString_* GetCDNDnsResponse::release_cdndnsrulebuf() {

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::wechat_proto::SKBuiltinString_* released = _impl_.cdndnsrulebuf_;
  _impl_.cdndnsrulebuf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::SKBuiltinString_* GetCDNDnsResponse::unsafe_arena_release_cdndnsrulebuf() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsResponse.cdndnsRuleBuf)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::wechat_proto::SKBuiltinString_* temp = _impl_.cdndnsrulebuf_;
  _impl_.cdndnsrulebuf_ = nullptr;
  return temp;
}
inline ::wechat_proto::SKBuiltinString_* GetCDNDnsResponse::_internal_mutable_cdndnsrulebuf() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.cdndnsrulebuf_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::SKBuiltinString_>(GetArenaForAllocation());
    _impl_.cdndnsrulebuf_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(p);
  }
  return _impl_.cdndnsrulebuf_;
}
inline ::wechat_proto::SKBuiltinString_* GetCDNDnsResponse::mutable_cdndnsrulebuf() {
  ::wechat_proto::SKBuiltinString_* _msg = _internal_mutable_cdndnsrulebuf();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsResponse.cdndnsRuleBuf)
  return _msg;
}
inline void GetCDNDnsResponse::set_allocated_cdndnsrulebuf(::wechat_proto::SKBuiltinString_* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::SKBuiltinString_*>(_impl_.cdndnsrulebuf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.cdndnsrulebuf_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsResponse.cdndnsRuleBuf)
}

// optional .wechat_proto.SKBuiltinString_ fakeCdndnsRuleBuf = 6;
inline bool GetCDNDnsResponse::has_fakecdndnsrulebuf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fakecdndnsrulebuf_ != nullptr);
  return value;
}
inline void GetCDNDnsResponse::clear_fakecdndnsrulebuf() {
  if (_impl_.fakecdndnsrulebuf_ != nullptr) _impl_.fakecdndnsrulebuf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::wechat_proto::SKBuiltinString_& GetCDNDnsResponse::_internal_fakecdndnsrulebuf() const {
  const ::wechat_proto::SKBuiltinString_* p = _impl_.fakecdndnsrulebuf_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::SKBuiltinString_&>(::wechat_proto::_SKBuiltinString__default_instance_);
}
inline const ::wechat_proto::SKBuiltinString_& GetCDNDnsResponse::fakecdndnsrulebuf() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.fakeCdndnsRuleBuf)
  return _internal_fakecdndnsrulebuf();
}
inline void GetCDNDnsResponse::unsafe_arena_set_allocated_fakecdndnsrulebuf(::wechat_proto::SKBuiltinString_* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fakecdndnsrulebuf_);
  }
  _impl_.fakecdndnsrulebuf_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.GetCDNDnsResponse.fakeCdndnsRuleBuf)
}
inline ::wechat_proto::SKBuiltinString_* GetCDNDnsResponse::release_fakecdndnsrulebuf() {

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::wechat_proto::SKBuiltinString_* released = _impl_.fakecdndnsrulebuf_;
  _impl_.fakecdndnsrulebuf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::SKBuiltinString_* GetCDNDnsResponse::unsafe_arena_release_fakecdndnsrulebuf() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsResponse.fakeCdndnsRuleBuf)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::wechat_proto::SKBuiltinString_* temp = _impl_.fakecdndnsrulebuf_;
  _impl_.fakecdndnsrulebuf_ = nullptr;
  return temp;
}
inline ::wechat_proto::SKBuiltinString_* GetCDNDnsResponse::_internal_mutable_fakecdndnsrulebuf() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.fakecdndnsrulebuf_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::SKBuiltinString_>(GetArenaForAllocation());
    _impl_.fakecdndnsrulebuf_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(p);
  }
  return _impl_.fakecdndnsrulebuf_;
}
inline ::wechat_proto::SKBuiltinString_* GetCDNDnsResponse::mutable_fakecdndnsrulebuf() {
  ::wechat_proto::SKBuiltinString_* _msg = _internal_mutable_fakecdndnsrulebuf();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsResponse.fakeCdndnsRuleBuf)
  return _msg;
}
inline void GetCDNDnsResponse::set_allocated_fakecdndnsrulebuf(::wechat_proto::SKBuiltinString_* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::SKBuiltinString_*>(_impl_.fakecdndnsrulebuf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.fakecdndnsrulebuf_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsResponse.fakeCdndnsRuleBuf)
}

// optional .wechat_proto.CDNDnsInfo fakeDnsInfo = 7;
inline bool GetCDNDnsResponse::has_fakednsinfo() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.fakednsinfo_ != nullptr);
  return value;
}
inline void GetCDNDnsResponse::clear_fakednsinfo() {
  if (_impl_.fakednsinfo_ != nullptr) _impl_.fakednsinfo_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::_internal_fakednsinfo() const {
  const ::wechat_proto::CDNDnsInfo* p = _impl_.fakednsinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::CDNDnsInfo&>(::wechat_proto::_CDNDnsInfo_default_instance_);
}
inline const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::fakednsinfo() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.fakeDnsInfo)
  return _internal_fakednsinfo();
}
inline void GetCDNDnsResponse::unsafe_arena_set_allocated_fakednsinfo(::wechat_proto::CDNDnsInfo* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.fakednsinfo_);
  }
  _impl_.fakednsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.GetCDNDnsResponse.fakeDnsInfo)
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::release_fakednsinfo() {

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::wechat_proto::CDNDnsInfo* released = _impl_.fakednsinfo_;
  _impl_.fakednsinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::unsafe_arena_release_fakednsinfo() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsResponse.fakeDnsInfo)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::wechat_proto::CDNDnsInfo* temp = _impl_.fakednsinfo_;
  _impl_.fakednsinfo_ = nullptr;
  return temp;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::_internal_mutable_fakednsinfo() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.fakednsinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::CDNDnsInfo>(GetArenaForAllocation());
    _impl_.fakednsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(p);
  }
  return _impl_.fakednsinfo_;
}
inline ::wechat_proto::CDNDnsInfo* GetCDNDnsResponse::mutable_fakednsinfo() {
  ::wechat_proto::CDNDnsInfo* _msg = _internal_mutable_fakednsinfo();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsResponse.fakeDnsInfo)
  return _msg;
}
inline void GetCDNDnsResponse::set_allocated_fakednsinfo(::wechat_proto::CDNDnsInfo* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::CDNDnsInfo*>(_impl_.fakednsinfo_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.fakednsinfo_ = reinterpret_cast<::wechat_proto::CDNDnsInfo*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsResponse.fakeDnsInfo)
}

// optional int32 getCdnDnsIntervalMs = 8;
inline bool GetCDNDnsResponse::has_getcdndnsintervalms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void GetCDNDnsResponse::clear_getcdndnsintervalms() {
  _impl_.getcdndnsintervalms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t GetCDNDnsResponse::getcdndnsintervalms() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.getCdnDnsIntervalMs)
  return _internal_getcdndnsintervalms();
}
inline void GetCDNDnsResponse::set_getcdndnsintervalms(::int32_t value) {
  _internal_set_getcdndnsintervalms(value);
  // @@protoc_insertion_point(field_set:wechat_proto.GetCDNDnsResponse.getCdnDnsIntervalMs)
}
inline ::int32_t GetCDNDnsResponse::_internal_getcdndnsintervalms() const {
  return _impl_.getcdndnsintervalms_;
}
inline void GetCDNDnsResponse::_internal_set_getcdndnsintervalms(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.getcdndnsintervalms_ = value;
}

// optional .wechat_proto.CDNClientConfig defaultConfig = 9;
inline bool GetCDNDnsResponse::has_defaultconfig() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.defaultconfig_ != nullptr);
  return value;
}
inline void GetCDNDnsResponse::clear_defaultconfig() {
  if (_impl_.defaultconfig_ != nullptr) _impl_.defaultconfig_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::wechat_proto::CDNClientConfig& GetCDNDnsResponse::_internal_defaultconfig() const {
  const ::wechat_proto::CDNClientConfig* p = _impl_.defaultconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::CDNClientConfig&>(::wechat_proto::_CDNClientConfig_default_instance_);
}
inline const ::wechat_proto::CDNClientConfig& GetCDNDnsResponse::defaultconfig() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.defaultConfig)
  return _internal_defaultconfig();
}
inline void GetCDNDnsResponse::unsafe_arena_set_allocated_defaultconfig(::wechat_proto::CDNClientConfig* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.defaultconfig_);
  }
  _impl_.defaultconfig_ = reinterpret_cast<::wechat_proto::CDNClientConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.GetCDNDnsResponse.defaultConfig)
}
inline ::wechat_proto::CDNClientConfig* GetCDNDnsResponse::release_defaultconfig() {

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::wechat_proto::CDNClientConfig* released = _impl_.defaultconfig_;
  _impl_.defaultconfig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::CDNClientConfig* GetCDNDnsResponse::unsafe_arena_release_defaultconfig() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsResponse.defaultConfig)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::wechat_proto::CDNClientConfig* temp = _impl_.defaultconfig_;
  _impl_.defaultconfig_ = nullptr;
  return temp;
}
inline ::wechat_proto::CDNClientConfig* GetCDNDnsResponse::_internal_mutable_defaultconfig() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.defaultconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::CDNClientConfig>(GetArenaForAllocation());
    _impl_.defaultconfig_ = reinterpret_cast<::wechat_proto::CDNClientConfig*>(p);
  }
  return _impl_.defaultconfig_;
}
inline ::wechat_proto::CDNClientConfig* GetCDNDnsResponse::mutable_defaultconfig() {
  ::wechat_proto::CDNClientConfig* _msg = _internal_mutable_defaultconfig();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsResponse.defaultConfig)
  return _msg;
}
inline void GetCDNDnsResponse::set_allocated_defaultconfig(::wechat_proto::CDNClientConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::CDNClientConfig*>(_impl_.defaultconfig_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::CDNClientConfig*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.defaultconfig_ = reinterpret_cast<::wechat_proto::CDNClientConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsResponse.defaultConfig)
}

// optional .wechat_proto.CDNClientConfig disasterConfig = 10;
inline bool GetCDNDnsResponse::has_disasterconfig() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.disasterconfig_ != nullptr);
  return value;
}
inline void GetCDNDnsResponse::clear_disasterconfig() {
  if (_impl_.disasterconfig_ != nullptr) _impl_.disasterconfig_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::wechat_proto::CDNClientConfig& GetCDNDnsResponse::_internal_disasterconfig() const {
  const ::wechat_proto::CDNClientConfig* p = _impl_.disasterconfig_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::CDNClientConfig&>(::wechat_proto::_CDNClientConfig_default_instance_);
}
inline const ::wechat_proto::CDNClientConfig& GetCDNDnsResponse::disasterconfig() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.disasterConfig)
  return _internal_disasterconfig();
}
inline void GetCDNDnsResponse::unsafe_arena_set_allocated_disasterconfig(::wechat_proto::CDNClientConfig* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.disasterconfig_);
  }
  _impl_.disasterconfig_ = reinterpret_cast<::wechat_proto::CDNClientConfig*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.GetCDNDnsResponse.disasterConfig)
}
inline ::wechat_proto::CDNClientConfig* GetCDNDnsResponse::release_disasterconfig() {

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::wechat_proto::CDNClientConfig* released = _impl_.disasterconfig_;
  _impl_.disasterconfig_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::CDNClientConfig* GetCDNDnsResponse::unsafe_arena_release_disasterconfig() {
  // @@protoc_insertion_point(field_release:wechat_proto.GetCDNDnsResponse.disasterConfig)

  _impl_._has_bits_[0] &= ~0x00000100u;
  ::wechat_proto::CDNClientConfig* temp = _impl_.disasterconfig_;
  _impl_.disasterconfig_ = nullptr;
  return temp;
}
inline ::wechat_proto::CDNClientConfig* GetCDNDnsResponse::_internal_mutable_disasterconfig() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.disasterconfig_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::CDNClientConfig>(GetArenaForAllocation());
    _impl_.disasterconfig_ = reinterpret_cast<::wechat_proto::CDNClientConfig*>(p);
  }
  return _impl_.disasterconfig_;
}
inline ::wechat_proto::CDNClientConfig* GetCDNDnsResponse::mutable_disasterconfig() {
  ::wechat_proto::CDNClientConfig* _msg = _internal_mutable_disasterconfig();
  // @@protoc_insertion_point(field_mutable:wechat_proto.GetCDNDnsResponse.disasterConfig)
  return _msg;
}
inline void GetCDNDnsResponse::set_allocated_disasterconfig(::wechat_proto::CDNClientConfig* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::CDNClientConfig*>(_impl_.disasterconfig_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::CDNClientConfig*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }

  _impl_.disasterconfig_ = reinterpret_cast<::wechat_proto::CDNClientConfig*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.GetCDNDnsResponse.disasterConfig)
}

// optional int32 nextIpv6 = 11;
inline bool GetCDNDnsResponse::has_nextipv6() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void GetCDNDnsResponse::clear_nextipv6() {
  _impl_.nextipv6_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t GetCDNDnsResponse::nextipv6() const {
  // @@protoc_insertion_point(field_get:wechat_proto.GetCDNDnsResponse.nextIpv6)
  return _internal_nextipv6();
}
inline void GetCDNDnsResponse::set_nextipv6(::int32_t value) {
  _internal_set_nextipv6(value);
  // @@protoc_insertion_point(field_set:wechat_proto.GetCDNDnsResponse.nextIpv6)
}
inline ::int32_t GetCDNDnsResponse::_internal_nextipv6() const {
  return _impl_.nextipv6_;
}
inline void GetCDNDnsResponse::_internal_set_nextipv6(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.nextipv6_ = value;
}

// -------------------------------------------------------------------

// CDNDnsInfo

// optional uint32 ver = 1;
inline bool CDNDnsInfo::has_ver() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_ver() {
  _impl_.ver_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t CDNDnsInfo::ver() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.ver)
  return _internal_ver();
}
inline void CDNDnsInfo::set_ver(::uint32_t value) {
  _internal_set_ver(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.ver)
}
inline ::uint32_t CDNDnsInfo::_internal_ver() const {
  return _impl_.ver_;
}
inline void CDNDnsInfo::_internal_set_ver(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.ver_ = value;
}

// optional uint32 uin = 2;
inline bool CDNDnsInfo::has_uin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_uin() {
  _impl_.uin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t CDNDnsInfo::uin() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.uin)
  return _internal_uin();
}
inline void CDNDnsInfo::set_uin(::uint32_t value) {
  _internal_set_uin(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.uin)
}
inline ::uint32_t CDNDnsInfo::_internal_uin() const {
  return _impl_.uin_;
}
inline void CDNDnsInfo::_internal_set_uin(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.uin_ = value;
}

// optional uint32 expireTime = 3;
inline bool CDNDnsInfo::has_expiretime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_expiretime() {
  _impl_.expiretime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t CDNDnsInfo::expiretime() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.expireTime)
  return _internal_expiretime();
}
inline void CDNDnsInfo::set_expiretime(::uint32_t value) {
  _internal_set_expiretime(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.expireTime)
}
inline ::uint32_t CDNDnsInfo::_internal_expiretime() const {
  return _impl_.expiretime_;
}
inline void CDNDnsInfo::_internal_set_expiretime(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.expiretime_ = value;
}

// optional int32 frontId = 4;
inline bool CDNDnsInfo::has_frontid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_frontid() {
  _impl_.frontid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::int32_t CDNDnsInfo::frontid() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.frontId)
  return _internal_frontid();
}
inline void CDNDnsInfo::set_frontid(::int32_t value) {
  _internal_set_frontid(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.frontId)
}
inline ::int32_t CDNDnsInfo::_internal_frontid() const {
  return _impl_.frontid_;
}
inline void CDNDnsInfo::_internal_set_frontid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.frontid_ = value;
}

// optional int32 frontIpcount = 5;
inline bool CDNDnsInfo::has_frontipcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_frontipcount() {
  _impl_.frontipcount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::int32_t CDNDnsInfo::frontipcount() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.frontIpcount)
  return _internal_frontipcount();
}
inline void CDNDnsInfo::set_frontipcount(::int32_t value) {
  _internal_set_frontipcount(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.frontIpcount)
}
inline ::int32_t CDNDnsInfo::_internal_frontipcount() const {
  return _impl_.frontipcount_;
}
inline void CDNDnsInfo::_internal_set_frontipcount(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.frontipcount_ = value;
}

// repeated .wechat_proto.SKBuiltinString frontIplist = 6;
inline int CDNDnsInfo::_internal_frontiplist_size() const {
  return _internal_frontiplist().size();
}
inline int CDNDnsInfo::frontiplist_size() const {
  return _internal_frontiplist_size();
}
inline void CDNDnsInfo::clear_frontiplist() {
  _internal_mutable_frontiplist()->Clear();
}
inline ::wechat_proto::SKBuiltinString* CDNDnsInfo::mutable_frontiplist(int index) {
  // @@protoc_insertion_point(field_mutable:wechat_proto.CDNDnsInfo.frontIplist)
  return _internal_mutable_frontiplist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::wechat_proto::SKBuiltinString >*
CDNDnsInfo::mutable_frontiplist() {
  // @@protoc_insertion_point(field_mutable_list:wechat_proto.CDNDnsInfo.frontIplist)
  return _internal_mutable_frontiplist();
}
inline const ::wechat_proto::SKBuiltinString& CDNDnsInfo::frontiplist(int index) const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.frontIplist)
    return _internal_frontiplist().Get(index);
}
inline ::wechat_proto::SKBuiltinString* CDNDnsInfo::add_frontiplist() {
  ::wechat_proto::SKBuiltinString* _add = _internal_mutable_frontiplist()->Add();
  // @@protoc_insertion_point(field_add:wechat_proto.CDNDnsInfo.frontIplist)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::wechat_proto::SKBuiltinString >&
CDNDnsInfo::frontiplist() const {
  // @@protoc_insertion_point(field_list:wechat_proto.CDNDnsInfo.frontIplist)
  return _internal_frontiplist();
}
inline const ::google::protobuf::RepeatedPtrField<::wechat_proto::SKBuiltinString>&
CDNDnsInfo::_internal_frontiplist() const {
  return _impl_.frontiplist_;
}
inline ::google::protobuf::RepeatedPtrField<::wechat_proto::SKBuiltinString>*
CDNDnsInfo::_internal_mutable_frontiplist() {
  return &_impl_.frontiplist_;
}

// optional string zoneDomain = 7;
inline bool CDNDnsInfo::has_zonedomain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_zonedomain() {
  _impl_.zonedomain_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& CDNDnsInfo::zonedomain() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.zoneDomain)
  return _internal_zonedomain();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CDNDnsInfo::set_zonedomain(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zonedomain_.Set(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.zoneDomain)
}
inline std::string* CDNDnsInfo::mutable_zonedomain() {
  std::string* _s = _internal_mutable_zonedomain();
  // @@protoc_insertion_point(field_mutable:wechat_proto.CDNDnsInfo.zoneDomain)
  return _s;
}
inline const std::string& CDNDnsInfo::_internal_zonedomain() const {
  return _impl_.zonedomain_.Get();
}
inline void CDNDnsInfo::_internal_set_zonedomain(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.zonedomain_.Set(value, GetArenaForAllocation());
}
inline std::string* CDNDnsInfo::_internal_mutable_zonedomain() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.zonedomain_.Mutable( GetArenaForAllocation());
}
inline std::string* CDNDnsInfo::release_zonedomain() {
  // @@protoc_insertion_point(field_release:wechat_proto.CDNDnsInfo.zoneDomain)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.zonedomain_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.zonedomain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void CDNDnsInfo::set_allocated_zonedomain(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.zonedomain_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.zonedomain_.IsDefault()) {
          _impl_.zonedomain_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.CDNDnsInfo.zoneDomain)
}

// optional .wechat_proto.SKBuiltinString_ authKey = 8;
inline bool CDNDnsInfo::has_authkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.authkey_ != nullptr);
  return value;
}
inline void CDNDnsInfo::clear_authkey() {
  if (_impl_.authkey_ != nullptr) _impl_.authkey_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::wechat_proto::SKBuiltinString_& CDNDnsInfo::_internal_authkey() const {
  const ::wechat_proto::SKBuiltinString_* p = _impl_.authkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::SKBuiltinString_&>(::wechat_proto::_SKBuiltinString__default_instance_);
}
inline const ::wechat_proto::SKBuiltinString_& CDNDnsInfo::authkey() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.authKey)
  return _internal_authkey();
}
inline void CDNDnsInfo::unsafe_arena_set_allocated_authkey(::wechat_proto::SKBuiltinString_* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.authkey_);
  }
  _impl_.authkey_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.CDNDnsInfo.authKey)
}
inline ::wechat_proto::SKBuiltinString_* CDNDnsInfo::release_authkey() {

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::wechat_proto::SKBuiltinString_* released = _impl_.authkey_;
  _impl_.authkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::SKBuiltinString_* CDNDnsInfo::unsafe_arena_release_authkey() {
  // @@protoc_insertion_point(field_release:wechat_proto.CDNDnsInfo.authKey)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::wechat_proto::SKBuiltinString_* temp = _impl_.authkey_;
  _impl_.authkey_ = nullptr;
  return temp;
}
inline ::wechat_proto::SKBuiltinString_* CDNDnsInfo::_internal_mutable_authkey() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.authkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::SKBuiltinString_>(GetArenaForAllocation());
    _impl_.authkey_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(p);
  }
  return _impl_.authkey_;
}
inline ::wechat_proto::SKBuiltinString_* CDNDnsInfo::mutable_authkey() {
  ::wechat_proto::SKBuiltinString_* _msg = _internal_mutable_authkey();
  // @@protoc_insertion_point(field_mutable:wechat_proto.CDNDnsInfo.authKey)
  return _msg;
}
inline void CDNDnsInfo::set_allocated_authkey(::wechat_proto::SKBuiltinString_* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::SKBuiltinString_*>(_impl_.authkey_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.authkey_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.CDNDnsInfo.authKey)
}

// optional int32 zoneId = 9;
inline bool CDNDnsInfo::has_zoneid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_zoneid() {
  _impl_.zoneid_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t CDNDnsInfo::zoneid() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.zoneId)
  return _internal_zoneid();
}
inline void CDNDnsInfo::set_zoneid(::int32_t value) {
  _internal_set_zoneid(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.zoneId)
}
inline ::int32_t CDNDnsInfo::_internal_zoneid() const {
  return _impl_.zoneid_;
}
inline void CDNDnsInfo::_internal_set_zoneid(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.zoneid_ = value;
}

// optional int32 zoneIpcount = 10;
inline bool CDNDnsInfo::has_zoneipcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_zoneipcount() {
  _impl_.zoneipcount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::int32_t CDNDnsInfo::zoneipcount() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.zoneIpcount)
  return _internal_zoneipcount();
}
inline void CDNDnsInfo::set_zoneipcount(::int32_t value) {
  _internal_set_zoneipcount(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.zoneIpcount)
}
inline ::int32_t CDNDnsInfo::_internal_zoneipcount() const {
  return _impl_.zoneipcount_;
}
inline void CDNDnsInfo::_internal_set_zoneipcount(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.zoneipcount_ = value;
}

// repeated .wechat_proto.SKBuiltinString zoneIplist = 11;
inline int CDNDnsInfo::_internal_zoneiplist_size() const {
  return _internal_zoneiplist().size();
}
inline int CDNDnsInfo::zoneiplist_size() const {
  return _internal_zoneiplist_size();
}
inline void CDNDnsInfo::clear_zoneiplist() {
  _internal_mutable_zoneiplist()->Clear();
}
inline ::wechat_proto::SKBuiltinString* CDNDnsInfo::mutable_zoneiplist(int index) {
  // @@protoc_insertion_point(field_mutable:wechat_proto.CDNDnsInfo.zoneIplist)
  return _internal_mutable_zoneiplist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::wechat_proto::SKBuiltinString >*
CDNDnsInfo::mutable_zoneiplist() {
  // @@protoc_insertion_point(field_mutable_list:wechat_proto.CDNDnsInfo.zoneIplist)
  return _internal_mutable_zoneiplist();
}
inline const ::wechat_proto::SKBuiltinString& CDNDnsInfo::zoneiplist(int index) const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.zoneIplist)
    return _internal_zoneiplist().Get(index);
}
inline ::wechat_proto::SKBuiltinString* CDNDnsInfo::add_zoneiplist() {
  ::wechat_proto::SKBuiltinString* _add = _internal_mutable_zoneiplist()->Add();
  // @@protoc_insertion_point(field_add:wechat_proto.CDNDnsInfo.zoneIplist)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::wechat_proto::SKBuiltinString >&
CDNDnsInfo::zoneiplist() const {
  // @@protoc_insertion_point(field_list:wechat_proto.CDNDnsInfo.zoneIplist)
  return _internal_zoneiplist();
}
inline const ::google::protobuf::RepeatedPtrField<::wechat_proto::SKBuiltinString>&
CDNDnsInfo::_internal_zoneiplist() const {
  return _impl_.zoneiplist_;
}
inline ::google::protobuf::RepeatedPtrField<::wechat_proto::SKBuiltinString>*
CDNDnsInfo::_internal_mutable_zoneiplist() {
  return &_impl_.zoneiplist_;
}

// repeated .wechat_proto.CDNDnsPortInfo frontIpportList = 12;
inline int CDNDnsInfo::_internal_frontipportlist_size() const {
  return _internal_frontipportlist().size();
}
inline int CDNDnsInfo::frontipportlist_size() const {
  return _internal_frontipportlist_size();
}
inline void CDNDnsInfo::clear_frontipportlist() {
  _internal_mutable_frontipportlist()->Clear();
}
inline ::wechat_proto::CDNDnsPortInfo* CDNDnsInfo::mutable_frontipportlist(int index) {
  // @@protoc_insertion_point(field_mutable:wechat_proto.CDNDnsInfo.frontIpportList)
  return _internal_mutable_frontipportlist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::wechat_proto::CDNDnsPortInfo >*
CDNDnsInfo::mutable_frontipportlist() {
  // @@protoc_insertion_point(field_mutable_list:wechat_proto.CDNDnsInfo.frontIpportList)
  return _internal_mutable_frontipportlist();
}
inline const ::wechat_proto::CDNDnsPortInfo& CDNDnsInfo::frontipportlist(int index) const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.frontIpportList)
    return _internal_frontipportlist().Get(index);
}
inline ::wechat_proto::CDNDnsPortInfo* CDNDnsInfo::add_frontipportlist() {
  ::wechat_proto::CDNDnsPortInfo* _add = _internal_mutable_frontipportlist()->Add();
  // @@protoc_insertion_point(field_add:wechat_proto.CDNDnsInfo.frontIpportList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::wechat_proto::CDNDnsPortInfo >&
CDNDnsInfo::frontipportlist() const {
  // @@protoc_insertion_point(field_list:wechat_proto.CDNDnsInfo.frontIpportList)
  return _internal_frontipportlist();
}
inline const ::google::protobuf::RepeatedPtrField<::wechat_proto::CDNDnsPortInfo>&
CDNDnsInfo::_internal_frontipportlist() const {
  return _impl_.frontipportlist_;
}
inline ::google::protobuf::RepeatedPtrField<::wechat_proto::CDNDnsPortInfo>*
CDNDnsInfo::_internal_mutable_frontipportlist() {
  return &_impl_.frontipportlist_;
}

// repeated .wechat_proto.CDNDnsPortInfo zoneIpportList = 13;
inline int CDNDnsInfo::_internal_zoneipportlist_size() const {
  return _internal_zoneipportlist().size();
}
inline int CDNDnsInfo::zoneipportlist_size() const {
  return _internal_zoneipportlist_size();
}
inline void CDNDnsInfo::clear_zoneipportlist() {
  _internal_mutable_zoneipportlist()->Clear();
}
inline ::wechat_proto::CDNDnsPortInfo* CDNDnsInfo::mutable_zoneipportlist(int index) {
  // @@protoc_insertion_point(field_mutable:wechat_proto.CDNDnsInfo.zoneIpportList)
  return _internal_mutable_zoneipportlist()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::wechat_proto::CDNDnsPortInfo >*
CDNDnsInfo::mutable_zoneipportlist() {
  // @@protoc_insertion_point(field_mutable_list:wechat_proto.CDNDnsInfo.zoneIpportList)
  return _internal_mutable_zoneipportlist();
}
inline const ::wechat_proto::CDNDnsPortInfo& CDNDnsInfo::zoneipportlist(int index) const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.zoneIpportList)
    return _internal_zoneipportlist().Get(index);
}
inline ::wechat_proto::CDNDnsPortInfo* CDNDnsInfo::add_zoneipportlist() {
  ::wechat_proto::CDNDnsPortInfo* _add = _internal_mutable_zoneipportlist()->Add();
  // @@protoc_insertion_point(field_add:wechat_proto.CDNDnsInfo.zoneIpportList)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::wechat_proto::CDNDnsPortInfo >&
CDNDnsInfo::zoneipportlist() const {
  // @@protoc_insertion_point(field_list:wechat_proto.CDNDnsInfo.zoneIpportList)
  return _internal_zoneipportlist();
}
inline const ::google::protobuf::RepeatedPtrField<::wechat_proto::CDNDnsPortInfo>&
CDNDnsInfo::_internal_zoneipportlist() const {
  return _impl_.zoneipportlist_;
}
inline ::google::protobuf::RepeatedPtrField<::wechat_proto::CDNDnsPortInfo>*
CDNDnsInfo::_internal_mutable_zoneipportlist() {
  return &_impl_.zoneipportlist_;
}

// optional int32 frontIpportCount = 14;
inline bool CDNDnsInfo::has_frontipportcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_frontipportcount() {
  _impl_.frontipportcount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::int32_t CDNDnsInfo::frontipportcount() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.frontIpportCount)
  return _internal_frontipportcount();
}
inline void CDNDnsInfo::set_frontipportcount(::int32_t value) {
  _internal_set_frontipportcount(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.frontIpportCount)
}
inline ::int32_t CDNDnsInfo::_internal_frontipportcount() const {
  return _impl_.frontipportcount_;
}
inline void CDNDnsInfo::_internal_set_frontipportcount(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.frontipportcount_ = value;
}

// optional int32 zoneIpportCount = 15;
inline bool CDNDnsInfo::has_zoneipportcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_zoneipportcount() {
  _impl_.zoneipportcount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::int32_t CDNDnsInfo::zoneipportcount() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.zoneIpportCount)
  return _internal_zoneipportcount();
}
inline void CDNDnsInfo::set_zoneipportcount(::int32_t value) {
  _internal_set_zoneipportcount(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.zoneIpportCount)
}
inline ::int32_t CDNDnsInfo::_internal_zoneipportcount() const {
  return _impl_.zoneipportcount_;
}
inline void CDNDnsInfo::_internal_set_zoneipportcount(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.zoneipportcount_ = value;
}

// optional uint32 fakeUin = 16;
inline bool CDNDnsInfo::has_fakeuin() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline void CDNDnsInfo::clear_fakeuin() {
  _impl_.fakeuin_ = 0u;
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline ::uint32_t CDNDnsInfo::fakeuin() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.fakeUin)
  return _internal_fakeuin();
}
inline void CDNDnsInfo::set_fakeuin(::uint32_t value) {
  _internal_set_fakeuin(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsInfo.fakeUin)
}
inline ::uint32_t CDNDnsInfo::_internal_fakeuin() const {
  return _impl_.fakeuin_;
}
inline void CDNDnsInfo::_internal_set_fakeuin(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00001000u;
  _impl_.fakeuin_ = value;
}

// optional .wechat_proto.SKBuiltinString_ newAuthKey = 17;
inline bool CDNDnsInfo::has_newauthkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.newauthkey_ != nullptr);
  return value;
}
inline void CDNDnsInfo::clear_newauthkey() {
  if (_impl_.newauthkey_ != nullptr) _impl_.newauthkey_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::wechat_proto::SKBuiltinString_& CDNDnsInfo::_internal_newauthkey() const {
  const ::wechat_proto::SKBuiltinString_* p = _impl_.newauthkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::SKBuiltinString_&>(::wechat_proto::_SKBuiltinString__default_instance_);
}
inline const ::wechat_proto::SKBuiltinString_& CDNDnsInfo::newauthkey() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsInfo.newAuthKey)
  return _internal_newauthkey();
}
inline void CDNDnsInfo::unsafe_arena_set_allocated_newauthkey(::wechat_proto::SKBuiltinString_* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.newauthkey_);
  }
  _impl_.newauthkey_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.CDNDnsInfo.newAuthKey)
}
inline ::wechat_proto::SKBuiltinString_* CDNDnsInfo::release_newauthkey() {

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::wechat_proto::SKBuiltinString_* released = _impl_.newauthkey_;
  _impl_.newauthkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::SKBuiltinString_* CDNDnsInfo::unsafe_arena_release_newauthkey() {
  // @@protoc_insertion_point(field_release:wechat_proto.CDNDnsInfo.newAuthKey)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::wechat_proto::SKBuiltinString_* temp = _impl_.newauthkey_;
  _impl_.newauthkey_ = nullptr;
  return temp;
}
inline ::wechat_proto::SKBuiltinString_* CDNDnsInfo::_internal_mutable_newauthkey() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.newauthkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::SKBuiltinString_>(GetArenaForAllocation());
    _impl_.newauthkey_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(p);
  }
  return _impl_.newauthkey_;
}
inline ::wechat_proto::SKBuiltinString_* CDNDnsInfo::mutable_newauthkey() {
  ::wechat_proto::SKBuiltinString_* _msg = _internal_mutable_newauthkey();
  // @@protoc_insertion_point(field_mutable:wechat_proto.CDNDnsInfo.newAuthKey)
  return _msg;
}
inline void CDNDnsInfo::set_allocated_newauthkey(::wechat_proto::SKBuiltinString_* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::SKBuiltinString_*>(_impl_.newauthkey_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.newauthkey_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.CDNDnsInfo.newAuthKey)
}

// -------------------------------------------------------------------

// CDNClientConfig

// optional int32 c2CshowErrorDelayMs = 1;
inline bool CDNClientConfig::has_c2cshowerrordelayms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CDNClientConfig::clear_c2cshowerrordelayms() {
  _impl_.c2cshowerrordelayms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::int32_t CDNClientConfig::c2cshowerrordelayms() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNClientConfig.c2CshowErrorDelayMs)
  return _internal_c2cshowerrordelayms();
}
inline void CDNClientConfig::set_c2cshowerrordelayms(::int32_t value) {
  _internal_set_c2cshowerrordelayms(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNClientConfig.c2CshowErrorDelayMs)
}
inline ::int32_t CDNClientConfig::_internal_c2cshowerrordelayms() const {
  return _impl_.c2cshowerrordelayms_;
}
inline void CDNClientConfig::_internal_set_c2cshowerrordelayms(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.c2cshowerrordelayms_ = value;
}

// optional int32 snsshowErrorDelayMs = 2;
inline bool CDNClientConfig::has_snsshowerrordelayms() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CDNClientConfig::clear_snsshowerrordelayms() {
  _impl_.snsshowerrordelayms_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::int32_t CDNClientConfig::snsshowerrordelayms() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNClientConfig.snsshowErrorDelayMs)
  return _internal_snsshowerrordelayms();
}
inline void CDNClientConfig::set_snsshowerrordelayms(::int32_t value) {
  _internal_set_snsshowerrordelayms(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNClientConfig.snsshowErrorDelayMs)
}
inline ::int32_t CDNClientConfig::_internal_snsshowerrordelayms() const {
  return _impl_.snsshowerrordelayms_;
}
inline void CDNClientConfig::_internal_set_snsshowerrordelayms(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.snsshowerrordelayms_ = value;
}

// optional int32 c2CretryInterval = 3;
inline bool CDNClientConfig::has_c2cretryinterval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void CDNClientConfig::clear_c2cretryinterval() {
  _impl_.c2cretryinterval_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t CDNClientConfig::c2cretryinterval() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNClientConfig.c2CretryInterval)
  return _internal_c2cretryinterval();
}
inline void CDNClientConfig::set_c2cretryinterval(::int32_t value) {
  _internal_set_c2cretryinterval(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNClientConfig.c2CretryInterval)
}
inline ::int32_t CDNClientConfig::_internal_c2cretryinterval() const {
  return _impl_.c2cretryinterval_;
}
inline void CDNClientConfig::_internal_set_c2cretryinterval(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.c2cretryinterval_ = value;
}

// optional int32 snsretryInterval = 4;
inline bool CDNClientConfig::has_snsretryinterval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void CDNClientConfig::clear_snsretryinterval() {
  _impl_.snsretryinterval_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::int32_t CDNClientConfig::snsretryinterval() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNClientConfig.snsretryInterval)
  return _internal_snsretryinterval();
}
inline void CDNClientConfig::set_snsretryinterval(::int32_t value) {
  _internal_set_snsretryinterval(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNClientConfig.snsretryInterval)
}
inline ::int32_t CDNClientConfig::_internal_snsretryinterval() const {
  return _impl_.snsretryinterval_;
}
inline void CDNClientConfig::_internal_set_snsretryinterval(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.snsretryinterval_ = value;
}

// optional int32 c2Crwtimeout = 5;
inline bool CDNClientConfig::has_c2crwtimeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void CDNClientConfig::clear_c2crwtimeout() {
  _impl_.c2crwtimeout_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::int32_t CDNClientConfig::c2crwtimeout() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNClientConfig.c2Crwtimeout)
  return _internal_c2crwtimeout();
}
inline void CDNClientConfig::set_c2crwtimeout(::int32_t value) {
  _internal_set_c2crwtimeout(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNClientConfig.c2Crwtimeout)
}
inline ::int32_t CDNClientConfig::_internal_c2crwtimeout() const {
  return _impl_.c2crwtimeout_;
}
inline void CDNClientConfig::_internal_set_c2crwtimeout(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.c2crwtimeout_ = value;
}

// optional int32 snsrwtimeout = 6;
inline bool CDNClientConfig::has_snsrwtimeout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void CDNClientConfig::clear_snsrwtimeout() {
  _impl_.snsrwtimeout_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t CDNClientConfig::snsrwtimeout() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNClientConfig.snsrwtimeout)
  return _internal_snsrwtimeout();
}
inline void CDNClientConfig::set_snsrwtimeout(::int32_t value) {
  _internal_set_snsrwtimeout(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNClientConfig.snsrwtimeout)
}
inline ::int32_t CDNClientConfig::_internal_snsrwtimeout() const {
  return _impl_.snsrwtimeout_;
}
inline void CDNClientConfig::_internal_set_snsrwtimeout(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.snsrwtimeout_ = value;
}

// -------------------------------------------------------------------

// CDNDnsPortInfo

// optional uint32 portCount = 1;
inline bool CDNDnsPortInfo::has_portcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CDNDnsPortInfo::clear_portcount() {
  _impl_.portcount_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t CDNDnsPortInfo::portcount() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsPortInfo.portCount)
  return _internal_portcount();
}
inline void CDNDnsPortInfo::set_portcount(::uint32_t value) {
  _internal_set_portcount(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsPortInfo.portCount)
}
inline ::uint32_t CDNDnsPortInfo::_internal_portcount() const {
  return _impl_.portcount_;
}
inline void CDNDnsPortInfo::_internal_set_portcount(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.portcount_ = value;
}

// repeated uint32 portList = 2;
inline int CDNDnsPortInfo::_internal_portlist_size() const {
  return _internal_portlist().size();
}
inline int CDNDnsPortInfo::portlist_size() const {
  return _internal_portlist_size();
}
inline void CDNDnsPortInfo::clear_portlist() {
  _internal_mutable_portlist()->Clear();
}
inline ::uint32_t CDNDnsPortInfo::portlist(int index) const {
  // @@protoc_insertion_point(field_get:wechat_proto.CDNDnsPortInfo.portList)
  return _internal_portlist().Get(index);
}
inline void CDNDnsPortInfo::set_portlist(int index, ::uint32_t value) {
  _internal_mutable_portlist()->Set(index, value);
  // @@protoc_insertion_point(field_set:wechat_proto.CDNDnsPortInfo.portList)
}
inline void CDNDnsPortInfo::add_portlist(::uint32_t value) {
  _internal_mutable_portlist()->Add(value);
  // @@protoc_insertion_point(field_add:wechat_proto.CDNDnsPortInfo.portList)
}
inline const ::google::protobuf::RepeatedField<::uint32_t>& CDNDnsPortInfo::portlist() const {
  // @@protoc_insertion_point(field_list:wechat_proto.CDNDnsPortInfo.portList)
  return _internal_portlist();
}
inline ::google::protobuf::RepeatedField<::uint32_t>* CDNDnsPortInfo::mutable_portlist() {
  // @@protoc_insertion_point(field_mutable_list:wechat_proto.CDNDnsPortInfo.portList)
  return _internal_mutable_portlist();
}

inline const ::google::protobuf::RepeatedField<::uint32_t>& CDNDnsPortInfo::_internal_portlist() const {
  return _impl_.portlist_;
}
inline ::google::protobuf::RepeatedField<::uint32_t>* CDNDnsPortInfo::_internal_mutable_portlist() {
  return &_impl_.portlist_;
}

// -------------------------------------------------------------------

// DATA

// optional uint32 len = 1;
inline bool DATA::has_len() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void DATA::clear_len() {
  _impl_.len_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t DATA::len() const {
  // @@protoc_insertion_point(field_get:wechat_proto.DATA.len)
  return _internal_len();
}
inline void DATA::set_len(::uint32_t value) {
  _internal_set_len(value);
  // @@protoc_insertion_point(field_set:wechat_proto.DATA.len)
}
inline ::uint32_t DATA::_internal_len() const {
  return _impl_.len_;
}
inline void DATA::_internal_set_len(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.len_ = value;
}

// optional bytes data = 2;
inline bool DATA::has_data() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void DATA::clear_data() {
  _impl_.data_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DATA::data() const {
  // @@protoc_insertion_point(field_get:wechat_proto.DATA.data)
  return _internal_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void DATA::set_data(Arg_&& arg,
                                                     Args_... args) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:wechat_proto.DATA.data)
}
inline std::string* DATA::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:wechat_proto.DATA.data)
  return _s;
}
inline const std::string& DATA::_internal_data() const {
  return _impl_.data_.Get();
}
inline void DATA::_internal_set_data(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.data_.Set(value, GetArenaForAllocation());
}
inline std::string* DATA::_internal_mutable_data() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.data_.Mutable( GetArenaForAllocation());
}
inline std::string* DATA::release_data() {
  // @@protoc_insertion_point(field_release:wechat_proto.DATA.data)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.data_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void DATA::set_allocated_data(std::string* value) {
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.data_.SetAllocated(value, GetArenaForAllocation());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.data_.IsDefault()) {
          _impl_.data_.Set("", GetArenaForAllocation());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.DATA.data)
}

// -------------------------------------------------------------------

// CmdItem

// optional uint32 cmd_id = 1;
inline bool CmdItem::has_cmd_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void CmdItem::clear_cmd_id() {
  _impl_.cmd_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t CmdItem::cmd_id() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CmdItem.cmd_id)
  return _internal_cmd_id();
}
inline void CmdItem::set_cmd_id(::uint32_t value) {
  _internal_set_cmd_id(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CmdItem.cmd_id)
}
inline ::uint32_t CmdItem::_internal_cmd_id() const {
  return _impl_.cmd_id_;
}
inline void CmdItem::_internal_set_cmd_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.cmd_id_ = value;
}

// optional .wechat_proto.DATA cmd_buf = 2;
inline bool CmdItem::has_cmd_buf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cmd_buf_ != nullptr);
  return value;
}
inline void CmdItem::clear_cmd_buf() {
  if (_impl_.cmd_buf_ != nullptr) _impl_.cmd_buf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::wechat_proto::DATA& CmdItem::_internal_cmd_buf() const {
  const ::wechat_proto::DATA* p = _impl_.cmd_buf_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::DATA&>(::wechat_proto::_DATA_default_instance_);
}
inline const ::wechat_proto::DATA& CmdItem::cmd_buf() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CmdItem.cmd_buf)
  return _internal_cmd_buf();
}
inline void CmdItem::unsafe_arena_set_allocated_cmd_buf(::wechat_proto::DATA* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cmd_buf_);
  }
  _impl_.cmd_buf_ = reinterpret_cast<::wechat_proto::DATA*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.CmdItem.cmd_buf)
}
inline ::wechat_proto::DATA* CmdItem::release_cmd_buf() {

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wechat_proto::DATA* released = _impl_.cmd_buf_;
  _impl_.cmd_buf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::DATA* CmdItem::unsafe_arena_release_cmd_buf() {
  // @@protoc_insertion_point(field_release:wechat_proto.CmdItem.cmd_buf)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wechat_proto::DATA* temp = _impl_.cmd_buf_;
  _impl_.cmd_buf_ = nullptr;
  return temp;
}
inline ::wechat_proto::DATA* CmdItem::_internal_mutable_cmd_buf() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cmd_buf_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::DATA>(GetArenaForAllocation());
    _impl_.cmd_buf_ = reinterpret_cast<::wechat_proto::DATA*>(p);
  }
  return _impl_.cmd_buf_;
}
inline ::wechat_proto::DATA* CmdItem::mutable_cmd_buf() {
  ::wechat_proto::DATA* _msg = _internal_mutable_cmd_buf();
  // @@protoc_insertion_point(field_mutable:wechat_proto.CmdItem.cmd_buf)
  return _msg;
}
inline void CmdItem::set_allocated_cmd_buf(::wechat_proto::DATA* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::DATA*>(_impl_.cmd_buf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::DATA*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cmd_buf_ = reinterpret_cast<::wechat_proto::DATA*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.CmdItem.cmd_buf)
}

// -------------------------------------------------------------------

// CmdList

// optional uint32 count = 1;
inline bool CmdList::has_count() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CmdList::clear_count() {
  _impl_.count_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::uint32_t CmdList::count() const {
  // @@protoc_insertion_point(field_get:wechat_proto.CmdList.count)
  return _internal_count();
}
inline void CmdList::set_count(::uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:wechat_proto.CmdList.count)
}
inline ::uint32_t CmdList::_internal_count() const {
  return _impl_.count_;
}
inline void CmdList::_internal_set_count(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.count_ = value;
}

// repeated .wechat_proto.CmdItem item_list = 2;
inline int CmdList::_internal_item_list_size() const {
  return _internal_item_list().size();
}
inline int CmdList::item_list_size() const {
  return _internal_item_list_size();
}
inline void CmdList::clear_item_list() {
  _internal_mutable_item_list()->Clear();
}
inline ::wechat_proto::CmdItem* CmdList::mutable_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:wechat_proto.CmdList.item_list)
  return _internal_mutable_item_list()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::wechat_proto::CmdItem >*
CmdList::mutable_item_list() {
  // @@protoc_insertion_point(field_mutable_list:wechat_proto.CmdList.item_list)
  return _internal_mutable_item_list();
}
inline const ::wechat_proto::CmdItem& CmdList::item_list(int index) const {
  // @@protoc_insertion_point(field_get:wechat_proto.CmdList.item_list)
    return _internal_item_list().Get(index);
}
inline ::wechat_proto::CmdItem* CmdList::add_item_list() {
  ::wechat_proto::CmdItem* _add = _internal_mutable_item_list()->Add();
  // @@protoc_insertion_point(field_add:wechat_proto.CmdList.item_list)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField< ::wechat_proto::CmdItem >&
CmdList::item_list() const {
  // @@protoc_insertion_point(field_list:wechat_proto.CmdList.item_list)
  return _internal_item_list();
}
inline const ::google::protobuf::RepeatedPtrField<::wechat_proto::CmdItem>&
CmdList::_internal_item_list() const {
  return _impl_.item_list_;
}
inline ::google::protobuf::RepeatedPtrField<::wechat_proto::CmdItem>*
CmdList::_internal_mutable_item_list() {
  return &_impl_.item_list_;
}

// -------------------------------------------------------------------

// NewSyncResponseMSGItem

// optional uint32 mgs_id = 1;
inline bool NewSyncResponseMSGItem::has_mgs_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NewSyncResponseMSGItem::clear_mgs_id() {
  _impl_.mgs_id_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t NewSyncResponseMSGItem::mgs_id() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponseMSGItem.mgs_id)
  return _internal_mgs_id();
}
inline void NewSyncResponseMSGItem::set_mgs_id(::uint32_t value) {
  _internal_set_mgs_id(value);
  // @@protoc_insertion_point(field_set:wechat_proto.NewSyncResponseMSGItem.mgs_id)
}
inline ::uint32_t NewSyncResponseMSGItem::_internal_mgs_id() const {
  return _impl_.mgs_id_;
}
inline void NewSyncResponseMSGItem::_internal_set_mgs_id(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.mgs_id_ = value;
}

// optional .wechat_proto.SKBuiltinString from_wxid = 2;
inline bool NewSyncResponseMSGItem::has_from_wxid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_wxid_ != nullptr);
  return value;
}
inline void NewSyncResponseMSGItem::clear_from_wxid() {
  if (_impl_.from_wxid_ != nullptr) _impl_.from_wxid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::wechat_proto::SKBuiltinString& NewSyncResponseMSGItem::_internal_from_wxid() const {
  const ::wechat_proto::SKBuiltinString* p = _impl_.from_wxid_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::SKBuiltinString&>(::wechat_proto::_SKBuiltinString_default_instance_);
}
inline const ::wechat_proto::SKBuiltinString& NewSyncResponseMSGItem::from_wxid() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponseMSGItem.from_wxid)
  return _internal_from_wxid();
}
inline void NewSyncResponseMSGItem::unsafe_arena_set_allocated_from_wxid(::wechat_proto::SKBuiltinString* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_wxid_);
  }
  _impl_.from_wxid_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.NewSyncResponseMSGItem.from_wxid)
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::release_from_wxid() {

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wechat_proto::SKBuiltinString* released = _impl_.from_wxid_;
  _impl_.from_wxid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::unsafe_arena_release_from_wxid() {
  // @@protoc_insertion_point(field_release:wechat_proto.NewSyncResponseMSGItem.from_wxid)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wechat_proto::SKBuiltinString* temp = _impl_.from_wxid_;
  _impl_.from_wxid_ = nullptr;
  return temp;
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::_internal_mutable_from_wxid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.from_wxid_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::SKBuiltinString>(GetArenaForAllocation());
    _impl_.from_wxid_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(p);
  }
  return _impl_.from_wxid_;
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::mutable_from_wxid() {
  ::wechat_proto::SKBuiltinString* _msg = _internal_mutable_from_wxid();
  // @@protoc_insertion_point(field_mutable:wechat_proto.NewSyncResponseMSGItem.from_wxid)
  return _msg;
}
inline void NewSyncResponseMSGItem::set_allocated_from_wxid(::wechat_proto::SKBuiltinString* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::SKBuiltinString*>(_impl_.from_wxid_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::SKBuiltinString*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.from_wxid_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.NewSyncResponseMSGItem.from_wxid)
}

// optional .wechat_proto.SKBuiltinString to_wxid = 3;
inline bool NewSyncResponseMSGItem::has_to_wxid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_wxid_ != nullptr);
  return value;
}
inline void NewSyncResponseMSGItem::clear_to_wxid() {
  if (_impl_.to_wxid_ != nullptr) _impl_.to_wxid_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::wechat_proto::SKBuiltinString& NewSyncResponseMSGItem::_internal_to_wxid() const {
  const ::wechat_proto::SKBuiltinString* p = _impl_.to_wxid_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::SKBuiltinString&>(::wechat_proto::_SKBuiltinString_default_instance_);
}
inline const ::wechat_proto::SKBuiltinString& NewSyncResponseMSGItem::to_wxid() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponseMSGItem.to_wxid)
  return _internal_to_wxid();
}
inline void NewSyncResponseMSGItem::unsafe_arena_set_allocated_to_wxid(::wechat_proto::SKBuiltinString* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_wxid_);
  }
  _impl_.to_wxid_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.NewSyncResponseMSGItem.to_wxid)
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::release_to_wxid() {

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::wechat_proto::SKBuiltinString* released = _impl_.to_wxid_;
  _impl_.to_wxid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::unsafe_arena_release_to_wxid() {
  // @@protoc_insertion_point(field_release:wechat_proto.NewSyncResponseMSGItem.to_wxid)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::wechat_proto::SKBuiltinString* temp = _impl_.to_wxid_;
  _impl_.to_wxid_ = nullptr;
  return temp;
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::_internal_mutable_to_wxid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.to_wxid_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::SKBuiltinString>(GetArenaForAllocation());
    _impl_.to_wxid_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(p);
  }
  return _impl_.to_wxid_;
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::mutable_to_wxid() {
  ::wechat_proto::SKBuiltinString* _msg = _internal_mutable_to_wxid();
  // @@protoc_insertion_point(field_mutable:wechat_proto.NewSyncResponseMSGItem.to_wxid)
  return _msg;
}
inline void NewSyncResponseMSGItem::set_allocated_to_wxid(::wechat_proto::SKBuiltinString* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::SKBuiltinString*>(_impl_.to_wxid_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::SKBuiltinString*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_wxid_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.NewSyncResponseMSGItem.to_wxid)
}

// optional uint32 unkonw = 4;
inline bool NewSyncResponseMSGItem::has_unkonw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NewSyncResponseMSGItem::clear_unkonw() {
  _impl_.unkonw_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t NewSyncResponseMSGItem::unkonw() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponseMSGItem.unkonw)
  return _internal_unkonw();
}
inline void NewSyncResponseMSGItem::set_unkonw(::uint32_t value) {
  _internal_set_unkonw(value);
  // @@protoc_insertion_point(field_set:wechat_proto.NewSyncResponseMSGItem.unkonw)
}
inline ::uint32_t NewSyncResponseMSGItem::_internal_unkonw() const {
  return _impl_.unkonw_;
}
inline void NewSyncResponseMSGItem::_internal_set_unkonw(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.unkonw_ = value;
}

// optional .wechat_proto.SKBuiltinString msg_content = 5;
inline bool NewSyncResponseMSGItem::has_msg_content() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.msg_content_ != nullptr);
  return value;
}
inline void NewSyncResponseMSGItem::clear_msg_content() {
  if (_impl_.msg_content_ != nullptr) _impl_.msg_content_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::wechat_proto::SKBuiltinString& NewSyncResponseMSGItem::_internal_msg_content() const {
  const ::wechat_proto::SKBuiltinString* p = _impl_.msg_content_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::SKBuiltinString&>(::wechat_proto::_SKBuiltinString_default_instance_);
}
inline const ::wechat_proto::SKBuiltinString& NewSyncResponseMSGItem::msg_content() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponseMSGItem.msg_content)
  return _internal_msg_content();
}
inline void NewSyncResponseMSGItem::unsafe_arena_set_allocated_msg_content(::wechat_proto::SKBuiltinString* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.msg_content_);
  }
  _impl_.msg_content_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.NewSyncResponseMSGItem.msg_content)
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::release_msg_content() {

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::wechat_proto::SKBuiltinString* released = _impl_.msg_content_;
  _impl_.msg_content_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::unsafe_arena_release_msg_content() {
  // @@protoc_insertion_point(field_release:wechat_proto.NewSyncResponseMSGItem.msg_content)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::wechat_proto::SKBuiltinString* temp = _impl_.msg_content_;
  _impl_.msg_content_ = nullptr;
  return temp;
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::_internal_mutable_msg_content() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.msg_content_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::SKBuiltinString>(GetArenaForAllocation());
    _impl_.msg_content_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(p);
  }
  return _impl_.msg_content_;
}
inline ::wechat_proto::SKBuiltinString* NewSyncResponseMSGItem::mutable_msg_content() {
  ::wechat_proto::SKBuiltinString* _msg = _internal_mutable_msg_content();
  // @@protoc_insertion_point(field_mutable:wechat_proto.NewSyncResponseMSGItem.msg_content)
  return _msg;
}
inline void NewSyncResponseMSGItem::set_allocated_msg_content(::wechat_proto::SKBuiltinString* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::SKBuiltinString*>(_impl_.msg_content_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::SKBuiltinString*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.msg_content_ = reinterpret_cast<::wechat_proto::SKBuiltinString*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.NewSyncResponseMSGItem.msg_content)
}

// -------------------------------------------------------------------

// NewSyncResponse

// optional int32 ret = 1;
inline bool NewSyncResponse::has_ret() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void NewSyncResponse::clear_ret() {
  _impl_.ret_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::int32_t NewSyncResponse::ret() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponse.ret)
  return _internal_ret();
}
inline void NewSyncResponse::set_ret(::int32_t value) {
  _internal_set_ret(value);
  // @@protoc_insertion_point(field_set:wechat_proto.NewSyncResponse.ret)
}
inline ::int32_t NewSyncResponse::_internal_ret() const {
  return _impl_.ret_;
}
inline void NewSyncResponse::_internal_set_ret(::int32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.ret_ = value;
}

// optional .wechat_proto.CmdList cmdList = 2;
inline bool NewSyncResponse::has_cmdlist() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cmdlist_ != nullptr);
  return value;
}
inline void NewSyncResponse::clear_cmdlist() {
  if (_impl_.cmdlist_ != nullptr) _impl_.cmdlist_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::wechat_proto::CmdList& NewSyncResponse::_internal_cmdlist() const {
  const ::wechat_proto::CmdList* p = _impl_.cmdlist_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::CmdList&>(::wechat_proto::_CmdList_default_instance_);
}
inline const ::wechat_proto::CmdList& NewSyncResponse::cmdlist() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponse.cmdList)
  return _internal_cmdlist();
}
inline void NewSyncResponse::unsafe_arena_set_allocated_cmdlist(::wechat_proto::CmdList* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.cmdlist_);
  }
  _impl_.cmdlist_ = reinterpret_cast<::wechat_proto::CmdList*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.NewSyncResponse.cmdList)
}
inline ::wechat_proto::CmdList* NewSyncResponse::release_cmdlist() {

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wechat_proto::CmdList* released = _impl_.cmdlist_;
  _impl_.cmdlist_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::CmdList* NewSyncResponse::unsafe_arena_release_cmdlist() {
  // @@protoc_insertion_point(field_release:wechat_proto.NewSyncResponse.cmdList)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::wechat_proto::CmdList* temp = _impl_.cmdlist_;
  _impl_.cmdlist_ = nullptr;
  return temp;
}
inline ::wechat_proto::CmdList* NewSyncResponse::_internal_mutable_cmdlist() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.cmdlist_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::CmdList>(GetArenaForAllocation());
    _impl_.cmdlist_ = reinterpret_cast<::wechat_proto::CmdList*>(p);
  }
  return _impl_.cmdlist_;
}
inline ::wechat_proto::CmdList* NewSyncResponse::mutable_cmdlist() {
  ::wechat_proto::CmdList* _msg = _internal_mutable_cmdlist();
  // @@protoc_insertion_point(field_mutable:wechat_proto.NewSyncResponse.cmdList)
  return _msg;
}
inline void NewSyncResponse::set_allocated_cmdlist(::wechat_proto::CmdList* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::CmdList*>(_impl_.cmdlist_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::CmdList*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.cmdlist_ = reinterpret_cast<::wechat_proto::CmdList*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.NewSyncResponse.cmdList)
}

// optional uint32 continueFlag = 3;
inline bool NewSyncResponse::has_continueflag() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void NewSyncResponse::clear_continueflag() {
  _impl_.continueflag_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t NewSyncResponse::continueflag() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponse.continueFlag)
  return _internal_continueflag();
}
inline void NewSyncResponse::set_continueflag(::uint32_t value) {
  _internal_set_continueflag(value);
  // @@protoc_insertion_point(field_set:wechat_proto.NewSyncResponse.continueFlag)
}
inline ::uint32_t NewSyncResponse::_internal_continueflag() const {
  return _impl_.continueflag_;
}
inline void NewSyncResponse::_internal_set_continueflag(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.continueflag_ = value;
}

// optional .wechat_proto.SKBuiltinString_ keyBuf = 4;
inline bool NewSyncResponse::has_keybuf() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.keybuf_ != nullptr);
  return value;
}
inline void NewSyncResponse::clear_keybuf() {
  if (_impl_.keybuf_ != nullptr) _impl_.keybuf_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::wechat_proto::SKBuiltinString_& NewSyncResponse::_internal_keybuf() const {
  const ::wechat_proto::SKBuiltinString_* p = _impl_.keybuf_;
  return p != nullptr ? *p : reinterpret_cast<const ::wechat_proto::SKBuiltinString_&>(::wechat_proto::_SKBuiltinString__default_instance_);
}
inline const ::wechat_proto::SKBuiltinString_& NewSyncResponse::keybuf() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponse.keyBuf)
  return _internal_keybuf();
}
inline void NewSyncResponse::unsafe_arena_set_allocated_keybuf(::wechat_proto::SKBuiltinString_* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.keybuf_);
  }
  _impl_.keybuf_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:wechat_proto.NewSyncResponse.keyBuf)
}
inline ::wechat_proto::SKBuiltinString_* NewSyncResponse::release_keybuf() {

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::wechat_proto::SKBuiltinString_* released = _impl_.keybuf_;
  _impl_.keybuf_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
  released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  if (GetArenaForAllocation() == nullptr) {
    delete old;
  }
#else   // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return released;
}
inline ::wechat_proto::SKBuiltinString_* NewSyncResponse::unsafe_arena_release_keybuf() {
  // @@protoc_insertion_point(field_release:wechat_proto.NewSyncResponse.keyBuf)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::wechat_proto::SKBuiltinString_* temp = _impl_.keybuf_;
  _impl_.keybuf_ = nullptr;
  return temp;
}
inline ::wechat_proto::SKBuiltinString_* NewSyncResponse::_internal_mutable_keybuf() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.keybuf_ == nullptr) {
    auto* p = CreateMaybeMessage<::wechat_proto::SKBuiltinString_>(GetArenaForAllocation());
    _impl_.keybuf_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(p);
  }
  return _impl_.keybuf_;
}
inline ::wechat_proto::SKBuiltinString_* NewSyncResponse::mutable_keybuf() {
  ::wechat_proto::SKBuiltinString_* _msg = _internal_mutable_keybuf();
  // @@protoc_insertion_point(field_mutable:wechat_proto.NewSyncResponse.keyBuf)
  return _msg;
}
inline void NewSyncResponse::set_allocated_keybuf(::wechat_proto::SKBuiltinString_* value) {
  ::google::protobuf::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast<::wechat_proto::SKBuiltinString_*>(_impl_.keybuf_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena =
        ::google::protobuf::Arena::InternalGetOwningArena(reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value));
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.keybuf_ = reinterpret_cast<::wechat_proto::SKBuiltinString_*>(value);
  // @@protoc_insertion_point(field_set_allocated:wechat_proto.NewSyncResponse.keyBuf)
}

// optional uint32 status = 5;
inline bool NewSyncResponse::has_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void NewSyncResponse::clear_status() {
  _impl_.status_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t NewSyncResponse::status() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponse.status)
  return _internal_status();
}
inline void NewSyncResponse::set_status(::uint32_t value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:wechat_proto.NewSyncResponse.status)
}
inline ::uint32_t NewSyncResponse::_internal_status() const {
  return _impl_.status_;
}
inline void NewSyncResponse::_internal_set_status(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.status_ = value;
}

// optional uint32 onlineVersion = 6;
inline bool NewSyncResponse::has_onlineversion() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void NewSyncResponse::clear_onlineversion() {
  _impl_.onlineversion_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::uint32_t NewSyncResponse::onlineversion() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponse.onlineVersion)
  return _internal_onlineversion();
}
inline void NewSyncResponse::set_onlineversion(::uint32_t value) {
  _internal_set_onlineversion(value);
  // @@protoc_insertion_point(field_set:wechat_proto.NewSyncResponse.onlineVersion)
}
inline ::uint32_t NewSyncResponse::_internal_onlineversion() const {
  return _impl_.onlineversion_;
}
inline void NewSyncResponse::_internal_set_onlineversion(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.onlineversion_ = value;
}

// optional uint32 svrTime = 7;
inline bool NewSyncResponse::has_svrtime() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void NewSyncResponse::clear_svrtime() {
  _impl_.svrtime_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::uint32_t NewSyncResponse::svrtime() const {
  // @@protoc_insertion_point(field_get:wechat_proto.NewSyncResponse.svrTime)
  return _internal_svrtime();
}
inline void NewSyncResponse::set_svrtime(::uint32_t value) {
  _internal_set_svrtime(value);
  // @@protoc_insertion_point(field_set:wechat_proto.NewSyncResponse.svrTime)
}
inline ::uint32_t NewSyncResponse::_internal_svrtime() const {
  return _impl_.svrtime_;
}
inline void NewSyncResponse::_internal_set_svrtime(::uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.svrtime_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace wechat_proto


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_wechat_2eproto_2epb_2eh
