// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: wechat.proto

#include "wechat.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace wechat_proto {
        template <typename>
PROTOBUF_CONSTEXPR SKBuiltinString::SKBuiltinString(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.str_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
    } {}
struct SKBuiltinStringDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SKBuiltinStringDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SKBuiltinStringDefaultTypeInternal() {}
  union {
    SKBuiltinString _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SKBuiltinStringDefaultTypeInternal _SKBuiltinString_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR SKBuiltinString_::SKBuiltinString_(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.buffer_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.len_)*/ 0u,
    } {}
struct SKBuiltinString_DefaultTypeInternal {
  PROTOBUF_CONSTEXPR SKBuiltinString_DefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SKBuiltinString_DefaultTypeInternal() {}
  union {
    SKBuiltinString_ _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SKBuiltinString_DefaultTypeInternal _SKBuiltinString__default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BaseRequest::BaseRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.session_key_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.device_id_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.os_type_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.uin_)*/ 0u,
      /*decltype(_impl_.client_version_)*/ 0u,
      /*decltype(_impl_.scene_)*/ 0u,
    } {}
struct BaseRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseRequestDefaultTypeInternal() {}
  union {
    BaseRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseRequestDefaultTypeInternal _BaseRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetCDNDnsRequest::GetCDNDnsRequest(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.clientip_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.baserequest_)*/ nullptr,
      /*decltype(_impl_.scene_)*/ 0u,
    } {}
struct GetCDNDnsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCDNDnsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCDNDnsRequestDefaultTypeInternal() {}
  union {
    GetCDNDnsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCDNDnsRequestDefaultTypeInternal _GetCDNDnsRequest_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR BaseResponse::BaseResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.errmsg_)*/ nullptr,
      /*decltype(_impl_.ret_)*/ 0,
    } {}
struct BaseResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BaseResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BaseResponseDefaultTypeInternal() {}
  union {
    BaseResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BaseResponseDefaultTypeInternal _BaseResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR GetCDNDnsResponse::GetCDNDnsResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.baseresponse_)*/ nullptr,
      /*decltype(_impl_.dnsinfo_)*/ nullptr,
      /*decltype(_impl_.snsdnsinfo_)*/ nullptr,
      /*decltype(_impl_.appdnsinfo_)*/ nullptr,
      /*decltype(_impl_.cdndnsrulebuf_)*/ nullptr,
      /*decltype(_impl_.fakecdndnsrulebuf_)*/ nullptr,
      /*decltype(_impl_.fakednsinfo_)*/ nullptr,
      /*decltype(_impl_.defaultconfig_)*/ nullptr,
      /*decltype(_impl_.disasterconfig_)*/ nullptr,
      /*decltype(_impl_.getcdndnsintervalms_)*/ 0,
      /*decltype(_impl_.nextipv6_)*/ 0,
    } {}
struct GetCDNDnsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCDNDnsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCDNDnsResponseDefaultTypeInternal() {}
  union {
    GetCDNDnsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCDNDnsResponseDefaultTypeInternal _GetCDNDnsResponse_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CDNDnsInfo::CDNDnsInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.frontiplist_)*/ {},
      /*decltype(_impl_.zoneiplist_)*/ {},
      /*decltype(_impl_.frontipportlist_)*/ {},
      /*decltype(_impl_.zoneipportlist_)*/ {},
      /*decltype(_impl_.zonedomain_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.authkey_)*/ nullptr,
      /*decltype(_impl_.newauthkey_)*/ nullptr,
      /*decltype(_impl_.ver_)*/ 0u,
      /*decltype(_impl_.uin_)*/ 0u,
      /*decltype(_impl_.expiretime_)*/ 0u,
      /*decltype(_impl_.frontid_)*/ 0,
      /*decltype(_impl_.frontipcount_)*/ 0,
      /*decltype(_impl_.zoneid_)*/ 0,
      /*decltype(_impl_.zoneipcount_)*/ 0,
      /*decltype(_impl_.frontipportcount_)*/ 0,
      /*decltype(_impl_.zoneipportcount_)*/ 0,
      /*decltype(_impl_.fakeuin_)*/ 0u,
    } {}
struct CDNDnsInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDNDnsInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDNDnsInfoDefaultTypeInternal() {}
  union {
    CDNDnsInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDNDnsInfoDefaultTypeInternal _CDNDnsInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CDNClientConfig::CDNClientConfig(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.c2cshowerrordelayms_)*/ 0,
      /*decltype(_impl_.snsshowerrordelayms_)*/ 0,
      /*decltype(_impl_.c2cretryinterval_)*/ 0,
      /*decltype(_impl_.snsretryinterval_)*/ 0,
      /*decltype(_impl_.c2crwtimeout_)*/ 0,
      /*decltype(_impl_.snsrwtimeout_)*/ 0,
    } {}
struct CDNClientConfigDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDNClientConfigDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDNClientConfigDefaultTypeInternal() {}
  union {
    CDNClientConfig _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDNClientConfigDefaultTypeInternal _CDNClientConfig_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CDNDnsPortInfo::CDNDnsPortInfo(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.portlist_)*/ {},
      /*decltype(_impl_.portcount_)*/ 0u,
    } {}
struct CDNDnsPortInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CDNDnsPortInfoDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CDNDnsPortInfoDefaultTypeInternal() {}
  union {
    CDNDnsPortInfo _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CDNDnsPortInfoDefaultTypeInternal _CDNDnsPortInfo_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR DATA::DATA(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.data_)*/ {
          &::_pbi::fixed_address_empty_string,
          ::_pbi::ConstantInitialized{},
      },
      /*decltype(_impl_.len_)*/ 0u,
    } {}
struct DATADefaultTypeInternal {
  PROTOBUF_CONSTEXPR DATADefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DATADefaultTypeInternal() {}
  union {
    DATA _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DATADefaultTypeInternal _DATA_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CmdItem::CmdItem(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.cmd_buf_)*/ nullptr,
      /*decltype(_impl_.cmd_id_)*/ 0u,
    } {}
struct CmdItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CmdItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CmdItemDefaultTypeInternal() {}
  union {
    CmdItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CmdItemDefaultTypeInternal _CmdItem_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR CmdList::CmdList(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.item_list_)*/ {},
      /*decltype(_impl_.count_)*/ 0u,
    } {}
struct CmdListDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CmdListDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CmdListDefaultTypeInternal() {}
  union {
    CmdList _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CmdListDefaultTypeInternal _CmdList_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR NewSyncResponseMSGItem::NewSyncResponseMSGItem(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.from_wxid_)*/ nullptr,
      /*decltype(_impl_.to_wxid_)*/ nullptr,
      /*decltype(_impl_.msg_content_)*/ nullptr,
      /*decltype(_impl_.mgs_id_)*/ 0u,
      /*decltype(_impl_.unkonw_)*/ 0u,
    } {}
struct NewSyncResponseMSGItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewSyncResponseMSGItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewSyncResponseMSGItemDefaultTypeInternal() {}
  union {
    NewSyncResponseMSGItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewSyncResponseMSGItemDefaultTypeInternal _NewSyncResponseMSGItem_default_instance_;
        template <typename>
PROTOBUF_CONSTEXPR NewSyncResponse::NewSyncResponse(::_pbi::ConstantInitialized)
    : _impl_{
      /*decltype(_impl_._has_bits_)*/ {},
      /*decltype(_impl_._cached_size_)*/ {},
      /*decltype(_impl_.cmdlist_)*/ nullptr,
      /*decltype(_impl_.keybuf_)*/ nullptr,
      /*decltype(_impl_.ret_)*/ 0,
      /*decltype(_impl_.continueflag_)*/ 0u,
      /*decltype(_impl_.status_)*/ 0u,
      /*decltype(_impl_.onlineversion_)*/ 0u,
      /*decltype(_impl_.svrtime_)*/ 0u,
    } {}
struct NewSyncResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR NewSyncResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~NewSyncResponseDefaultTypeInternal() {}
  union {
    NewSyncResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 NewSyncResponseDefaultTypeInternal _NewSyncResponse_default_instance_;
}  // namespace wechat_proto
static ::_pb::Metadata file_level_metadata_wechat_2eproto[14];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_wechat_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_wechat_2eproto = nullptr;
const ::uint32_t TableStruct_wechat_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::wechat_proto::SKBuiltinString, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::SKBuiltinString, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::SKBuiltinString, _impl_.str_),
    0,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::SKBuiltinString_, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::SKBuiltinString_, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::SKBuiltinString_, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::SKBuiltinString_, _impl_.buffer_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseRequest, _impl_.session_key_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseRequest, _impl_.uin_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseRequest, _impl_.device_id_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseRequest, _impl_.client_version_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseRequest, _impl_.os_type_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseRequest, _impl_.scene_),
    0,
    3,
    1,
    4,
    2,
    5,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsRequest, _impl_.baserequest_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsRequest, _impl_.clientip_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsRequest, _impl_.scene_),
    1,
    0,
    2,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseResponse, _impl_.ret_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::BaseResponse, _impl_.errmsg_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.baseresponse_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.dnsinfo_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.snsdnsinfo_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.appdnsinfo_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.cdndnsrulebuf_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.fakecdndnsrulebuf_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.fakednsinfo_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.getcdndnsintervalms_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.defaultconfig_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.disasterconfig_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::GetCDNDnsResponse, _impl_.nextipv6_),
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    9,
    7,
    8,
    10,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.ver_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.uin_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.expiretime_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.frontid_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.frontipcount_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.frontiplist_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.zonedomain_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.authkey_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.zoneid_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.zoneipcount_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.zoneiplist_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.frontipportlist_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.zoneipportlist_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.frontipportcount_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.zoneipportcount_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.fakeuin_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsInfo, _impl_.newauthkey_),
    3,
    4,
    5,
    6,
    7,
    ~0u,
    0,
    1,
    8,
    9,
    ~0u,
    ~0u,
    ~0u,
    10,
    11,
    12,
    2,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNClientConfig, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNClientConfig, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNClientConfig, _impl_.c2cshowerrordelayms_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNClientConfig, _impl_.snsshowerrordelayms_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNClientConfig, _impl_.c2cretryinterval_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNClientConfig, _impl_.snsretryinterval_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNClientConfig, _impl_.c2crwtimeout_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNClientConfig, _impl_.snsrwtimeout_),
    0,
    1,
    2,
    3,
    4,
    5,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsPortInfo, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsPortInfo, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsPortInfo, _impl_.portcount_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CDNDnsPortInfo, _impl_.portlist_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::DATA, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::DATA, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::DATA, _impl_.len_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::DATA, _impl_.data_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CmdItem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CmdItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CmdItem, _impl_.cmd_id_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CmdItem, _impl_.cmd_buf_),
    1,
    0,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CmdList, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CmdList, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CmdList, _impl_.count_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::CmdList, _impl_.item_list_),
    0,
    ~0u,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponseMSGItem, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponseMSGItem, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponseMSGItem, _impl_.mgs_id_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponseMSGItem, _impl_.from_wxid_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponseMSGItem, _impl_.to_wxid_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponseMSGItem, _impl_.unkonw_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponseMSGItem, _impl_.msg_content_),
    3,
    0,
    1,
    4,
    2,
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponse, _impl_.ret_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponse, _impl_.cmdlist_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponse, _impl_.continueflag_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponse, _impl_.keybuf_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponse, _impl_.onlineversion_),
    PROTOBUF_FIELD_OFFSET(::wechat_proto::NewSyncResponse, _impl_.svrtime_),
    2,
    0,
    3,
    1,
    4,
    5,
    6,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 9, -1, sizeof(::wechat_proto::SKBuiltinString)},
        {10, 20, -1, sizeof(::wechat_proto::SKBuiltinString_)},
        {22, 36, -1, sizeof(::wechat_proto::BaseRequest)},
        {42, 53, -1, sizeof(::wechat_proto::GetCDNDnsRequest)},
        {56, 66, -1, sizeof(::wechat_proto::BaseResponse)},
        {68, 87, -1, sizeof(::wechat_proto::GetCDNDnsResponse)},
        {98, 123, -1, sizeof(::wechat_proto::CDNDnsInfo)},
        {140, 154, -1, sizeof(::wechat_proto::CDNClientConfig)},
        {160, 170, -1, sizeof(::wechat_proto::CDNDnsPortInfo)},
        {172, 182, -1, sizeof(::wechat_proto::DATA)},
        {184, 194, -1, sizeof(::wechat_proto::CmdItem)},
        {196, 206, -1, sizeof(::wechat_proto::CmdList)},
        {208, 221, -1, sizeof(::wechat_proto::NewSyncResponseMSGItem)},
        {226, 241, -1, sizeof(::wechat_proto::NewSyncResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::wechat_proto::_SKBuiltinString_default_instance_._instance,
    &::wechat_proto::_SKBuiltinString__default_instance_._instance,
    &::wechat_proto::_BaseRequest_default_instance_._instance,
    &::wechat_proto::_GetCDNDnsRequest_default_instance_._instance,
    &::wechat_proto::_BaseResponse_default_instance_._instance,
    &::wechat_proto::_GetCDNDnsResponse_default_instance_._instance,
    &::wechat_proto::_CDNDnsInfo_default_instance_._instance,
    &::wechat_proto::_CDNClientConfig_default_instance_._instance,
    &::wechat_proto::_CDNDnsPortInfo_default_instance_._instance,
    &::wechat_proto::_DATA_default_instance_._instance,
    &::wechat_proto::_CmdItem_default_instance_._instance,
    &::wechat_proto::_CmdList_default_instance_._instance,
    &::wechat_proto::_NewSyncResponseMSGItem_default_instance_._instance,
    &::wechat_proto::_NewSyncResponse_default_instance_._instance,
};
const char descriptor_table_protodef_wechat_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\014wechat.proto\022\014wechat_proto\"\036\n\017SKBuilti"
    "nString\022\013\n\003str\030\001 \001(\t\"/\n\020SKBuiltinString_"
    "\022\013\n\003len\030\001 \001(\r\022\016\n\006buffer\030\002 \001(\014\"z\n\013BaseReq"
    "uest\022\023\n\013session_key\030\001 \001(\014\022\013\n\003uin\030\002 \001(\r\022\021"
    "\n\tdevice_id\030\003 \001(\014\022\026\n\016client_version\030\004 \001("
    "\r\022\017\n\007os_type\030\005 \001(\t\022\r\n\005scene\030\006 \001(\r\"c\n\020Get"
    "CDNDnsRequest\022.\n\013baseRequest\030\001 \001(\0132\031.wec"
    "hat_proto.BaseRequest\022\020\n\010clientIp\030\002 \001(\t\022"
    "\r\n\005scene\030\003 \001(\r\"J\n\014BaseResponse\022\013\n\003ret\030\001 "
    "\001(\005\022-\n\006errMsg\030\002 \001(\0132\035.wechat_proto.SKBui"
    "ltinString\"\211\004\n\021GetCDNDnsResponse\0220\n\014base"
    "Response\030\001 \001(\0132\032.wechat_proto.BaseRespon"
    "se\022)\n\007dnsInfo\030\002 \001(\0132\030.wechat_proto.CDNDn"
    "sInfo\022,\n\nsnsDnsInfo\030\003 \001(\0132\030.wechat_proto"
    ".CDNDnsInfo\022,\n\nappDnsInfo\030\004 \001(\0132\030.wechat"
    "_proto.CDNDnsInfo\0225\n\rcdndnsRuleBuf\030\005 \001(\013"
    "2\036.wechat_proto.SKBuiltinString_\0229\n\021fake"
    "CdndnsRuleBuf\030\006 \001(\0132\036.wechat_proto.SKBui"
    "ltinString_\022-\n\013fakeDnsInfo\030\007 \001(\0132\030.wecha"
    "t_proto.CDNDnsInfo\022\033\n\023getCdnDnsIntervalM"
    "s\030\010 \001(\005\0224\n\rdefaultConfig\030\t \001(\0132\035.wechat_"
    "proto.CDNClientConfig\0225\n\016disasterConfig\030"
    "\n \001(\0132\035.wechat_proto.CDNClientConfig\022\020\n\010"
    "nextIpv6\030\013 \001(\005\"\227\004\n\nCDNDnsInfo\022\013\n\003ver\030\001 \001"
    "(\r\022\013\n\003uin\030\002 \001(\r\022\022\n\nexpireTime\030\003 \001(\r\022\017\n\007f"
    "rontId\030\004 \001(\005\022\024\n\014frontIpcount\030\005 \001(\005\0222\n\013fr"
    "ontIplist\030\006 \003(\0132\035.wechat_proto.SKBuiltin"
    "String\022\022\n\nzoneDomain\030\007 \001(\t\022/\n\007authKey\030\010 "
    "\001(\0132\036.wechat_proto.SKBuiltinString_\022\016\n\006z"
    "oneId\030\t \001(\005\022\023\n\013zoneIpcount\030\n \001(\005\0221\n\nzone"
    "Iplist\030\013 \003(\0132\035.wechat_proto.SKBuiltinStr"
    "ing\0225\n\017frontIpportList\030\014 \003(\0132\034.wechat_pr"
    "oto.CDNDnsPortInfo\0224\n\016zoneIpportList\030\r \003"
    "(\0132\034.wechat_proto.CDNDnsPortInfo\022\030\n\020fron"
    "tIpportCount\030\016 \001(\005\022\027\n\017zoneIpportCount\030\017 "
    "\001(\005\022\017\n\007fakeUin\030\020 \001(\r\0222\n\nnewAuthKey\030\021 \001(\013"
    "2\036.wechat_proto.SKBuiltinString_\"\253\001\n\017CDN"
    "ClientConfig\022\033\n\023c2CshowErrorDelayMs\030\001 \001("
    "\005\022\033\n\023snsshowErrorDelayMs\030\002 \001(\005\022\030\n\020c2Cret"
    "ryInterval\030\003 \001(\005\022\030\n\020snsretryInterval\030\004 \001"
    "(\005\022\024\n\014c2Crwtimeout\030\005 \001(\005\022\024\n\014snsrwtimeout"
    "\030\006 \001(\005\"5\n\016CDNDnsPortInfo\022\021\n\tportCount\030\001 "
    "\001(\r\022\020\n\010portList\030\002 \003(\r\"!\n\004DATA\022\013\n\003len\030\001 \001"
    "(\r\022\014\n\004data\030\002 \001(\014\">\n\007CmdItem\022\016\n\006cmd_id\030\001 "
    "\001(\r\022#\n\007cmd_buf\030\002 \001(\0132\022.wechat_proto.DATA"
    "\"B\n\007CmdList\022\r\n\005count\030\001 \001(\r\022(\n\titem_list\030"
    "\002 \003(\0132\025.wechat_proto.CmdItem\"\316\001\n\026NewSync"
    "ResponseMSGItem\022\016\n\006mgs_id\030\001 \001(\r\0220\n\tfrom_"
    "wxid\030\002 \001(\0132\035.wechat_proto.SKBuiltinStrin"
    "g\022.\n\007to_wxid\030\003 \001(\0132\035.wechat_proto.SKBuil"
    "tinString\022\016\n\006unkonw\030\004 \001(\r\0222\n\013msg_content"
    "\030\005 \001(\0132\035.wechat_proto.SKBuiltinString\"\304\001"
    "\n\017NewSyncResponse\022\013\n\003ret\030\001 \001(\005\022&\n\007cmdLis"
    "t\030\002 \001(\0132\025.wechat_proto.CmdList\022\024\n\014contin"
    "ueFlag\030\003 \001(\r\022.\n\006keyBuf\030\004 \001(\0132\036.wechat_pr"
    "oto.SKBuiltinString_\022\016\n\006status\030\005 \001(\r\022\025\n\r"
    "onlineVersion\030\006 \001(\r\022\017\n\007svrTime\030\007 \001(\r"
};
static ::absl::once_flag descriptor_table_wechat_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_wechat_2eproto = {
    false,
    false,
    2276,
    descriptor_table_protodef_wechat_2eproto,
    "wechat.proto",
    &descriptor_table_wechat_2eproto_once,
    nullptr,
    0,
    14,
    schemas,
    file_default_instances,
    TableStruct_wechat_2eproto::offsets,
    file_level_metadata_wechat_2eproto,
    file_level_enum_descriptors_wechat_2eproto,
    file_level_service_descriptors_wechat_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_wechat_2eproto_getter() {
  return &descriptor_table_wechat_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_wechat_2eproto(&descriptor_table_wechat_2eproto);
namespace wechat_proto {
// ===================================================================

class SKBuiltinString::_Internal {
 public:
  using HasBits = decltype(std::declval<SKBuiltinString>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SKBuiltinString, _impl_._has_bits_);
  static void set_has_str(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SKBuiltinString::SKBuiltinString(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.SKBuiltinString)
}
SKBuiltinString::SKBuiltinString(const SKBuiltinString& from) : ::google::protobuf::Message() {
  SKBuiltinString* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.str_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.str_.Set(from._internal_str(), _this->GetArenaForAllocation());
  }

  // @@protoc_insertion_point(copy_constructor:wechat_proto.SKBuiltinString)
}
inline void SKBuiltinString::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.str_){},
  };
  _impl_.str_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.str_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SKBuiltinString::~SKBuiltinString() {
  // @@protoc_insertion_point(destructor:wechat_proto.SKBuiltinString)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SKBuiltinString::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.str_.Destroy();
}
void SKBuiltinString::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SKBuiltinString::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.SKBuiltinString)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.str_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SKBuiltinString::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 40, 2> SKBuiltinString::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SKBuiltinString, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SKBuiltinString_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string str = 1;
    {::_pbi::TcParser::FastSS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(SKBuiltinString, _impl_.str_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string str = 1;
    {PROTOBUF_FIELD_OFFSET(SKBuiltinString, _impl_.str_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\34\3\0\0\0\0\0\0"
    "wechat_proto.SKBuiltinString"
    "str"
  }},
};

::uint8_t* SKBuiltinString::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.SKBuiltinString)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional string str = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_str();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "wechat_proto.SKBuiltinString.str");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.SKBuiltinString)
  return target;
}

::size_t SKBuiltinString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.SKBuiltinString)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string str = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_str());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SKBuiltinString::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SKBuiltinString::MergeImpl
};
const ::google::protobuf::Message::ClassData*SKBuiltinString::GetClassData() const { return &_class_data_; }


void SKBuiltinString::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SKBuiltinString*>(&to_msg);
  auto& from = static_cast<const SKBuiltinString&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.SKBuiltinString)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_str(from._internal_str());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SKBuiltinString::CopyFrom(const SKBuiltinString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.SKBuiltinString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SKBuiltinString::IsInitialized() const {
  return true;
}

void SKBuiltinString::InternalSwap(SKBuiltinString* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.str_, lhs_arena,
                                       &other->_impl_.str_, rhs_arena);
}

::google::protobuf::Metadata SKBuiltinString::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[0]);
}
// ===================================================================

class SKBuiltinString_::_Internal {
 public:
  using HasBits = decltype(std::declval<SKBuiltinString_>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(SKBuiltinString_, _impl_._has_bits_);
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_buffer(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

SKBuiltinString_::SKBuiltinString_(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.SKBuiltinString_)
}
SKBuiltinString_::SKBuiltinString_(const SKBuiltinString_& from) : ::google::protobuf::Message() {
  SKBuiltinString_* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.buffer_){},
      decltype(_impl_.len_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.buffer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.buffer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.buffer_.Set(from._internal_buffer(), _this->GetArenaForAllocation());
  }
  _this->_impl_.len_ = from._impl_.len_;

  // @@protoc_insertion_point(copy_constructor:wechat_proto.SKBuiltinString_)
}
inline void SKBuiltinString_::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.buffer_){},
      decltype(_impl_.len_){0u},
  };
  _impl_.buffer_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.buffer_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
SKBuiltinString_::~SKBuiltinString_() {
  // @@protoc_insertion_point(destructor:wechat_proto.SKBuiltinString_)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void SKBuiltinString_::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.buffer_.Destroy();
}
void SKBuiltinString_::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void SKBuiltinString_::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.SKBuiltinString_)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.buffer_.ClearNonDefaultToEmpty();
  }
  _impl_.len_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* SKBuiltinString_::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> SKBuiltinString_::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(SKBuiltinString_, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_SKBuiltinString__default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bytes buffer = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(SKBuiltinString_, _impl_.buffer_)}},
    // optional uint32 len = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(SKBuiltinString_, _impl_.len_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(SKBuiltinString_, _impl_.len_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 len = 1;
    {PROTOBUF_FIELD_OFFSET(SKBuiltinString_, _impl_.len_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes buffer = 2;
    {PROTOBUF_FIELD_OFFSET(SKBuiltinString_, _impl_.buffer_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* SKBuiltinString_::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.SKBuiltinString_)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_len(), target);
  }

  // optional bytes buffer = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_buffer();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.SKBuiltinString_)
  return target;
}

::size_t SKBuiltinString_::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.SKBuiltinString_)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes buffer = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_buffer());
    }

    // optional uint32 len = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_len());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData SKBuiltinString_::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    SKBuiltinString_::MergeImpl
};
const ::google::protobuf::Message::ClassData*SKBuiltinString_::GetClassData() const { return &_class_data_; }


void SKBuiltinString_::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<SKBuiltinString_*>(&to_msg);
  auto& from = static_cast<const SKBuiltinString_&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.SKBuiltinString_)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_buffer(from._internal_buffer());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SKBuiltinString_::CopyFrom(const SKBuiltinString_& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.SKBuiltinString_)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool SKBuiltinString_::IsInitialized() const {
  return true;
}

void SKBuiltinString_::InternalSwap(SKBuiltinString_* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.buffer_, lhs_arena,
                                       &other->_impl_.buffer_, rhs_arena);
        swap(_impl_.len_, other->_impl_.len_);
}

::google::protobuf::Metadata SKBuiltinString_::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[1]);
}
// ===================================================================

class BaseRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_._has_bits_);
  static void set_has_session_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_uin(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_device_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_client_version(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_os_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_scene(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

BaseRequest::BaseRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.BaseRequest)
}
BaseRequest::BaseRequest(const BaseRequest& from) : ::google::protobuf::Message() {
  BaseRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.session_key_){},
      decltype(_impl_.device_id_){},
      decltype(_impl_.os_type_){},
      decltype(_impl_.uin_){},
      decltype(_impl_.client_version_){},
      decltype(_impl_.scene_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.session_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.session_key_.Set(from._internal_session_key(), _this->GetArenaForAllocation());
  }
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.device_id_.Set(from._internal_device_id(), _this->GetArenaForAllocation());
  }
  _impl_.os_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.os_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.os_type_.Set(from._internal_os_type(), _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.uin_, &from._impl_.uin_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.scene_) -
    reinterpret_cast<char*>(&_impl_.uin_)) + sizeof(_impl_.scene_));

  // @@protoc_insertion_point(copy_constructor:wechat_proto.BaseRequest)
}
inline void BaseRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.session_key_){},
      decltype(_impl_.device_id_){},
      decltype(_impl_.os_type_){},
      decltype(_impl_.uin_){0u},
      decltype(_impl_.client_version_){0u},
      decltype(_impl_.scene_){0u},
  };
  _impl_.session_key_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.session_key_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.device_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.device_id_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.os_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.os_type_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
BaseRequest::~BaseRequest() {
  // @@protoc_insertion_point(destructor:wechat_proto.BaseRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BaseRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.session_key_.Destroy();
  _impl_.device_id_.Destroy();
  _impl_.os_type_.Destroy();
}
void BaseRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.BaseRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.session_key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.device_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.os_type_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000038u) {
    ::memset(&_impl_.uin_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.scene_) -
        reinterpret_cast<char*>(&_impl_.uin_)) + sizeof(_impl_.scene_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BaseRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 40, 2> BaseRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_BaseRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional bytes session_key = 1;
    {::_pbi::TcParser::FastBS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.session_key_)}},
    // optional uint32 uin = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BaseRequest, _impl_.uin_), 3>(),
     {16, 3, 0, PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.uin_)}},
    // optional bytes device_id = 3;
    {::_pbi::TcParser::FastBS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.device_id_)}},
    // optional uint32 client_version = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BaseRequest, _impl_.client_version_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.client_version_)}},
    // optional string os_type = 5;
    {::_pbi::TcParser::FastSS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.os_type_)}},
    // optional uint32 scene = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BaseRequest, _impl_.scene_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.scene_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional bytes session_key = 1;
    {PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.session_key_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 uin = 2;
    {PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.uin_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes device_id = 3;
    {PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.device_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
    // optional uint32 client_version = 4;
    {PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.client_version_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string os_type = 5;
    {PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.os_type_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 scene = 6;
    {PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.scene_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\30\0\0\0\0\7\0\0"
    "wechat_proto.BaseRequest"
    "os_type"
  }},
};

::uint8_t* BaseRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.BaseRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bytes session_key = 1;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_session_key();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // optional uint32 uin = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_uin(), target);
  }

  // optional bytes device_id = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_device_id();
    target = stream->WriteBytesMaybeAliased(3, _s, target);
  }

  // optional uint32 client_version = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_client_version(), target);
  }

  // optional string os_type = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_os_type();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "wechat_proto.BaseRequest.os_type");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // optional uint32 scene = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_scene(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.BaseRequest)
  return target;
}

::size_t BaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.BaseRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional bytes session_key = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_session_key());
    }

    // optional bytes device_id = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_device_id());
    }

    // optional string os_type = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_os_type());
    }

    // optional uint32 uin = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_uin());
    }

    // optional uint32 client_version = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_client_version());
    }

    // optional uint32 scene = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_scene());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BaseRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BaseRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*BaseRequest::GetClassData() const { return &_class_data_; }


void BaseRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BaseRequest*>(&to_msg);
  auto& from = static_cast<const BaseRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.BaseRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_session_key(from._internal_session_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_device_id(from._internal_device_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_os_type(from._internal_os_type());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.uin_ = from._impl_.uin_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.client_version_ = from._impl_.client_version_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.scene_ = from._impl_.scene_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BaseRequest::CopyFrom(const BaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.BaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BaseRequest::IsInitialized() const {
  return true;
}

void BaseRequest::InternalSwap(BaseRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.session_key_, lhs_arena,
                                       &other->_impl_.session_key_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.device_id_, lhs_arena,
                                       &other->_impl_.device_id_, rhs_arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.os_type_, lhs_arena,
                                       &other->_impl_.os_type_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.scene_)
      + sizeof(BaseRequest::_impl_.scene_)
      - PROTOBUF_FIELD_OFFSET(BaseRequest, _impl_.uin_)>(
          reinterpret_cast<char*>(&_impl_.uin_),
          reinterpret_cast<char*>(&other->_impl_.uin_));
}

::google::protobuf::Metadata BaseRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[2]);
}
// ===================================================================

class GetCDNDnsRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCDNDnsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetCDNDnsRequest, _impl_._has_bits_);
  static const ::wechat_proto::BaseRequest& baserequest(const GetCDNDnsRequest* msg);
  static void set_has_baserequest(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clientip(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_scene(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::wechat_proto::BaseRequest& GetCDNDnsRequest::_Internal::baserequest(const GetCDNDnsRequest* msg) {
  return *msg->_impl_.baserequest_;
}
GetCDNDnsRequest::GetCDNDnsRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.GetCDNDnsRequest)
}
GetCDNDnsRequest::GetCDNDnsRequest(const GetCDNDnsRequest& from) : ::google::protobuf::Message() {
  GetCDNDnsRequest* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.clientip_){},
      decltype(_impl_.baserequest_){nullptr},
      decltype(_impl_.scene_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.clientip_.Set(from._internal_clientip(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.baserequest_ = new ::wechat_proto::BaseRequest(*from._impl_.baserequest_);
  }
  _this->_impl_.scene_ = from._impl_.scene_;

  // @@protoc_insertion_point(copy_constructor:wechat_proto.GetCDNDnsRequest)
}
inline void GetCDNDnsRequest::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.clientip_){},
      decltype(_impl_.baserequest_){nullptr},
      decltype(_impl_.scene_){0u},
  };
  _impl_.clientip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.clientip_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
GetCDNDnsRequest::~GetCDNDnsRequest() {
  // @@protoc_insertion_point(destructor:wechat_proto.GetCDNDnsRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetCDNDnsRequest::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.clientip_.Destroy();
  if (this != internal_default_instance()) delete _impl_.baserequest_;
}
void GetCDNDnsRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetCDNDnsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.GetCDNDnsRequest)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.clientip_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.baserequest_ != nullptr);
      _impl_.baserequest_->Clear();
    }
  }
  _impl_.scene_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetCDNDnsRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 1, 46, 2> GetCDNDnsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetCDNDnsRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetCDNDnsRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .wechat_proto.BaseRequest baseRequest = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 1, 0, PROTOBUF_FIELD_OFFSET(GetCDNDnsRequest, _impl_.baserequest_)}},
    // optional string clientIp = 2;
    {::_pbi::TcParser::FastSS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetCDNDnsRequest, _impl_.clientip_)}},
    // optional uint32 scene = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetCDNDnsRequest, _impl_.scene_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(GetCDNDnsRequest, _impl_.scene_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .wechat_proto.BaseRequest baseRequest = 1;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsRequest, _impl_.baserequest_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string clientIp = 2;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsRequest, _impl_.clientip_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional uint32 scene = 3;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsRequest, _impl_.scene_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::wechat_proto::BaseRequest>()},
  }}, {{
    "\35\0\10\0\0\0\0\0"
    "wechat_proto.GetCDNDnsRequest"
    "clientIp"
  }},
};

::uint8_t* GetCDNDnsRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.GetCDNDnsRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .wechat_proto.BaseRequest baseRequest = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baserequest(this),
        _Internal::baserequest(this).GetCachedSize(), target, stream);
  }

  // optional string clientIp = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_clientip();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "wechat_proto.GetCDNDnsRequest.clientIp");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional uint32 scene = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_scene(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.GetCDNDnsRequest)
  return target;
}

::size_t GetCDNDnsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.GetCDNDnsRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string clientIp = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_clientip());
    }

    // optional .wechat_proto.BaseRequest baseRequest = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.baserequest_);
    }

    // optional uint32 scene = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_scene());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetCDNDnsRequest::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetCDNDnsRequest::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetCDNDnsRequest::GetClassData() const { return &_class_data_; }


void GetCDNDnsRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetCDNDnsRequest*>(&to_msg);
  auto& from = static_cast<const GetCDNDnsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.GetCDNDnsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_clientip(from._internal_clientip());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_baserequest()->::wechat_proto::BaseRequest::MergeFrom(
          from._internal_baserequest());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.scene_ = from._impl_.scene_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCDNDnsRequest::CopyFrom(const GetCDNDnsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.GetCDNDnsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetCDNDnsRequest::IsInitialized() const {
  return true;
}

void GetCDNDnsRequest::InternalSwap(GetCDNDnsRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.clientip_, lhs_arena,
                                       &other->_impl_.clientip_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCDNDnsRequest, _impl_.scene_)
      + sizeof(GetCDNDnsRequest::_impl_.scene_)
      - PROTOBUF_FIELD_OFFSET(GetCDNDnsRequest, _impl_.baserequest_)>(
          reinterpret_cast<char*>(&_impl_.baserequest_),
          reinterpret_cast<char*>(&other->_impl_.baserequest_));
}

::google::protobuf::Metadata GetCDNDnsRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[3]);
}
// ===================================================================

class BaseResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(BaseResponse, _impl_._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::wechat_proto::SKBuiltinString& errmsg(const BaseResponse* msg);
  static void set_has_errmsg(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::wechat_proto::SKBuiltinString& BaseResponse::_Internal::errmsg(const BaseResponse* msg) {
  return *msg->_impl_.errmsg_;
}
BaseResponse::BaseResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.BaseResponse)
}
BaseResponse::BaseResponse(const BaseResponse& from) : ::google::protobuf::Message() {
  BaseResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.errmsg_){nullptr},
      decltype(_impl_.ret_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.errmsg_ = new ::wechat_proto::SKBuiltinString(*from._impl_.errmsg_);
  }
  _this->_impl_.ret_ = from._impl_.ret_;

  // @@protoc_insertion_point(copy_constructor:wechat_proto.BaseResponse)
}
inline void BaseResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.errmsg_){nullptr},
      decltype(_impl_.ret_){0},
  };
}
BaseResponse::~BaseResponse() {
  // @@protoc_insertion_point(destructor:wechat_proto.BaseResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void BaseResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.errmsg_;
}
void BaseResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void BaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.BaseResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.errmsg_ != nullptr);
    _impl_.errmsg_->Clear();
  }
  _impl_.ret_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* BaseResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> BaseResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BaseResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_BaseResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .wechat_proto.SKBuiltinString errMsg = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(BaseResponse, _impl_.errmsg_)}},
    // optional int32 ret = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(BaseResponse, _impl_.ret_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(BaseResponse, _impl_.ret_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 ret = 1;
    {PROTOBUF_FIELD_OFFSET(BaseResponse, _impl_.ret_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .wechat_proto.SKBuiltinString errMsg = 2;
    {PROTOBUF_FIELD_OFFSET(BaseResponse, _impl_.errmsg_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString>()},
  }}, {{
  }},
};

::uint8_t* BaseResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.BaseResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ret = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_ret(), target);
  }

  // optional .wechat_proto.SKBuiltinString errMsg = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::errmsg(this),
        _Internal::errmsg(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.BaseResponse)
  return target;
}

::size_t BaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.BaseResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .wechat_proto.SKBuiltinString errMsg = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.errmsg_);
    }

    // optional int32 ret = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ret());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData BaseResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    BaseResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*BaseResponse::GetClassData() const { return &_class_data_; }


void BaseResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<BaseResponse*>(&to_msg);
  auto& from = static_cast<const BaseResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.BaseResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_errmsg()->::wechat_proto::SKBuiltinString::MergeFrom(
          from._internal_errmsg());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BaseResponse::CopyFrom(const BaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.BaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool BaseResponse::IsInitialized() const {
  return true;
}

void BaseResponse::InternalSwap(BaseResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseResponse, _impl_.ret_)
      + sizeof(BaseResponse::_impl_.ret_)
      - PROTOBUF_FIELD_OFFSET(BaseResponse, _impl_.errmsg_)>(
          reinterpret_cast<char*>(&_impl_.errmsg_),
          reinterpret_cast<char*>(&other->_impl_.errmsg_));
}

::google::protobuf::Metadata BaseResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[4]);
}
// ===================================================================

class GetCDNDnsResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetCDNDnsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_._has_bits_);
  static const ::wechat_proto::BaseResponse& baseresponse(const GetCDNDnsResponse* msg);
  static void set_has_baseresponse(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::wechat_proto::CDNDnsInfo& dnsinfo(const GetCDNDnsResponse* msg);
  static void set_has_dnsinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::wechat_proto::CDNDnsInfo& snsdnsinfo(const GetCDNDnsResponse* msg);
  static void set_has_snsdnsinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::wechat_proto::CDNDnsInfo& appdnsinfo(const GetCDNDnsResponse* msg);
  static void set_has_appdnsinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::wechat_proto::SKBuiltinString_& cdndnsrulebuf(const GetCDNDnsResponse* msg);
  static void set_has_cdndnsrulebuf(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::wechat_proto::SKBuiltinString_& fakecdndnsrulebuf(const GetCDNDnsResponse* msg);
  static void set_has_fakecdndnsrulebuf(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::wechat_proto::CDNDnsInfo& fakednsinfo(const GetCDNDnsResponse* msg);
  static void set_has_fakednsinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_getcdndnsintervalms(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static const ::wechat_proto::CDNClientConfig& defaultconfig(const GetCDNDnsResponse* msg);
  static void set_has_defaultconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::wechat_proto::CDNClientConfig& disasterconfig(const GetCDNDnsResponse* msg);
  static void set_has_disasterconfig(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_nextipv6(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::wechat_proto::BaseResponse& GetCDNDnsResponse::_Internal::baseresponse(const GetCDNDnsResponse* msg) {
  return *msg->_impl_.baseresponse_;
}
const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::_Internal::dnsinfo(const GetCDNDnsResponse* msg) {
  return *msg->_impl_.dnsinfo_;
}
const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::_Internal::snsdnsinfo(const GetCDNDnsResponse* msg) {
  return *msg->_impl_.snsdnsinfo_;
}
const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::_Internal::appdnsinfo(const GetCDNDnsResponse* msg) {
  return *msg->_impl_.appdnsinfo_;
}
const ::wechat_proto::SKBuiltinString_& GetCDNDnsResponse::_Internal::cdndnsrulebuf(const GetCDNDnsResponse* msg) {
  return *msg->_impl_.cdndnsrulebuf_;
}
const ::wechat_proto::SKBuiltinString_& GetCDNDnsResponse::_Internal::fakecdndnsrulebuf(const GetCDNDnsResponse* msg) {
  return *msg->_impl_.fakecdndnsrulebuf_;
}
const ::wechat_proto::CDNDnsInfo& GetCDNDnsResponse::_Internal::fakednsinfo(const GetCDNDnsResponse* msg) {
  return *msg->_impl_.fakednsinfo_;
}
const ::wechat_proto::CDNClientConfig& GetCDNDnsResponse::_Internal::defaultconfig(const GetCDNDnsResponse* msg) {
  return *msg->_impl_.defaultconfig_;
}
const ::wechat_proto::CDNClientConfig& GetCDNDnsResponse::_Internal::disasterconfig(const GetCDNDnsResponse* msg) {
  return *msg->_impl_.disasterconfig_;
}
GetCDNDnsResponse::GetCDNDnsResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.GetCDNDnsResponse)
}
GetCDNDnsResponse::GetCDNDnsResponse(const GetCDNDnsResponse& from) : ::google::protobuf::Message() {
  GetCDNDnsResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.baseresponse_){nullptr},
      decltype(_impl_.dnsinfo_){nullptr},
      decltype(_impl_.snsdnsinfo_){nullptr},
      decltype(_impl_.appdnsinfo_){nullptr},
      decltype(_impl_.cdndnsrulebuf_){nullptr},
      decltype(_impl_.fakecdndnsrulebuf_){nullptr},
      decltype(_impl_.fakednsinfo_){nullptr},
      decltype(_impl_.defaultconfig_){nullptr},
      decltype(_impl_.disasterconfig_){nullptr},
      decltype(_impl_.getcdndnsintervalms_){},
      decltype(_impl_.nextipv6_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.baseresponse_ = new ::wechat_proto::BaseResponse(*from._impl_.baseresponse_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.dnsinfo_ = new ::wechat_proto::CDNDnsInfo(*from._impl_.dnsinfo_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.snsdnsinfo_ = new ::wechat_proto::CDNDnsInfo(*from._impl_.snsdnsinfo_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000008u) != 0) {
    _this->_impl_.appdnsinfo_ = new ::wechat_proto::CDNDnsInfo(*from._impl_.appdnsinfo_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000010u) != 0) {
    _this->_impl_.cdndnsrulebuf_ = new ::wechat_proto::SKBuiltinString_(*from._impl_.cdndnsrulebuf_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000020u) != 0) {
    _this->_impl_.fakecdndnsrulebuf_ = new ::wechat_proto::SKBuiltinString_(*from._impl_.fakecdndnsrulebuf_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000040u) != 0) {
    _this->_impl_.fakednsinfo_ = new ::wechat_proto::CDNDnsInfo(*from._impl_.fakednsinfo_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000080u) != 0) {
    _this->_impl_.defaultconfig_ = new ::wechat_proto::CDNClientConfig(*from._impl_.defaultconfig_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000100u) != 0) {
    _this->_impl_.disasterconfig_ = new ::wechat_proto::CDNClientConfig(*from._impl_.disasterconfig_);
  }
  ::memcpy(&_impl_.getcdndnsintervalms_, &from._impl_.getcdndnsintervalms_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.nextipv6_) -
    reinterpret_cast<char*>(&_impl_.getcdndnsintervalms_)) + sizeof(_impl_.nextipv6_));

  // @@protoc_insertion_point(copy_constructor:wechat_proto.GetCDNDnsResponse)
}
inline void GetCDNDnsResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.baseresponse_){nullptr},
      decltype(_impl_.dnsinfo_){nullptr},
      decltype(_impl_.snsdnsinfo_){nullptr},
      decltype(_impl_.appdnsinfo_){nullptr},
      decltype(_impl_.cdndnsrulebuf_){nullptr},
      decltype(_impl_.fakecdndnsrulebuf_){nullptr},
      decltype(_impl_.fakednsinfo_){nullptr},
      decltype(_impl_.defaultconfig_){nullptr},
      decltype(_impl_.disasterconfig_){nullptr},
      decltype(_impl_.getcdndnsintervalms_){0},
      decltype(_impl_.nextipv6_){0},
  };
}
GetCDNDnsResponse::~GetCDNDnsResponse() {
  // @@protoc_insertion_point(destructor:wechat_proto.GetCDNDnsResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetCDNDnsResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.baseresponse_;
  if (this != internal_default_instance()) delete _impl_.dnsinfo_;
  if (this != internal_default_instance()) delete _impl_.snsdnsinfo_;
  if (this != internal_default_instance()) delete _impl_.appdnsinfo_;
  if (this != internal_default_instance()) delete _impl_.cdndnsrulebuf_;
  if (this != internal_default_instance()) delete _impl_.fakecdndnsrulebuf_;
  if (this != internal_default_instance()) delete _impl_.fakednsinfo_;
  if (this != internal_default_instance()) delete _impl_.defaultconfig_;
  if (this != internal_default_instance()) delete _impl_.disasterconfig_;
}
void GetCDNDnsResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void GetCDNDnsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.GetCDNDnsResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.baseresponse_ != nullptr);
      _impl_.baseresponse_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.dnsinfo_ != nullptr);
      _impl_.dnsinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.snsdnsinfo_ != nullptr);
      _impl_.snsdnsinfo_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.appdnsinfo_ != nullptr);
      _impl_.appdnsinfo_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.cdndnsrulebuf_ != nullptr);
      _impl_.cdndnsrulebuf_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.fakecdndnsrulebuf_ != nullptr);
      _impl_.fakecdndnsrulebuf_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.fakednsinfo_ != nullptr);
      _impl_.fakednsinfo_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.defaultconfig_ != nullptr);
      _impl_.defaultconfig_->Clear();
    }
  }
  if (cached_has_bits & 0x00000100u) {
    ABSL_DCHECK(_impl_.disasterconfig_ != nullptr);
    _impl_.disasterconfig_->Clear();
  }
  if (cached_has_bits & 0x00000600u) {
    ::memset(&_impl_.getcdndnsintervalms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.nextipv6_) -
        reinterpret_cast<char*>(&_impl_.getcdndnsintervalms_)) + sizeof(_impl_.nextipv6_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetCDNDnsResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 9, 0, 2> GetCDNDnsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    9,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_GetCDNDnsResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional .wechat_proto.BaseResponse baseResponse = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.baseresponse_)}},
    // optional .wechat_proto.CDNDnsInfo dnsInfo = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.dnsinfo_)}},
    // optional .wechat_proto.CDNDnsInfo snsDnsInfo = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.snsdnsinfo_)}},
    // optional .wechat_proto.CDNDnsInfo appDnsInfo = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.appdnsinfo_)}},
    // optional .wechat_proto.SKBuiltinString_ cdndnsRuleBuf = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 4, 4, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.cdndnsrulebuf_)}},
    // optional .wechat_proto.SKBuiltinString_ fakeCdndnsRuleBuf = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 5, 5, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.fakecdndnsrulebuf_)}},
    // optional .wechat_proto.CDNDnsInfo fakeDnsInfo = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 6, 6, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.fakednsinfo_)}},
    // optional int32 getCdnDnsIntervalMs = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetCDNDnsResponse, _impl_.getcdndnsintervalms_), 9>(),
     {64, 9, 0, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.getcdndnsintervalms_)}},
    // optional .wechat_proto.CDNClientConfig defaultConfig = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 7, 7, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.defaultconfig_)}},
    // optional .wechat_proto.CDNClientConfig disasterConfig = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 8, 8, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.disasterconfig_)}},
    // optional int32 nextIpv6 = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetCDNDnsResponse, _impl_.nextipv6_), 10>(),
     {88, 10, 0, PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.nextipv6_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .wechat_proto.BaseResponse baseResponse = 1;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.baseresponse_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .wechat_proto.CDNDnsInfo dnsInfo = 2;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.dnsinfo_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .wechat_proto.CDNDnsInfo snsDnsInfo = 3;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.snsdnsinfo_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .wechat_proto.CDNDnsInfo appDnsInfo = 4;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.appdnsinfo_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .wechat_proto.SKBuiltinString_ cdndnsRuleBuf = 5;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.cdndnsrulebuf_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .wechat_proto.SKBuiltinString_ fakeCdndnsRuleBuf = 6;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.fakecdndnsrulebuf_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .wechat_proto.CDNDnsInfo fakeDnsInfo = 7;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.fakednsinfo_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 getCdnDnsIntervalMs = 8;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.getcdndnsintervalms_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .wechat_proto.CDNClientConfig defaultConfig = 9;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.defaultconfig_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .wechat_proto.CDNClientConfig disasterConfig = 10;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.disasterconfig_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 nextIpv6 = 11;
    {PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.nextipv6_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::wechat_proto::BaseResponse>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::CDNDnsInfo>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::CDNDnsInfo>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::CDNDnsInfo>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString_>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString_>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::CDNDnsInfo>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::CDNClientConfig>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::CDNClientConfig>()},
  }}, {{
  }},
};

::uint8_t* GetCDNDnsResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.GetCDNDnsResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .wechat_proto.BaseResponse baseResponse = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::baseresponse(this),
        _Internal::baseresponse(this).GetCachedSize(), target, stream);
  }

  // optional .wechat_proto.CDNDnsInfo dnsInfo = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::dnsinfo(this),
        _Internal::dnsinfo(this).GetCachedSize(), target, stream);
  }

  // optional .wechat_proto.CDNDnsInfo snsDnsInfo = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::snsdnsinfo(this),
        _Internal::snsdnsinfo(this).GetCachedSize(), target, stream);
  }

  // optional .wechat_proto.CDNDnsInfo appDnsInfo = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::appdnsinfo(this),
        _Internal::appdnsinfo(this).GetCachedSize(), target, stream);
  }

  // optional .wechat_proto.SKBuiltinString_ cdndnsRuleBuf = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::cdndnsrulebuf(this),
        _Internal::cdndnsrulebuf(this).GetCachedSize(), target, stream);
  }

  // optional .wechat_proto.SKBuiltinString_ fakeCdndnsRuleBuf = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::fakecdndnsrulebuf(this),
        _Internal::fakecdndnsrulebuf(this).GetCachedSize(), target, stream);
  }

  // optional .wechat_proto.CDNDnsInfo fakeDnsInfo = 7;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::fakednsinfo(this),
        _Internal::fakednsinfo(this).GetCachedSize(), target, stream);
  }

  // optional int32 getCdnDnsIntervalMs = 8;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<8>(
            stream, this->_internal_getcdndnsintervalms(), target);
  }

  // optional .wechat_proto.CDNClientConfig defaultConfig = 9;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(9, _Internal::defaultconfig(this),
        _Internal::defaultconfig(this).GetCachedSize(), target, stream);
  }

  // optional .wechat_proto.CDNClientConfig disasterConfig = 10;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(10, _Internal::disasterconfig(this),
        _Internal::disasterconfig(this).GetCachedSize(), target, stream);
  }

  // optional int32 nextIpv6 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<11>(
            stream, this->_internal_nextipv6(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.GetCDNDnsResponse)
  return target;
}

::size_t GetCDNDnsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.GetCDNDnsResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional .wechat_proto.BaseResponse baseResponse = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.baseresponse_);
    }

    // optional .wechat_proto.CDNDnsInfo dnsInfo = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.dnsinfo_);
    }

    // optional .wechat_proto.CDNDnsInfo snsDnsInfo = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.snsdnsinfo_);
    }

    // optional .wechat_proto.CDNDnsInfo appDnsInfo = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.appdnsinfo_);
    }

    // optional .wechat_proto.SKBuiltinString_ cdndnsRuleBuf = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cdndnsrulebuf_);
    }

    // optional .wechat_proto.SKBuiltinString_ fakeCdndnsRuleBuf = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.fakecdndnsrulebuf_);
    }

    // optional .wechat_proto.CDNDnsInfo fakeDnsInfo = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.fakednsinfo_);
    }

    // optional .wechat_proto.CDNClientConfig defaultConfig = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.defaultconfig_);
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .wechat_proto.CDNClientConfig disasterConfig = 10;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.disasterconfig_);
    }

    // optional int32 getCdnDnsIntervalMs = 8;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_getcdndnsintervalms());
    }

    // optional int32 nextIpv6 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_nextipv6());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetCDNDnsResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    GetCDNDnsResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*GetCDNDnsResponse::GetClassData() const { return &_class_data_; }


void GetCDNDnsResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetCDNDnsResponse*>(&to_msg);
  auto& from = static_cast<const GetCDNDnsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.GetCDNDnsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_baseresponse()->::wechat_proto::BaseResponse::MergeFrom(
          from._internal_baseresponse());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_dnsinfo()->::wechat_proto::CDNDnsInfo::MergeFrom(
          from._internal_dnsinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_snsdnsinfo()->::wechat_proto::CDNDnsInfo::MergeFrom(
          from._internal_snsdnsinfo());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_appdnsinfo()->::wechat_proto::CDNDnsInfo::MergeFrom(
          from._internal_appdnsinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_cdndnsrulebuf()->::wechat_proto::SKBuiltinString_::MergeFrom(
          from._internal_cdndnsrulebuf());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_mutable_fakecdndnsrulebuf()->::wechat_proto::SKBuiltinString_::MergeFrom(
          from._internal_fakecdndnsrulebuf());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_fakednsinfo()->::wechat_proto::CDNDnsInfo::MergeFrom(
          from._internal_fakednsinfo());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_defaultconfig()->::wechat_proto::CDNClientConfig::MergeFrom(
          from._internal_defaultconfig());
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_disasterconfig()->::wechat_proto::CDNClientConfig::MergeFrom(
          from._internal_disasterconfig());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.getcdndnsintervalms_ = from._impl_.getcdndnsintervalms_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.nextipv6_ = from._impl_.nextipv6_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCDNDnsResponse::CopyFrom(const GetCDNDnsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.GetCDNDnsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetCDNDnsResponse::IsInitialized() const {
  return true;
}

void GetCDNDnsResponse::InternalSwap(GetCDNDnsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.nextipv6_)
      + sizeof(GetCDNDnsResponse::_impl_.nextipv6_)
      - PROTOBUF_FIELD_OFFSET(GetCDNDnsResponse, _impl_.baseresponse_)>(
          reinterpret_cast<char*>(&_impl_.baseresponse_),
          reinterpret_cast<char*>(&other->_impl_.baseresponse_));
}

::google::protobuf::Metadata GetCDNDnsResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[5]);
}
// ===================================================================

class CDNDnsInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDNDnsInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_._has_bits_);
  static void set_has_ver(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_uin(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_expiretime(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_frontid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_frontipcount(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_zonedomain(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::wechat_proto::SKBuiltinString_& authkey(const CDNDnsInfo* msg);
  static void set_has_authkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_zoneid(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_zoneipcount(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_frontipportcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_zoneipportcount(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fakeuin(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::wechat_proto::SKBuiltinString_& newauthkey(const CDNDnsInfo* msg);
  static void set_has_newauthkey(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::wechat_proto::SKBuiltinString_& CDNDnsInfo::_Internal::authkey(const CDNDnsInfo* msg) {
  return *msg->_impl_.authkey_;
}
const ::wechat_proto::SKBuiltinString_& CDNDnsInfo::_Internal::newauthkey(const CDNDnsInfo* msg) {
  return *msg->_impl_.newauthkey_;
}
CDNDnsInfo::CDNDnsInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.CDNDnsInfo)
}
CDNDnsInfo::CDNDnsInfo(const CDNDnsInfo& from) : ::google::protobuf::Message() {
  CDNDnsInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.frontiplist_){from._impl_.frontiplist_},
      decltype(_impl_.zoneiplist_){from._impl_.zoneiplist_},
      decltype(_impl_.frontipportlist_){from._impl_.frontipportlist_},
      decltype(_impl_.zoneipportlist_){from._impl_.zoneipportlist_},
      decltype(_impl_.zonedomain_){},
      decltype(_impl_.authkey_){nullptr},
      decltype(_impl_.newauthkey_){nullptr},
      decltype(_impl_.ver_){},
      decltype(_impl_.uin_){},
      decltype(_impl_.expiretime_){},
      decltype(_impl_.frontid_){},
      decltype(_impl_.frontipcount_){},
      decltype(_impl_.zoneid_){},
      decltype(_impl_.zoneipcount_){},
      decltype(_impl_.frontipportcount_){},
      decltype(_impl_.zoneipportcount_){},
      decltype(_impl_.fakeuin_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.zonedomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zonedomain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.zonedomain_.Set(from._internal_zonedomain(), _this->GetArenaForAllocation());
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.authkey_ = new ::wechat_proto::SKBuiltinString_(*from._impl_.authkey_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.newauthkey_ = new ::wechat_proto::SKBuiltinString_(*from._impl_.newauthkey_);
  }
  ::memcpy(&_impl_.ver_, &from._impl_.ver_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.fakeuin_) -
    reinterpret_cast<char*>(&_impl_.ver_)) + sizeof(_impl_.fakeuin_));

  // @@protoc_insertion_point(copy_constructor:wechat_proto.CDNDnsInfo)
}
inline void CDNDnsInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.frontiplist_){arena},
      decltype(_impl_.zoneiplist_){arena},
      decltype(_impl_.frontipportlist_){arena},
      decltype(_impl_.zoneipportlist_){arena},
      decltype(_impl_.zonedomain_){},
      decltype(_impl_.authkey_){nullptr},
      decltype(_impl_.newauthkey_){nullptr},
      decltype(_impl_.ver_){0u},
      decltype(_impl_.uin_){0u},
      decltype(_impl_.expiretime_){0u},
      decltype(_impl_.frontid_){0},
      decltype(_impl_.frontipcount_){0},
      decltype(_impl_.zoneid_){0},
      decltype(_impl_.zoneipcount_){0},
      decltype(_impl_.frontipportcount_){0},
      decltype(_impl_.zoneipportcount_){0},
      decltype(_impl_.fakeuin_){0u},
  };
  _impl_.zonedomain_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.zonedomain_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
CDNDnsInfo::~CDNDnsInfo() {
  // @@protoc_insertion_point(destructor:wechat_proto.CDNDnsInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CDNDnsInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.frontiplist_.~RepeatedPtrField();
  _impl_.zoneiplist_.~RepeatedPtrField();
  _impl_.frontipportlist_.~RepeatedPtrField();
  _impl_.zoneipportlist_.~RepeatedPtrField();
  _impl_.zonedomain_.Destroy();
  if (this != internal_default_instance()) delete _impl_.authkey_;
  if (this != internal_default_instance()) delete _impl_.newauthkey_;
}
void CDNDnsInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CDNDnsInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.CDNDnsInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_frontiplist()->Clear();
  _internal_mutable_zoneiplist()->Clear();
  _internal_mutable_frontipportlist()->Clear();
  _internal_mutable_zoneipportlist()->Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.zonedomain_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.authkey_ != nullptr);
      _impl_.authkey_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.newauthkey_ != nullptr);
      _impl_.newauthkey_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&_impl_.ver_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.frontipcount_) -
        reinterpret_cast<char*>(&_impl_.ver_)) + sizeof(_impl_.frontipcount_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&_impl_.zoneid_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.fakeuin_) -
        reinterpret_cast<char*>(&_impl_.zoneid_)) + sizeof(_impl_.fakeuin_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CDNDnsInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 6, 58, 2> CDNDnsInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_._has_bits_),
    0, // no _extensions_
    17, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294836224,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CDNDnsInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 ver = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNDnsInfo, _impl_.ver_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.ver_)}},
    // optional uint32 uin = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNDnsInfo, _impl_.uin_), 4>(),
     {16, 4, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.uin_)}},
    // optional uint32 expireTime = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNDnsInfo, _impl_.expiretime_), 5>(),
     {24, 5, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.expiretime_)}},
    // optional int32 frontId = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNDnsInfo, _impl_.frontid_), 6>(),
     {32, 6, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.frontid_)}},
    // optional int32 frontIpcount = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNDnsInfo, _impl_.frontipcount_), 7>(),
     {40, 7, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.frontipcount_)}},
    // repeated .wechat_proto.SKBuiltinString frontIplist = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.frontiplist_)}},
    // optional string zoneDomain = 7;
    {::_pbi::TcParser::FastSS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zonedomain_)}},
    // optional .wechat_proto.SKBuiltinString_ authKey = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.authkey_)}},
    // optional int32 zoneId = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNDnsInfo, _impl_.zoneid_), 8>(),
     {72, 8, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zoneid_)}},
    // optional int32 zoneIpcount = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNDnsInfo, _impl_.zoneipcount_), 9>(),
     {80, 9, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zoneipcount_)}},
    // repeated .wechat_proto.SKBuiltinString zoneIplist = 11;
    {::_pbi::TcParser::FastMtR1,
     {90, 63, 2, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zoneiplist_)}},
    // repeated .wechat_proto.CDNDnsPortInfo frontIpportList = 12;
    {::_pbi::TcParser::FastMtR1,
     {98, 63, 3, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.frontipportlist_)}},
    // repeated .wechat_proto.CDNDnsPortInfo zoneIpportList = 13;
    {::_pbi::TcParser::FastMtR1,
     {106, 63, 4, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zoneipportlist_)}},
    // optional int32 frontIpportCount = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNDnsInfo, _impl_.frontipportcount_), 10>(),
     {112, 10, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.frontipportcount_)}},
    // optional int32 zoneIpportCount = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNDnsInfo, _impl_.zoneipportcount_), 11>(),
     {120, 11, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zoneipportcount_)}},
    // optional uint32 fakeUin = 16;
    {::_pbi::TcParser::FastV32S2,
     {384, 12, 0, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.fakeuin_)}},
    // optional .wechat_proto.SKBuiltinString_ newAuthKey = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 2, 5, PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.newauthkey_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 ver = 1;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.ver_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 uin = 2;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.uin_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 expireTime = 3;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.expiretime_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional int32 frontId = 4;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.frontid_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 frontIpcount = 5;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.frontipcount_), _Internal::kHasBitsOffset + 7, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .wechat_proto.SKBuiltinString frontIplist = 6;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.frontiplist_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional string zoneDomain = 7;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zonedomain_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kRawString | ::_fl::kRepAString)},
    // optional .wechat_proto.SKBuiltinString_ authKey = 8;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.authkey_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 zoneId = 9;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zoneid_), _Internal::kHasBitsOffset + 8, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 zoneIpcount = 10;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zoneipcount_), _Internal::kHasBitsOffset + 9, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // repeated .wechat_proto.SKBuiltinString zoneIplist = 11;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zoneiplist_), -1, 2,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .wechat_proto.CDNDnsPortInfo frontIpportList = 12;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.frontipportlist_), -1, 3,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .wechat_proto.CDNDnsPortInfo zoneIpportList = 13;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zoneipportlist_), -1, 4,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional int32 frontIpportCount = 14;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.frontipportcount_), _Internal::kHasBitsOffset + 10, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 zoneIpportCount = 15;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.zoneipportcount_), _Internal::kHasBitsOffset + 11, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional uint32 fakeUin = 16;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.fakeuin_), _Internal::kHasBitsOffset + 12, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .wechat_proto.SKBuiltinString_ newAuthKey = 17;
    {PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.newauthkey_), _Internal::kHasBitsOffset + 2, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString_>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::CDNDnsPortInfo>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::CDNDnsPortInfo>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString_>()},
  }}, {{
    "\27\0\0\0\0\0\0\12\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "wechat_proto.CDNDnsInfo"
    "zoneDomain"
  }},
};

::uint8_t* CDNDnsInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.CDNDnsInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 ver = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_ver(), target);
  }

  // optional uint32 uin = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_uin(), target);
  }

  // optional uint32 expireTime = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_expiretime(), target);
  }

  // optional int32 frontId = 4;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_frontid(), target);
  }

  // optional int32 frontIpcount = 5;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_frontipcount(), target);
  }

  // repeated .wechat_proto.SKBuiltinString frontIplist = 6;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frontiplist_size()); i < n; i++) {
    const auto& repfield = this->_internal_frontiplist().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(6, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional string zoneDomain = 7;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_zonedomain();
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(_s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormat::SERIALIZE,
                                "wechat_proto.CDNDnsInfo.zoneDomain");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  // optional .wechat_proto.SKBuiltinString_ authKey = 8;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::authkey(this),
        _Internal::authkey(this).GetCachedSize(), target, stream);
  }

  // optional int32 zoneId = 9;
  if (cached_has_bits & 0x00000100u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<9>(
            stream, this->_internal_zoneid(), target);
  }

  // optional int32 zoneIpcount = 10;
  if (cached_has_bits & 0x00000200u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<10>(
            stream, this->_internal_zoneipcount(), target);
  }

  // repeated .wechat_proto.SKBuiltinString zoneIplist = 11;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_zoneiplist_size()); i < n; i++) {
    const auto& repfield = this->_internal_zoneiplist().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(11, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .wechat_proto.CDNDnsPortInfo frontIpportList = 12;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_frontipportlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_frontipportlist().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(12, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .wechat_proto.CDNDnsPortInfo zoneIpportList = 13;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_zoneipportlist_size()); i < n; i++) {
    const auto& repfield = this->_internal_zoneipportlist().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(13, repfield, repfield.GetCachedSize(), target, stream);
  }

  // optional int32 frontIpportCount = 14;
  if (cached_has_bits & 0x00000400u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<14>(
            stream, this->_internal_frontipportcount(), target);
  }

  // optional int32 zoneIpportCount = 15;
  if (cached_has_bits & 0x00000800u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<15>(
            stream, this->_internal_zoneipportcount(), target);
  }

  // optional uint32 fakeUin = 16;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        16, this->_internal_fakeuin(), target);
  }

  // optional .wechat_proto.SKBuiltinString_ newAuthKey = 17;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(17, _Internal::newauthkey(this),
        _Internal::newauthkey(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.CDNDnsInfo)
  return target;
}

::size_t CDNDnsInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.CDNDnsInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wechat_proto.SKBuiltinString frontIplist = 6;
  total_size += 1UL * this->_internal_frontiplist_size();
  for (const auto& msg : this->_internal_frontiplist()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .wechat_proto.SKBuiltinString zoneIplist = 11;
  total_size += 1UL * this->_internal_zoneiplist_size();
  for (const auto& msg : this->_internal_zoneiplist()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .wechat_proto.CDNDnsPortInfo frontIpportList = 12;
  total_size += 1UL * this->_internal_frontipportlist_size();
  for (const auto& msg : this->_internal_frontipportlist()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // repeated .wechat_proto.CDNDnsPortInfo zoneIpportList = 13;
  total_size += 1UL * this->_internal_zoneipportlist_size();
  for (const auto& msg : this->_internal_zoneipportlist()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string zoneDomain = 7;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_zonedomain());
    }

    // optional .wechat_proto.SKBuiltinString_ authKey = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.authkey_);
    }

    // optional .wechat_proto.SKBuiltinString_ newAuthKey = 17;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.newauthkey_);
    }

    // optional uint32 ver = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_ver());
    }

    // optional uint32 uin = 2;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_uin());
    }

    // optional uint32 expireTime = 3;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_expiretime());
    }

    // optional int32 frontId = 4;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_frontid());
    }

    // optional int32 frontIpcount = 5;
    if (cached_has_bits & 0x00000080u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_frontipcount());
    }

  }
  if (cached_has_bits & 0x00001f00u) {
    // optional int32 zoneId = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zoneid());
    }

    // optional int32 zoneIpcount = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zoneipcount());
    }

    // optional int32 frontIpportCount = 14;
    if (cached_has_bits & 0x00000400u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_frontipportcount());
    }

    // optional int32 zoneIpportCount = 15;
    if (cached_has_bits & 0x00000800u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_zoneipportcount());
    }

    // optional uint32 fakeUin = 16;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 + ::_pbi::WireFormatLite::UInt32Size(
                                      this->_internal_fakeuin());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CDNDnsInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CDNDnsInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*CDNDnsInfo::GetClassData() const { return &_class_data_; }


void CDNDnsInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CDNDnsInfo*>(&to_msg);
  auto& from = static_cast<const CDNDnsInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.CDNDnsInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_frontiplist()->MergeFrom(from._internal_frontiplist());
  _this->_internal_mutable_zoneiplist()->MergeFrom(from._internal_zoneiplist());
  _this->_internal_mutable_frontipportlist()->MergeFrom(from._internal_frontipportlist());
  _this->_internal_mutable_zoneipportlist()->MergeFrom(from._internal_zoneipportlist());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_zonedomain(from._internal_zonedomain());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_authkey()->::wechat_proto::SKBuiltinString_::MergeFrom(
          from._internal_authkey());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_newauthkey()->::wechat_proto::SKBuiltinString_::MergeFrom(
          from._internal_newauthkey());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.ver_ = from._impl_.ver_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.uin_ = from._impl_.uin_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.expiretime_ = from._impl_.expiretime_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.frontid_ = from._impl_.frontid_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.frontipcount_ = from._impl_.frontipcount_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.zoneid_ = from._impl_.zoneid_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.zoneipcount_ = from._impl_.zoneipcount_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.frontipportcount_ = from._impl_.frontipportcount_;
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.zoneipportcount_ = from._impl_.zoneipportcount_;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.fakeuin_ = from._impl_.fakeuin_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CDNDnsInfo::CopyFrom(const CDNDnsInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.CDNDnsInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CDNDnsInfo::IsInitialized() const {
  return true;
}

void CDNDnsInfo::InternalSwap(CDNDnsInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_frontiplist()->InternalSwap(other->_internal_mutable_frontiplist());
  _internal_mutable_zoneiplist()->InternalSwap(other->_internal_mutable_zoneiplist());
  _internal_mutable_frontipportlist()->InternalSwap(other->_internal_mutable_frontipportlist());
  _internal_mutable_zoneipportlist()->InternalSwap(other->_internal_mutable_zoneipportlist());
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.zonedomain_, lhs_arena,
                                       &other->_impl_.zonedomain_, rhs_arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.fakeuin_)
      + sizeof(CDNDnsInfo::_impl_.fakeuin_)
      - PROTOBUF_FIELD_OFFSET(CDNDnsInfo, _impl_.authkey_)>(
          reinterpret_cast<char*>(&_impl_.authkey_),
          reinterpret_cast<char*>(&other->_impl_.authkey_));
}

::google::protobuf::Metadata CDNDnsInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[6]);
}
// ===================================================================

class CDNClientConfig::_Internal {
 public:
  using HasBits = decltype(std::declval<CDNClientConfig>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_._has_bits_);
  static void set_has_c2cshowerrordelayms(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_snsshowerrordelayms(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_c2cretryinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_snsretryinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_c2crwtimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_snsrwtimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
};

CDNClientConfig::CDNClientConfig(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.CDNClientConfig)
}
CDNClientConfig::CDNClientConfig(const CDNClientConfig& from)
    : ::google::protobuf::Message(), _impl_(from._impl_) {
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:wechat_proto.CDNClientConfig)
}
inline void CDNClientConfig::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.c2cshowerrordelayms_){0},
      decltype(_impl_.snsshowerrordelayms_){0},
      decltype(_impl_.c2cretryinterval_){0},
      decltype(_impl_.snsretryinterval_){0},
      decltype(_impl_.c2crwtimeout_){0},
      decltype(_impl_.snsrwtimeout_){0},
  };
}
CDNClientConfig::~CDNClientConfig() {
  // @@protoc_insertion_point(destructor:wechat_proto.CDNClientConfig)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CDNClientConfig::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
}
void CDNClientConfig::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CDNClientConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.CDNClientConfig)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&_impl_.c2cshowerrordelayms_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.snsrwtimeout_) -
        reinterpret_cast<char*>(&_impl_.c2cshowerrordelayms_)) + sizeof(_impl_.snsrwtimeout_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CDNClientConfig::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 0, 2> CDNClientConfig::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CDNClientConfig_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 c2CshowErrorDelayMs = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNClientConfig, _impl_.c2cshowerrordelayms_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.c2cshowerrordelayms_)}},
    // optional int32 snsshowErrorDelayMs = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNClientConfig, _impl_.snsshowerrordelayms_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.snsshowerrordelayms_)}},
    // optional int32 c2CretryInterval = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNClientConfig, _impl_.c2cretryinterval_), 2>(),
     {24, 2, 0, PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.c2cretryinterval_)}},
    // optional int32 snsretryInterval = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNClientConfig, _impl_.snsretryinterval_), 3>(),
     {32, 3, 0, PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.snsretryinterval_)}},
    // optional int32 c2Crwtimeout = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNClientConfig, _impl_.c2crwtimeout_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.c2crwtimeout_)}},
    // optional int32 snsrwtimeout = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNClientConfig, _impl_.snsrwtimeout_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.snsrwtimeout_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 c2CshowErrorDelayMs = 1;
    {PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.c2cshowerrordelayms_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 snsshowErrorDelayMs = 2;
    {PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.snsshowerrordelayms_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 c2CretryInterval = 3;
    {PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.c2cretryinterval_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 snsretryInterval = 4;
    {PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.snsretryinterval_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 c2Crwtimeout = 5;
    {PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.c2crwtimeout_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional int32 snsrwtimeout = 6;
    {PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.snsrwtimeout_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CDNClientConfig::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.CDNClientConfig)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 c2CshowErrorDelayMs = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_c2cshowerrordelayms(), target);
  }

  // optional int32 snsshowErrorDelayMs = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<2>(
            stream, this->_internal_snsshowerrordelayms(), target);
  }

  // optional int32 c2CretryInterval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<3>(
            stream, this->_internal_c2cretryinterval(), target);
  }

  // optional int32 snsretryInterval = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<4>(
            stream, this->_internal_snsretryinterval(), target);
  }

  // optional int32 c2Crwtimeout = 5;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<5>(
            stream, this->_internal_c2crwtimeout(), target);
  }

  // optional int32 snsrwtimeout = 6;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_snsrwtimeout(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.CDNClientConfig)
  return target;
}

::size_t CDNClientConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.CDNClientConfig)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional int32 c2CshowErrorDelayMs = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_c2cshowerrordelayms());
    }

    // optional int32 snsshowErrorDelayMs = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_snsshowerrordelayms());
    }

    // optional int32 c2CretryInterval = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_c2cretryinterval());
    }

    // optional int32 snsretryInterval = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_snsretryinterval());
    }

    // optional int32 c2Crwtimeout = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_c2crwtimeout());
    }

    // optional int32 snsrwtimeout = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_snsrwtimeout());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CDNClientConfig::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CDNClientConfig::MergeImpl
};
const ::google::protobuf::Message::ClassData*CDNClientConfig::GetClassData() const { return &_class_data_; }


void CDNClientConfig::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CDNClientConfig*>(&to_msg);
  auto& from = static_cast<const CDNClientConfig&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.CDNClientConfig)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.c2cshowerrordelayms_ = from._impl_.c2cshowerrordelayms_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.snsshowerrordelayms_ = from._impl_.snsshowerrordelayms_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.c2cretryinterval_ = from._impl_.c2cretryinterval_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.snsretryinterval_ = from._impl_.snsretryinterval_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.c2crwtimeout_ = from._impl_.c2crwtimeout_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.snsrwtimeout_ = from._impl_.snsrwtimeout_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CDNClientConfig::CopyFrom(const CDNClientConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.CDNClientConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CDNClientConfig::IsInitialized() const {
  return true;
}

void CDNClientConfig::InternalSwap(CDNClientConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.snsrwtimeout_)
      + sizeof(CDNClientConfig::_impl_.snsrwtimeout_)
      - PROTOBUF_FIELD_OFFSET(CDNClientConfig, _impl_.c2cshowerrordelayms_)>(
          reinterpret_cast<char*>(&_impl_.c2cshowerrordelayms_),
          reinterpret_cast<char*>(&other->_impl_.c2cshowerrordelayms_));
}

::google::protobuf::Metadata CDNClientConfig::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[7]);
}
// ===================================================================

class CDNDnsPortInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<CDNDnsPortInfo>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CDNDnsPortInfo, _impl_._has_bits_);
  static void set_has_portcount(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CDNDnsPortInfo::CDNDnsPortInfo(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.CDNDnsPortInfo)
}
CDNDnsPortInfo::CDNDnsPortInfo(const CDNDnsPortInfo& from) : ::google::protobuf::Message() {
  CDNDnsPortInfo* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.portlist_){from._impl_.portlist_},
      decltype(_impl_.portcount_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.portcount_ = from._impl_.portcount_;

  // @@protoc_insertion_point(copy_constructor:wechat_proto.CDNDnsPortInfo)
}
inline void CDNDnsPortInfo::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.portlist_){arena},
      decltype(_impl_.portcount_){0u},
  };
}
CDNDnsPortInfo::~CDNDnsPortInfo() {
  // @@protoc_insertion_point(destructor:wechat_proto.CDNDnsPortInfo)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CDNDnsPortInfo::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.portlist_.~RepeatedField();
}
void CDNDnsPortInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CDNDnsPortInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.CDNDnsPortInfo)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_portlist()->Clear();
  _impl_.portcount_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CDNDnsPortInfo::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> CDNDnsPortInfo::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CDNDnsPortInfo, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_CDNDnsPortInfo_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated uint32 portList = 2;
    {::_pbi::TcParser::FastV32R1,
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(CDNDnsPortInfo, _impl_.portlist_)}},
    // optional uint32 portCount = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CDNDnsPortInfo, _impl_.portcount_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CDNDnsPortInfo, _impl_.portcount_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 portCount = 1;
    {PROTOBUF_FIELD_OFFSET(CDNDnsPortInfo, _impl_.portcount_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated uint32 portList = 2;
    {PROTOBUF_FIELD_OFFSET(CDNDnsPortInfo, _impl_.portlist_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* CDNDnsPortInfo::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.CDNDnsPortInfo)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 portCount = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_portcount(), target);
  }

  // repeated uint32 portList = 2;
  for (int i = 0, n = this->_internal_portlist_size(); i < n; ++i) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_portlist().Get(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.CDNDnsPortInfo)
  return target;
}

::size_t CDNDnsPortInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.CDNDnsPortInfo)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 portList = 2;
  {
    std::size_t data_size = ::_pbi::WireFormatLite::UInt32Size(
        this->_internal_portlist())
    ;
    std::size_t tag_size = std::size_t{1} *
        ::_pbi::FromIntSize(this->_internal_portlist_size());
    ;
    total_size += tag_size + data_size;
  }
  // optional uint32 portCount = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_portcount());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CDNDnsPortInfo::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CDNDnsPortInfo::MergeImpl
};
const ::google::protobuf::Message::ClassData*CDNDnsPortInfo::GetClassData() const { return &_class_data_; }


void CDNDnsPortInfo::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CDNDnsPortInfo*>(&to_msg);
  auto& from = static_cast<const CDNDnsPortInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.CDNDnsPortInfo)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.portlist_.MergeFrom(from._impl_.portlist_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_portcount(from._internal_portcount());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CDNDnsPortInfo::CopyFrom(const CDNDnsPortInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.CDNDnsPortInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CDNDnsPortInfo::IsInitialized() const {
  return true;
}

void CDNDnsPortInfo::InternalSwap(CDNDnsPortInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.portlist_.InternalSwap(&other->_impl_.portlist_);
        swap(_impl_.portcount_, other->_impl_.portcount_);
}

::google::protobuf::Metadata CDNDnsPortInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[8]);
}
// ===================================================================

class DATA::_Internal {
 public:
  using HasBits = decltype(std::declval<DATA>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(DATA, _impl_._has_bits_);
  static void set_has_len(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_data(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DATA::DATA(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.DATA)
}
DATA::DATA(const DATA& from) : ::google::protobuf::Message() {
  DATA* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.data_){},
      decltype(_impl_.len_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.data_.Set(from._internal_data(), _this->GetArenaForAllocation());
  }
  _this->_impl_.len_ = from._impl_.len_;

  // @@protoc_insertion_point(copy_constructor:wechat_proto.DATA)
}
inline void DATA::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.data_){},
      decltype(_impl_.len_){0u},
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        _impl_.data_.Set("", GetArenaForAllocation());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}
DATA::~DATA() {
  // @@protoc_insertion_point(destructor:wechat_proto.DATA)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void DATA::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}
void DATA::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void DATA::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.DATA)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.data_.ClearNonDefaultToEmpty();
  }
  _impl_.len_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* DATA::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> DATA::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(DATA, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_DATA_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional bytes data = 2;
    {::_pbi::TcParser::FastBS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(DATA, _impl_.data_)}},
    // optional uint32 len = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(DATA, _impl_.len_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(DATA, _impl_.len_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 len = 1;
    {PROTOBUF_FIELD_OFFSET(DATA, _impl_.len_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional bytes data = 2;
    {PROTOBUF_FIELD_OFFSET(DATA, _impl_.data_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBytes | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
  }},
};

::uint8_t* DATA::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.DATA)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 len = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_len(), target);
  }

  // optional bytes data = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_data();
    target = stream->WriteBytesMaybeAliased(2, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.DATA)
  return target;
}

::size_t DATA::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.DATA)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional bytes data = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_data());
    }

    // optional uint32 len = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_len());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData DATA::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    DATA::MergeImpl
};
const ::google::protobuf::Message::ClassData*DATA::GetClassData() const { return &_class_data_; }


void DATA::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<DATA*>(&to_msg);
  auto& from = static_cast<const DATA&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.DATA)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_data(from._internal_data());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.len_ = from._impl_.len_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void DATA::CopyFrom(const DATA& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.DATA)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool DATA::IsInitialized() const {
  return true;
}

void DATA::InternalSwap(DATA* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.data_, lhs_arena,
                                       &other->_impl_.data_, rhs_arena);
        swap(_impl_.len_, other->_impl_.len_);
}

::google::protobuf::Metadata DATA::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[9]);
}
// ===================================================================

class CmdItem::_Internal {
 public:
  using HasBits = decltype(std::declval<CmdItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CmdItem, _impl_._has_bits_);
  static void set_has_cmd_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::wechat_proto::DATA& cmd_buf(const CmdItem* msg);
  static void set_has_cmd_buf(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::wechat_proto::DATA& CmdItem::_Internal::cmd_buf(const CmdItem* msg) {
  return *msg->_impl_.cmd_buf_;
}
CmdItem::CmdItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.CmdItem)
}
CmdItem::CmdItem(const CmdItem& from) : ::google::protobuf::Message() {
  CmdItem* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.cmd_buf_){nullptr},
      decltype(_impl_.cmd_id_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cmd_buf_ = new ::wechat_proto::DATA(*from._impl_.cmd_buf_);
  }
  _this->_impl_.cmd_id_ = from._impl_.cmd_id_;

  // @@protoc_insertion_point(copy_constructor:wechat_proto.CmdItem)
}
inline void CmdItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.cmd_buf_){nullptr},
      decltype(_impl_.cmd_id_){0u},
  };
}
CmdItem::~CmdItem() {
  // @@protoc_insertion_point(destructor:wechat_proto.CmdItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CmdItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cmd_buf_;
}
void CmdItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CmdItem::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.CmdItem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.cmd_buf_ != nullptr);
    _impl_.cmd_buf_->Clear();
  }
  _impl_.cmd_id_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CmdItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> CmdItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CmdItem, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CmdItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional .wechat_proto.DATA cmd_buf = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(CmdItem, _impl_.cmd_buf_)}},
    // optional uint32 cmd_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CmdItem, _impl_.cmd_id_), 1>(),
     {8, 1, 0, PROTOBUF_FIELD_OFFSET(CmdItem, _impl_.cmd_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 cmd_id = 1;
    {PROTOBUF_FIELD_OFFSET(CmdItem, _impl_.cmd_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .wechat_proto.DATA cmd_buf = 2;
    {PROTOBUF_FIELD_OFFSET(CmdItem, _impl_.cmd_buf_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::wechat_proto::DATA>()},
  }}, {{
  }},
};

::uint8_t* CmdItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.CmdItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 cmd_id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_cmd_id(), target);
  }

  // optional .wechat_proto.DATA cmd_buf = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cmd_buf(this),
        _Internal::cmd_buf(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.CmdItem)
  return target;
}

::size_t CmdItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.CmdItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional .wechat_proto.DATA cmd_buf = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cmd_buf_);
    }

    // optional uint32 cmd_id = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_cmd_id());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CmdItem::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CmdItem::MergeImpl
};
const ::google::protobuf::Message::ClassData*CmdItem::GetClassData() const { return &_class_data_; }


void CmdItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CmdItem*>(&to_msg);
  auto& from = static_cast<const CmdItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.CmdItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cmd_buf()->::wechat_proto::DATA::MergeFrom(
          from._internal_cmd_buf());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.cmd_id_ = from._impl_.cmd_id_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CmdItem::CopyFrom(const CmdItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.CmdItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CmdItem::IsInitialized() const {
  return true;
}

void CmdItem::InternalSwap(CmdItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CmdItem, _impl_.cmd_id_)
      + sizeof(CmdItem::_impl_.cmd_id_)
      - PROTOBUF_FIELD_OFFSET(CmdItem, _impl_.cmd_buf_)>(
          reinterpret_cast<char*>(&_impl_.cmd_buf_),
          reinterpret_cast<char*>(&other->_impl_.cmd_buf_));
}

::google::protobuf::Metadata CmdItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[10]);
}
// ===================================================================

class CmdList::_Internal {
 public:
  using HasBits = decltype(std::declval<CmdList>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(CmdList, _impl_._has_bits_);
  static void set_has_count(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

CmdList::CmdList(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.CmdList)
}
CmdList::CmdList(const CmdList& from) : ::google::protobuf::Message() {
  CmdList* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.item_list_){from._impl_.item_list_},
      decltype(_impl_.count_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  _this->_impl_.count_ = from._impl_.count_;

  // @@protoc_insertion_point(copy_constructor:wechat_proto.CmdList)
}
inline void CmdList::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.item_list_){arena},
      decltype(_impl_.count_){0u},
  };
}
CmdList::~CmdList() {
  // @@protoc_insertion_point(destructor:wechat_proto.CmdList)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void CmdList::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.item_list_.~RepeatedPtrField();
}
void CmdList::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void CmdList::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.CmdList)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_mutable_item_list()->Clear();
  _impl_.count_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* CmdList::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> CmdList::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CmdList, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_CmdList_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // repeated .wechat_proto.CmdItem item_list = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CmdList, _impl_.item_list_)}},
    // optional uint32 count = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(CmdList, _impl_.count_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(CmdList, _impl_.count_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 count = 1;
    {PROTOBUF_FIELD_OFFSET(CmdList, _impl_.count_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // repeated .wechat_proto.CmdItem item_list = 2;
    {PROTOBUF_FIELD_OFFSET(CmdList, _impl_.item_list_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::wechat_proto::CmdItem>()},
  }}, {{
  }},
};

::uint8_t* CmdList::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.CmdList)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 count = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_count(), target);
  }

  // repeated .wechat_proto.CmdItem item_list = 2;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_item_list_size()); i < n; i++) {
    const auto& repfield = this->_internal_item_list().Get(i);
    target = ::google::protobuf::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.CmdList)
  return target;
}

::size_t CmdList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.CmdList)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .wechat_proto.CmdItem item_list = 2;
  total_size += 1UL * this->_internal_item_list_size();
  for (const auto& msg : this->_internal_item_list()) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
  }
  // optional uint32 count = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData CmdList::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    CmdList::MergeImpl
};
const ::google::protobuf::Message::ClassData*CmdList::GetClassData() const { return &_class_data_; }


void CmdList::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<CmdList*>(&to_msg);
  auto& from = static_cast<const CmdList&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.CmdList)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_item_list()->MergeFrom(from._internal_item_list());
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_count(from._internal_count());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CmdList::CopyFrom(const CmdList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.CmdList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool CmdList::IsInitialized() const {
  return true;
}

void CmdList::InternalSwap(CmdList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _internal_mutable_item_list()->InternalSwap(other->_internal_mutable_item_list());
        swap(_impl_.count_, other->_impl_.count_);
}

::google::protobuf::Metadata CmdList::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[11]);
}
// ===================================================================

class NewSyncResponseMSGItem::_Internal {
 public:
  using HasBits = decltype(std::declval<NewSyncResponseMSGItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_._has_bits_);
  static void set_has_mgs_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::wechat_proto::SKBuiltinString& from_wxid(const NewSyncResponseMSGItem* msg);
  static void set_has_from_wxid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::wechat_proto::SKBuiltinString& to_wxid(const NewSyncResponseMSGItem* msg);
  static void set_has_to_wxid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_unkonw(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::wechat_proto::SKBuiltinString& msg_content(const NewSyncResponseMSGItem* msg);
  static void set_has_msg_content(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

const ::wechat_proto::SKBuiltinString& NewSyncResponseMSGItem::_Internal::from_wxid(const NewSyncResponseMSGItem* msg) {
  return *msg->_impl_.from_wxid_;
}
const ::wechat_proto::SKBuiltinString& NewSyncResponseMSGItem::_Internal::to_wxid(const NewSyncResponseMSGItem* msg) {
  return *msg->_impl_.to_wxid_;
}
const ::wechat_proto::SKBuiltinString& NewSyncResponseMSGItem::_Internal::msg_content(const NewSyncResponseMSGItem* msg) {
  return *msg->_impl_.msg_content_;
}
NewSyncResponseMSGItem::NewSyncResponseMSGItem(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.NewSyncResponseMSGItem)
}
NewSyncResponseMSGItem::NewSyncResponseMSGItem(const NewSyncResponseMSGItem& from) : ::google::protobuf::Message() {
  NewSyncResponseMSGItem* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.from_wxid_){nullptr},
      decltype(_impl_.to_wxid_){nullptr},
      decltype(_impl_.msg_content_){nullptr},
      decltype(_impl_.mgs_id_){},
      decltype(_impl_.unkonw_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.from_wxid_ = new ::wechat_proto::SKBuiltinString(*from._impl_.from_wxid_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.to_wxid_ = new ::wechat_proto::SKBuiltinString(*from._impl_.to_wxid_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000004u) != 0) {
    _this->_impl_.msg_content_ = new ::wechat_proto::SKBuiltinString(*from._impl_.msg_content_);
  }
  ::memcpy(&_impl_.mgs_id_, &from._impl_.mgs_id_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.unkonw_) -
    reinterpret_cast<char*>(&_impl_.mgs_id_)) + sizeof(_impl_.unkonw_));

  // @@protoc_insertion_point(copy_constructor:wechat_proto.NewSyncResponseMSGItem)
}
inline void NewSyncResponseMSGItem::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.from_wxid_){nullptr},
      decltype(_impl_.to_wxid_){nullptr},
      decltype(_impl_.msg_content_){nullptr},
      decltype(_impl_.mgs_id_){0u},
      decltype(_impl_.unkonw_){0u},
  };
}
NewSyncResponseMSGItem::~NewSyncResponseMSGItem() {
  // @@protoc_insertion_point(destructor:wechat_proto.NewSyncResponseMSGItem)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NewSyncResponseMSGItem::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.from_wxid_;
  if (this != internal_default_instance()) delete _impl_.to_wxid_;
  if (this != internal_default_instance()) delete _impl_.msg_content_;
}
void NewSyncResponseMSGItem::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void NewSyncResponseMSGItem::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.NewSyncResponseMSGItem)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_wxid_ != nullptr);
      _impl_.from_wxid_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_wxid_ != nullptr);
      _impl_.to_wxid_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.msg_content_ != nullptr);
      _impl_.msg_content_->Clear();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.mgs_id_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.unkonw_) -
        reinterpret_cast<char*>(&_impl_.mgs_id_)) + sizeof(_impl_.unkonw_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NewSyncResponseMSGItem::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 3, 0, 2> NewSyncResponseMSGItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NewSyncResponseMSGItem_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional uint32 mgs_id = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewSyncResponseMSGItem, _impl_.mgs_id_), 3>(),
     {8, 3, 0, PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.mgs_id_)}},
    // optional .wechat_proto.SKBuiltinString from_wxid = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.from_wxid_)}},
    // optional .wechat_proto.SKBuiltinString to_wxid = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.to_wxid_)}},
    // optional uint32 unkonw = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewSyncResponseMSGItem, _impl_.unkonw_), 4>(),
     {32, 4, 0, PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.unkonw_)}},
    // optional .wechat_proto.SKBuiltinString msg_content = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.msg_content_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // optional uint32 mgs_id = 1;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.mgs_id_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .wechat_proto.SKBuiltinString from_wxid = 2;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.from_wxid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .wechat_proto.SKBuiltinString to_wxid = 3;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.to_wxid_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 unkonw = 4;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.unkonw_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .wechat_proto.SKBuiltinString msg_content = 5;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.msg_content_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString>()},
  }}, {{
  }},
};

::uint8_t* NewSyncResponseMSGItem::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.NewSyncResponseMSGItem)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 mgs_id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        1, this->_internal_mgs_id(), target);
  }

  // optional .wechat_proto.SKBuiltinString from_wxid = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::from_wxid(this),
        _Internal::from_wxid(this).GetCachedSize(), target, stream);
  }

  // optional .wechat_proto.SKBuiltinString to_wxid = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::to_wxid(this),
        _Internal::to_wxid(this).GetCachedSize(), target, stream);
  }

  // optional uint32 unkonw = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        4, this->_internal_unkonw(), target);
  }

  // optional .wechat_proto.SKBuiltinString msg_content = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::msg_content(this),
        _Internal::msg_content(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.NewSyncResponseMSGItem)
  return target;
}

::size_t NewSyncResponseMSGItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.NewSyncResponseMSGItem)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional .wechat_proto.SKBuiltinString from_wxid = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.from_wxid_);
    }

    // optional .wechat_proto.SKBuiltinString to_wxid = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.to_wxid_);
    }

    // optional .wechat_proto.SKBuiltinString msg_content = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.msg_content_);
    }

    // optional uint32 mgs_id = 1;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_mgs_id());
    }

    // optional uint32 unkonw = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_unkonw());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NewSyncResponseMSGItem::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    NewSyncResponseMSGItem::MergeImpl
};
const ::google::protobuf::Message::ClassData*NewSyncResponseMSGItem::GetClassData() const { return &_class_data_; }


void NewSyncResponseMSGItem::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NewSyncResponseMSGItem*>(&to_msg);
  auto& from = static_cast<const NewSyncResponseMSGItem&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.NewSyncResponseMSGItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_from_wxid()->::wechat_proto::SKBuiltinString::MergeFrom(
          from._internal_from_wxid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_to_wxid()->::wechat_proto::SKBuiltinString::MergeFrom(
          from._internal_to_wxid());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_msg_content()->::wechat_proto::SKBuiltinString::MergeFrom(
          from._internal_msg_content());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.mgs_id_ = from._impl_.mgs_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.unkonw_ = from._impl_.unkonw_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NewSyncResponseMSGItem::CopyFrom(const NewSyncResponseMSGItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.NewSyncResponseMSGItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NewSyncResponseMSGItem::IsInitialized() const {
  return true;
}

void NewSyncResponseMSGItem::InternalSwap(NewSyncResponseMSGItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.unkonw_)
      + sizeof(NewSyncResponseMSGItem::_impl_.unkonw_)
      - PROTOBUF_FIELD_OFFSET(NewSyncResponseMSGItem, _impl_.from_wxid_)>(
          reinterpret_cast<char*>(&_impl_.from_wxid_),
          reinterpret_cast<char*>(&other->_impl_.from_wxid_));
}

::google::protobuf::Metadata NewSyncResponseMSGItem::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[12]);
}
// ===================================================================

class NewSyncResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<NewSyncResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_._has_bits_);
  static void set_has_ret(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::wechat_proto::CmdList& cmdlist(const NewSyncResponse* msg);
  static void set_has_cmdlist(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_continueflag(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::wechat_proto::SKBuiltinString_& keybuf(const NewSyncResponse* msg);
  static void set_has_keybuf(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_onlineversion(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_svrtime(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::wechat_proto::CmdList& NewSyncResponse::_Internal::cmdlist(const NewSyncResponse* msg) {
  return *msg->_impl_.cmdlist_;
}
const ::wechat_proto::SKBuiltinString_& NewSyncResponse::_Internal::keybuf(const NewSyncResponse* msg) {
  return *msg->_impl_.keybuf_;
}
NewSyncResponse::NewSyncResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:wechat_proto.NewSyncResponse)
}
NewSyncResponse::NewSyncResponse(const NewSyncResponse& from) : ::google::protobuf::Message() {
  NewSyncResponse* const _this = this;
  (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.cmdlist_){nullptr},
      decltype(_impl_.keybuf_){nullptr},
      decltype(_impl_.ret_){},
      decltype(_impl_.continueflag_){},
      decltype(_impl_.status_){},
      decltype(_impl_.onlineversion_){},
      decltype(_impl_.svrtime_){},
  };
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_impl_.cmdlist_ = new ::wechat_proto::CmdList(*from._impl_.cmdlist_);
  }
  if ((from._impl_._has_bits_[0] & 0x00000002u) != 0) {
    _this->_impl_.keybuf_ = new ::wechat_proto::SKBuiltinString_(*from._impl_.keybuf_);
  }
  ::memcpy(&_impl_.ret_, &from._impl_.ret_,
    static_cast<::size_t>(reinterpret_cast<char*>(&_impl_.svrtime_) -
    reinterpret_cast<char*>(&_impl_.ret_)) + sizeof(_impl_.svrtime_));

  // @@protoc_insertion_point(copy_constructor:wechat_proto.NewSyncResponse)
}
inline void NewSyncResponse::SharedCtor(::_pb::Arena* arena) {
  (void)arena;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){},
      /*decltype(_impl_._cached_size_)*/ {},
      decltype(_impl_.cmdlist_){nullptr},
      decltype(_impl_.keybuf_){nullptr},
      decltype(_impl_.ret_){0},
      decltype(_impl_.continueflag_){0u},
      decltype(_impl_.status_){0u},
      decltype(_impl_.onlineversion_){0u},
      decltype(_impl_.svrtime_){0u},
  };
}
NewSyncResponse::~NewSyncResponse() {
  // @@protoc_insertion_point(destructor:wechat_proto.NewSyncResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void NewSyncResponse::SharedDtor() {
  ABSL_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.cmdlist_;
  if (this != internal_default_instance()) delete _impl_.keybuf_;
}
void NewSyncResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

PROTOBUF_NOINLINE void NewSyncResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:wechat_proto.NewSyncResponse)
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.cmdlist_ != nullptr);
      _impl_.cmdlist_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.keybuf_ != nullptr);
      _impl_.keybuf_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.ret_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.svrtime_) -
        reinterpret_cast<char*>(&_impl_.ret_)) + sizeof(_impl_.svrtime_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* NewSyncResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 7, 2, 0, 2> NewSyncResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_._has_bits_),
    0, // no _extensions_
    7, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967168,  // skipmap
    offsetof(decltype(_table_), field_entries),
    7,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    &_NewSyncResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional int32 ret = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewSyncResponse, _impl_.ret_), 2>(),
     {8, 2, 0, PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.ret_)}},
    // optional .wechat_proto.CmdList cmdList = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.cmdlist_)}},
    // optional uint32 continueFlag = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewSyncResponse, _impl_.continueflag_), 3>(),
     {24, 3, 0, PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.continueflag_)}},
    // optional .wechat_proto.SKBuiltinString_ keyBuf = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.keybuf_)}},
    // optional uint32 status = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewSyncResponse, _impl_.status_), 4>(),
     {40, 4, 0, PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.status_)}},
    // optional uint32 onlineVersion = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewSyncResponse, _impl_.onlineversion_), 5>(),
     {48, 5, 0, PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.onlineversion_)}},
    // optional uint32 svrTime = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(NewSyncResponse, _impl_.svrtime_), 6>(),
     {56, 6, 0, PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.svrtime_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional int32 ret = 1;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.ret_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kInt32)},
    // optional .wechat_proto.CmdList cmdList = 2;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.cmdlist_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 continueFlag = 3;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.continueflag_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional .wechat_proto.SKBuiltinString_ keyBuf = 4;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.keybuf_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional uint32 status = 5;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.status_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 onlineVersion = 6;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.onlineversion_), _Internal::kHasBitsOffset + 5, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 svrTime = 7;
    {PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.svrtime_), _Internal::kHasBitsOffset + 6, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::wechat_proto::CmdList>()},
    {::_pbi::TcParser::GetTable<::wechat_proto::SKBuiltinString_>()},
  }}, {{
  }},
};

::uint8_t* NewSyncResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:wechat_proto.NewSyncResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional int32 ret = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<1>(
            stream, this->_internal_ret(), target);
  }

  // optional .wechat_proto.CmdList cmdList = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::cmdlist(this),
        _Internal::cmdlist(this).GetCachedSize(), target, stream);
  }

  // optional uint32 continueFlag = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        3, this->_internal_continueflag(), target);
  }

  // optional .wechat_proto.SKBuiltinString_ keyBuf = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::keybuf(this),
        _Internal::keybuf(this).GetCachedSize(), target, stream);
  }

  // optional uint32 status = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_status(), target);
  }

  // optional uint32 onlineVersion = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_onlineversion(), target);
  }

  // optional uint32 svrTime = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        7, this->_internal_svrtime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:wechat_proto.NewSyncResponse)
  return target;
}

::size_t NewSyncResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:wechat_proto.NewSyncResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .wechat_proto.CmdList cmdList = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.cmdlist_);
    }

    // optional .wechat_proto.SKBuiltinString_ keyBuf = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *_impl_.keybuf_);
    }

    // optional int32 ret = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
          this->_internal_ret());
    }

    // optional uint32 continueFlag = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_continueflag());
    }

    // optional uint32 status = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_status());
    }

    // optional uint32 onlineVersion = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_onlineversion());
    }

    // optional uint32 svrTime = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_svrtime());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData NewSyncResponse::_class_data_ = {
    ::google::protobuf::Message::CopyWithSourceCheck,
    NewSyncResponse::MergeImpl
};
const ::google::protobuf::Message::ClassData*NewSyncResponse::GetClassData() const { return &_class_data_; }


void NewSyncResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<NewSyncResponse*>(&to_msg);
  auto& from = static_cast<const NewSyncResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:wechat_proto.NewSyncResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_cmdlist()->::wechat_proto::CmdList::MergeFrom(
          from._internal_cmdlist());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_keybuf()->::wechat_proto::SKBuiltinString_::MergeFrom(
          from._internal_keybuf());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.ret_ = from._impl_.ret_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.continueflag_ = from._impl_.continueflag_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.status_ = from._impl_.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.onlineversion_ = from._impl_.onlineversion_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.svrtime_ = from._impl_.svrtime_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void NewSyncResponse::CopyFrom(const NewSyncResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:wechat_proto.NewSyncResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool NewSyncResponse::IsInitialized() const {
  return true;
}

void NewSyncResponse::InternalSwap(NewSyncResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.svrtime_)
      + sizeof(NewSyncResponse::_impl_.svrtime_)
      - PROTOBUF_FIELD_OFFSET(NewSyncResponse, _impl_.cmdlist_)>(
          reinterpret_cast<char*>(&_impl_.cmdlist_),
          reinterpret_cast<char*>(&other->_impl_.cmdlist_));
}

::google::protobuf::Metadata NewSyncResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_wechat_2eproto_getter, &descriptor_table_wechat_2eproto_once,
      file_level_metadata_wechat_2eproto[13]);
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace wechat_proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::wechat_proto::SKBuiltinString*
Arena::CreateMaybeMessage< ::wechat_proto::SKBuiltinString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::SKBuiltinString >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::SKBuiltinString_*
Arena::CreateMaybeMessage< ::wechat_proto::SKBuiltinString_ >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::SKBuiltinString_ >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::BaseRequest*
Arena::CreateMaybeMessage< ::wechat_proto::BaseRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::BaseRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::GetCDNDnsRequest*
Arena::CreateMaybeMessage< ::wechat_proto::GetCDNDnsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::GetCDNDnsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::BaseResponse*
Arena::CreateMaybeMessage< ::wechat_proto::BaseResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::BaseResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::GetCDNDnsResponse*
Arena::CreateMaybeMessage< ::wechat_proto::GetCDNDnsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::GetCDNDnsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::CDNDnsInfo*
Arena::CreateMaybeMessage< ::wechat_proto::CDNDnsInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::CDNDnsInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::CDNClientConfig*
Arena::CreateMaybeMessage< ::wechat_proto::CDNClientConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::CDNClientConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::CDNDnsPortInfo*
Arena::CreateMaybeMessage< ::wechat_proto::CDNDnsPortInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::CDNDnsPortInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::DATA*
Arena::CreateMaybeMessage< ::wechat_proto::DATA >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::DATA >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::CmdItem*
Arena::CreateMaybeMessage< ::wechat_proto::CmdItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::CmdItem >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::CmdList*
Arena::CreateMaybeMessage< ::wechat_proto::CmdList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::CmdList >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::NewSyncResponseMSGItem*
Arena::CreateMaybeMessage< ::wechat_proto::NewSyncResponseMSGItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::NewSyncResponseMSGItem >(arena);
}
template<> PROTOBUF_NOINLINE ::wechat_proto::NewSyncResponse*
Arena::CreateMaybeMessage< ::wechat_proto::NewSyncResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::wechat_proto::NewSyncResponse >(arena);
}
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
